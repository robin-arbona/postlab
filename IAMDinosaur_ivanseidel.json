{
  "repo": "IAMDinosaur",
  "owner": "ivanseidel",
  "octokit": {
    "log": {},
    "rest": {
      "actions": {},
      "activity": {},
      "apps": {},
      "billing": {},
      "checks": {},
      "codeScanning": {},
      "codesOfConduct": {},
      "emojis": {},
      "enterpriseAdmin": {},
      "gists": {},
      "git": {},
      "gitignore": {},
      "interactions": {},
      "issues": {},
      "licenses": {},
      "markdown": {},
      "meta": {},
      "migrations": {},
      "orgs": {},
      "packages": {},
      "projects": {},
      "pulls": {},
      "rateLimit": {},
      "reactions": {},
      "repos": {},
      "search": {},
      "secretScanning": {},
      "teams": {},
      "users": {}
    },
    "retry": {}
  },
  "info": {
    "id": 48660863,
    "node_id": "MDEwOlJlcG9zaXRvcnk0ODY2MDg2Mw==",
    "name": "IAMDinosaur",
    "full_name": "ivanseidel/IAMDinosaur",
    "private": false,
    "owner": {
      "login": "ivanseidel",
      "id": 3102127,
      "node_id": "MDQ6VXNlcjMxMDIxMjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3102127?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivanseidel",
      "html_url": "https://github.com/ivanseidel",
      "followers_url": "https://api.github.com/users/ivanseidel/followers",
      "following_url": "https://api.github.com/users/ivanseidel/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanseidel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivanseidel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanseidel/subscriptions",
      "organizations_url": "https://api.github.com/users/ivanseidel/orgs",
      "repos_url": "https://api.github.com/users/ivanseidel/repos",
      "events_url": "https://api.github.com/users/ivanseidel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivanseidel/received_events",
      "type": "User",
      "site_admin": false
    },
    "html_url": "https://github.com/ivanseidel/IAMDinosaur",
    "description": "ðŸ¦„ An Artificial Inteligence to teach Google's Dinosaur to jump cactus",
    "fork": false,
    "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur",
    "forks_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/forks",
    "keys_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/keys{/key_id}",
    "collaborators_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/collaborators{/collaborator}",
    "teams_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/teams",
    "hooks_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/hooks",
    "issue_events_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/issues/events{/number}",
    "events_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/events",
    "assignees_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/assignees{/user}",
    "branches_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/branches{/branch}",
    "tags_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/tags",
    "blobs_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/blobs{/sha}",
    "git_tags_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/tags{/sha}",
    "git_refs_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/refs{/sha}",
    "trees_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees{/sha}",
    "statuses_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/statuses/{sha}",
    "languages_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/languages",
    "stargazers_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/stargazers",
    "contributors_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contributors",
    "subscribers_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/subscribers",
    "subscription_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/subscription",
    "commits_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits{/sha}",
    "git_commits_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits{/sha}",
    "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/comments{/number}",
    "issue_comment_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/issues/comments{/number}",
    "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/{+path}",
    "compare_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/compare/{base}...{head}",
    "merges_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/merges",
    "archive_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/{archive_format}{/ref}",
    "downloads_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/downloads",
    "issues_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/issues{/number}",
    "pulls_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/pulls{/number}",
    "milestones_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/milestones{/number}",
    "notifications_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/notifications{?since,all,participating}",
    "labels_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/labels{/name}",
    "releases_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/releases{/id}",
    "deployments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/deployments",
    "created_at": "2015-12-27T21:19:53Z",
    "updated_at": "2022-03-28T01:46:19Z",
    "pushed_at": "2018-02-07T09:02:56Z",
    "git_url": "git://github.com/ivanseidel/IAMDinosaur.git",
    "ssh_url": "git@github.com:ivanseidel/IAMDinosaur.git",
    "clone_url": "https://github.com/ivanseidel/IAMDinosaur.git",
    "svn_url": "https://github.com/ivanseidel/IAMDinosaur",
    "homepage": "",
    "size": 356,
    "stargazers_count": 2763,
    "watchers_count": 2763,
    "language": "JavaScript",
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "forks_count": 552,
    "mirror_url": null,
    "archived": false,
    "disabled": false,
    "open_issues_count": 43,
    "license": {
      "key": "mit",
      "name": "MIT License",
      "spdx_id": "MIT",
      "url": "https://api.github.com/licenses/mit",
      "node_id": "MDc6TGljZW5zZTEz"
    },
    "allow_forking": true,
    "is_template": false,
    "topics": [
      "artificial-intelligence",
      "dino",
      "genetic-algorithm",
      "genome",
      "google-dinosaur",
      "neural-network"
    ],
    "visibility": "public",
    "forks": 552,
    "open_issues": 43,
    "watchers": 2763,
    "default_branch": "master",
    "permissions": {
      "admin": false,
      "maintain": false,
      "push": false,
      "triage": false,
      "pull": true
    },
    "temp_clone_token": "",
    "network_count": 552,
    "subscribers_count": 136
  },
  "branches": [
    {
      "name": "master",
      "commit": {
        "sha": "a3737740ad6e18eb3260f9c32d1070102abc4f5e",
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/a3737740ad6e18eb3260f9c32d1070102abc4f5e"
      },
      "protected": false
    },
    {
      "name": "revert-16-master",
      "commit": {
        "sha": "2e964c21db65a8bb6b0c98f923a0c1ae47b61e9a",
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/2e964c21db65a8bb6b0c98f923a0c1ae47b61e9a"
      },
      "protected": false
    }
  ],
  "commits": {
    "a3737740ad6e18eb3260f9c32d1070102abc4f5e": {
      "sha": "a3737740ad6e18eb3260f9c32d1070102abc4f5e",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6YTM3Mzc3NDBhZDZlMThlYjMyNjBmOWMzMmQxMDcwMTAyYWJjNGY1ZQ==",
      "commit": {
        "author": {
          "name": "Ivan Seidel",
          "email": "ivanseidel@gmail.com",
          "date": "2018-01-02T00:50:24Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2018-01-02T00:50:24Z"
        },
        "message": "Merge pull request #61 from Eduardomoberti/patch-2\n\nUpdate README.md",
        "tree": {
          "sha": "2b1c3ee48a3874633478f003041564c04a22ca9b",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/2b1c3ee48a3874633478f003041564c04a22ca9b"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/a3737740ad6e18eb3260f9c32d1070102abc4f5e",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaStdQCRBK7hj4Ov3rIwAAdHIIAG9JPl/3XwWMQ/5XuBvIPXcP\n5Kbv9x32Okbzs+2VtpNUfLN3yqjzreY5WmerwGa7g+n+nY2atuWopViZBAev0Srv\nvos4h6OkI9yWxA4CSJQCXvSszUK1hQooKaJGlYVK0GvrkXjHjukQYVV1PaHO9OR5\n78Mu3jZgeqzqy0l2hOLqjyBUo2GSCBmatTc0abzqdV+B4vKhIzZnoLSa8j+gsQtU\n/hLOVXgxvV0vmH0liUiNXQMWuzk8ncz8YC5EulPUT4JIUPfCwTJVPUGYzQ5N6gDD\nKrIh7QKsUcvFP+1td9xGf5N0+aDZkruxFlvIeNIggARSoHjt7VJR3EWubtuKXxw=\n=FNE9\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 2b1c3ee48a3874633478f003041564c04a22ca9b\nparent ffe428fe2a9024d213993ee4bedd2054437b6d7d\nparent 91ce4bcbcf136eab9f4567102a616889449a6200\nauthor Ivan Seidel <ivanseidel@gmail.com> 1514854224 -0200\ncommitter GitHub <noreply@github.com> 1514854224 -0200\n\nMerge pull request #61 from Eduardomoberti/patch-2\n\nUpdate README.md"
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/a3737740ad6e18eb3260f9c32d1070102abc4f5e",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/a3737740ad6e18eb3260f9c32d1070102abc4f5e",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/a3737740ad6e18eb3260f9c32d1070102abc4f5e/comments",
      "author": {
        "login": "ivanseidel",
        "id": 3102127,
        "node_id": "MDQ6VXNlcjMxMDIxMjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3102127?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ivanseidel",
        "html_url": "https://github.com/ivanseidel",
        "followers_url": "https://api.github.com/users/ivanseidel/followers",
        "following_url": "https://api.github.com/users/ivanseidel/following{/other_user}",
        "gists_url": "https://api.github.com/users/ivanseidel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ivanseidel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ivanseidel/subscriptions",
        "organizations_url": "https://api.github.com/users/ivanseidel/orgs",
        "repos_url": "https://api.github.com/users/ivanseidel/repos",
        "events_url": "https://api.github.com/users/ivanseidel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ivanseidel/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "ffe428fe2a9024d213993ee4bedd2054437b6d7d",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/ffe428fe2a9024d213993ee4bedd2054437b6d7d",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/ffe428fe2a9024d213993ee4bedd2054437b6d7d"
        },
        {
          "sha": "91ce4bcbcf136eab9f4567102a616889449a6200",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/91ce4bcbcf136eab9f4567102a616889449a6200",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/91ce4bcbcf136eab9f4567102a616889449a6200"
        }
      ],
      "stats": { "total": 6, "additions": 6, "deletions": 0 },
      "files": [
        {
          "sha": "3885c5d47d1dd9cc34dd047ab699534a39790db5",
          "filename": "README.md",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "changes": 6,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/a3737740ad6e18eb3260f9c32d1070102abc4f5e/README.md",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/a3737740ad6e18eb3260f9c32d1070102abc4f5e/README.md",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/README.md?ref=a3737740ad6e18eb3260f9c32d1070102abc4f5e",
          "patch": "@@ -88,6 +88,12 @@ There are a few files in the project:\n 4. Navigate up/down to the wanted file\n 5. Press `enter` (then, to start, press `s`)\n \n+### Some shortcuts\n+\n+1. Run the program\n+2. Press `o` to save the generation\n+3. Press Â´escapeÂ´, Â´qÂ´ or `C-c` to finish the process\n+\n \n ### Be aware of a game bug\n "
        }
      ]
    },
    "2e964c21db65a8bb6b0c98f923a0c1ae47b61e9a": {
      "sha": "2e964c21db65a8bb6b0c98f923a0c1ae47b61e9a",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6MmU5NjRjMjFkYjY1YThiYjZiMGM5OGY5MjNhMGMxYWU0N2I2MWU5YQ==",
      "commit": {
        "author": {
          "name": "Ivan Seidel",
          "email": "ivanseidel@gmail.com",
          "date": "2016-07-09T00:51:08Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2016-07-09T00:51:08Z"
        },
        "message": "Revert \"fixed package.json\"",
        "tree": {
          "sha": "c20a30e6993f6dca18a2cec59c610ce725d732a6",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/c20a30e6993f6dca18a2cec59c610ce725d732a6"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/2e964c21db65a8bb6b0c98f923a0c1ae47b61e9a",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/2e964c21db65a8bb6b0c98f923a0c1ae47b61e9a",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/2e964c21db65a8bb6b0c98f923a0c1ae47b61e9a",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/2e964c21db65a8bb6b0c98f923a0c1ae47b61e9a/comments",
      "author": {
        "login": "ivanseidel",
        "id": 3102127,
        "node_id": "MDQ6VXNlcjMxMDIxMjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3102127?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ivanseidel",
        "html_url": "https://github.com/ivanseidel",
        "followers_url": "https://api.github.com/users/ivanseidel/followers",
        "following_url": "https://api.github.com/users/ivanseidel/following{/other_user}",
        "gists_url": "https://api.github.com/users/ivanseidel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ivanseidel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ivanseidel/subscriptions",
        "organizations_url": "https://api.github.com/users/ivanseidel/orgs",
        "repos_url": "https://api.github.com/users/ivanseidel/repos",
        "events_url": "https://api.github.com/users/ivanseidel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ivanseidel/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "31e57d8be5051d0e363aaeac09d3f25cbb10e9a2",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/31e57d8be5051d0e363aaeac09d3f25cbb10e9a2",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/31e57d8be5051d0e363aaeac09d3f25cbb10e9a2"
        }
      ],
      "stats": { "total": 6, "additions": 1, "deletions": 5 },
      "files": [
        {
          "sha": "238abcd0506bc19ca2df1f1de4c2be149ce28c14",
          "filename": "package.json",
          "status": "modified",
          "additions": 1,
          "deletions": 5,
          "changes": 6,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/2e964c21db65a8bb6b0c98f923a0c1ae47b61e9a/package.json",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/2e964c21db65a8bb6b0c98f923a0c1ae47b61e9a/package.json",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/package.json?ref=2e964c21db65a8bb6b0c98f923a0c1ae47b61e9a",
          "patch": "@@ -14,10 +14,6 @@\n     \"blessed-contrib\": \"^2.5.2\",\n     \"lodash\": \"^3.10.1\",\n     \"robotjs\": \"^0.3.6\",\n-    \"synaptic\": \"^1.0.5\"\n-  },\n-  \"repository\": {\n-    \"type\": \"git\",\n-    \"url\": \"git://github.com/ivanseidel/IAMDinosaur.git\"\n+    \"synaptic\": \"^1.0.2\"\n   }\n }"
        }
      ]
    },
    "ffe428fe2a9024d213993ee4bedd2054437b6d7d": {
      "sha": "ffe428fe2a9024d213993ee4bedd2054437b6d7d",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6ZmZlNDI4ZmUyYTkwMjRkMjEzOTkzZWU0YmVkZDIwNTQ0MzdiNmQ3ZA==",
      "commit": {
        "author": {
          "name": "Ivan Seidel",
          "email": "ivanseidel@gmail.com",
          "date": "2018-01-02T00:50:05Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2018-01-02T00:50:05Z"
        },
        "message": "Merge pull request #62 from Eduardomoberti/patch-3\n\nUpdate UI.js",
        "tree": {
          "sha": "c6ba11b31259eea0f2e1d49d0574ac401d12debe",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/c6ba11b31259eea0f2e1d49d0574ac401d12debe"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/ffe428fe2a9024d213993ee4bedd2054437b6d7d",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaStc9CRBK7hj4Ov3rIwAAdHIIAFjt/sJqAa5ttG08LnPTM1aC\nIoMa7mjwRMf+QFolSYDZ9l/0c0IkF7wODtwyZR4N3I/afrzkohhZGBn5iuSKmciI\ny7dJCX4r9U1EvmGM+iavX66CclLCwTU2BgIolFMtmUYAuvwzWC3qEsLxBK5ZCMPI\n/nTG1Y2sx0/wh7fM5Kqf4fTXl6T7PyA4/nuJJMgD+4rnOrTK83mAA2tRroA79xj9\ngUSmz7ATYcTnURbGt48hkSjsUICMCLztf7O3BKSdmT3cv5v2aYsKaENt4I6aod+V\nYRhzYNaQI72gH6ZUwhwjQOXNqTO8nl+EIAOiB/me/gp3WrC+SSQDMKER+bF8XyY=\n=rRQP\n-----END PGP SIGNATURE-----\n",
          "payload": "tree c6ba11b31259eea0f2e1d49d0574ac401d12debe\nparent 8e4fdeac07a7b1c9b5b848a95faf6447454d6d69\nparent fcf9ab8264ef507c3d612d6d5e5d75353dcf395a\nauthor Ivan Seidel <ivanseidel@gmail.com> 1514854205 -0200\ncommitter GitHub <noreply@github.com> 1514854205 -0200\n\nMerge pull request #62 from Eduardomoberti/patch-3\n\nUpdate UI.js"
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/ffe428fe2a9024d213993ee4bedd2054437b6d7d",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/ffe428fe2a9024d213993ee4bedd2054437b6d7d",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/ffe428fe2a9024d213993ee4bedd2054437b6d7d/comments",
      "author": {
        "login": "ivanseidel",
        "id": 3102127,
        "node_id": "MDQ6VXNlcjMxMDIxMjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3102127?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ivanseidel",
        "html_url": "https://github.com/ivanseidel",
        "followers_url": "https://api.github.com/users/ivanseidel/followers",
        "following_url": "https://api.github.com/users/ivanseidel/following{/other_user}",
        "gists_url": "https://api.github.com/users/ivanseidel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ivanseidel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ivanseidel/subscriptions",
        "organizations_url": "https://api.github.com/users/ivanseidel/orgs",
        "repos_url": "https://api.github.com/users/ivanseidel/repos",
        "events_url": "https://api.github.com/users/ivanseidel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ivanseidel/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "8e4fdeac07a7b1c9b5b848a95faf6447454d6d69",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/8e4fdeac07a7b1c9b5b848a95faf6447454d6d69",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/8e4fdeac07a7b1c9b5b848a95faf6447454d6d69"
        },
        {
          "sha": "fcf9ab8264ef507c3d612d6d5e5d75353dcf395a",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/fcf9ab8264ef507c3d612d6d5e5d75353dcf395a",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/fcf9ab8264ef507c3d612d6d5e5d75353dcf395a"
        }
      ],
      "stats": { "total": 23, "additions": 14, "deletions": 9 },
      "files": [
        {
          "sha": "241736e113ffcee6c76e224329af9b7c49b40fcf",
          "filename": "UI.js",
          "status": "modified",
          "additions": 14,
          "deletions": 9,
          "changes": 23,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/ffe428fe2a9024d213993ee4bedd2054437b6d7d/UI.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/ffe428fe2a9024d213993ee4bedd2054437b6d7d/UI.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/UI.js?ref=ffe428fe2a9024d213993ee4bedd2054437b6d7d",
          "patch": "@@ -1,8 +1,8 @@\n-var contrib = require('blessed-contrib')\n-var blessed = require('blessed')\n+var contrib = require('blessed-contrib');\n+var blessed = require('blessed');\n var fs = require('fs');\n \n-var screen = blessed.screen()\n+var screen = blessed.screen();\n \n var UI = {};\n var savegame = function(){\n@@ -116,15 +116,20 @@ UI.init = function (gameManipulator, learner) {\n     align: 'center',\n   });\n \n-  UI.btnSave.on('click', savegame())\n-  screen.key(['o','O'], savegame());\n+  UI.btnSave.on('click', function(){\n+      savegame();\n+  });\n+\n+ screen.key(['o','O'], function(){\n+   savegame();\n+ });\n \n   screen.key(['escape', 'q', 'C-c'], function(ch, key) {\n     return process.exit(0);\n   });\n \n   screen.key(['s'], function (ch, key){\n-    if (learner.state == 'STOP') {\n+    if (learner.state === 'STOP') {\n       learner.state = 'LEARNING';\n       gameManipulator.focusGame();\n       learner.startLearning();\n@@ -133,7 +138,7 @@ UI.init = function (gameManipulator, learner) {\n     }\n   });\n \n-  screen.render()\n+  screen.render();\n };\n \n \n@@ -149,7 +154,7 @@ UI.refreshFiles = function (){\n   };\n \n   // Populate tree\n-  UI.logger.log('Reading genomes dir...')\n+  UI.logger.log('Reading genomes dir...');\n   var files = fs.readdirSync('./genomes');\n   for (var k in files) {\n     if (files[k].indexOf('.json') >= 0) {\n@@ -192,7 +197,7 @@ UI.render = function () {\n \n   if (UI.gm.gameOutput) {\n     var str = '';\n-    str += 'Action: ' + UI.gm.gameOutputString + '\\n'\n+    str += 'Action: ' + UI.gm.gameOutputString + '\\n';\n     str += 'Activation: ' + UI.gm.gameOutput;\n     UI.uiGenomes.setText(str);\n   } else {"
        }
      ]
    },
    "8e4fdeac07a7b1c9b5b848a95faf6447454d6d69": {
      "sha": "8e4fdeac07a7b1c9b5b848a95faf6447454d6d69",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6OGU0ZmRlYWMwN2E3YjFjOWI1Yjg0OGE5NWZhZjY0NDc0NTRkNmQ2OQ==",
      "commit": {
        "author": {
          "name": "Ivan Seidel",
          "email": "ivanseidel@gmail.com",
          "date": "2017-12-20T00:53:13Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2017-12-20T00:53:13Z"
        },
        "message": "Merge pull request #59 from adyavanapalli/patch-1\n\nFix typo.",
        "tree": {
          "sha": "1c3e40ed4aa1afee013fb76a5dc1aaf750ad7a25",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/1c3e40ed4aa1afee013fb76a5dc1aaf750ad7a25"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/8e4fdeac07a7b1c9b5b848a95faf6447454d6d69",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaObR5CRBK7hj4Ov3rIwAAdHIIADPWZXJFzAN6VmEGhexwrYjZ\nZSx095s5ylmeZMSQm5qQThZ6BEiWr1TX55Ra6IyGVAu3wK/+DZ/eRVGnercapUZ7\nMUalUvj2fG6kB3jMTwzgKN32MSqyzLAzAXg0OPW2pp+diHTHum55OxTJkPHMhTMk\nq7v9ho8RTDxLWcymH0JUPlxMbUXT0ys8kUaOZSOzHokD/sjcbpEmMPkGYvHRpNhh\ngs4LlJvKYb2vIfAlKxVnyuMjOwIo71Ow88wJCFO1OIAhYl3bzymj4EXElFRSMwGW\nR1OLXsnYW7vudbIGFYh2K/p3KpDYWskHplQ7fF89PVm8IvSnQsWk1lVjs/NzwlA=\n=Hin6\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 1c3e40ed4aa1afee013fb76a5dc1aaf750ad7a25\nparent 3a2e403c22b83693aeb88a55fab3d9753f57d3e5\nparent c34450a09649f0591451a62301212318413db6ba\nauthor Ivan Seidel <ivanseidel@gmail.com> 1513731193 -0200\ncommitter GitHub <noreply@github.com> 1513731193 -0200\n\nMerge pull request #59 from adyavanapalli/patch-1\n\nFix typo."
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/8e4fdeac07a7b1c9b5b848a95faf6447454d6d69",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/8e4fdeac07a7b1c9b5b848a95faf6447454d6d69",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/8e4fdeac07a7b1c9b5b848a95faf6447454d6d69/comments",
      "author": {
        "login": "ivanseidel",
        "id": 3102127,
        "node_id": "MDQ6VXNlcjMxMDIxMjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3102127?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ivanseidel",
        "html_url": "https://github.com/ivanseidel",
        "followers_url": "https://api.github.com/users/ivanseidel/followers",
        "following_url": "https://api.github.com/users/ivanseidel/following{/other_user}",
        "gists_url": "https://api.github.com/users/ivanseidel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ivanseidel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ivanseidel/subscriptions",
        "organizations_url": "https://api.github.com/users/ivanseidel/orgs",
        "repos_url": "https://api.github.com/users/ivanseidel/repos",
        "events_url": "https://api.github.com/users/ivanseidel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ivanseidel/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "3a2e403c22b83693aeb88a55fab3d9753f57d3e5",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/3a2e403c22b83693aeb88a55fab3d9753f57d3e5",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/3a2e403c22b83693aeb88a55fab3d9753f57d3e5"
        },
        {
          "sha": "c34450a09649f0591451a62301212318413db6ba",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/c34450a09649f0591451a62301212318413db6ba",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/c34450a09649f0591451a62301212318413db6ba"
        }
      ],
      "stats": { "total": 2, "additions": 1, "deletions": 1 },
      "files": [
        {
          "sha": "222a603940dcc50d2ea91a3792501eb73ee6e44a",
          "filename": "README.md",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "changes": 2,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/8e4fdeac07a7b1c9b5b848a95faf6447454d6d69/README.md",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/8e4fdeac07a7b1c9b5b848a95faf6447454d6d69/README.md",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/README.md?ref=8e4fdeac07a7b1c9b5b848a95faf6447454d6d69",
          "patch": "@@ -5,7 +5,7 @@\n A simple artificial intelligence to teach Google Chrome's offline dinosaur to\n jump cactus, using Neural Networks and a simple Genetic Algorithm.\n \n-**Watch** this video to see it in action, and learn how it works: [Artificial Inteligence with Google's Dinosaur](https://youtu.be/P7XHzqZjXQs)\n+**Watch** this video to see it in action, and learn how it works: [Artificial Intelligence with Google's Dinosaur](https://youtu.be/P7XHzqZjXQs)\n \n ## Installation\n "
        }
      ]
    },
    "3a2e403c22b83693aeb88a55fab3d9753f57d3e5": {
      "sha": "3a2e403c22b83693aeb88a55fab3d9753f57d3e5",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6M2EyZTQwM2MyMmI4MzY5M2FlYjg4YTU1ZmFiM2Q5NzUzZjU3ZDNlNQ==",
      "commit": {
        "author": {
          "name": "Ivan Seidel",
          "email": "ivanseidel@gmail.com",
          "date": "2017-06-09T19:20:15Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2017-06-09T19:20:15Z"
        },
        "message": "Merge pull request #51 from zixia/master\n\ncompatible(chrome): v59 changed the `GAME OVER` position. (fix #50)",
        "tree": {
          "sha": "809d6d22ffa778d946620dde50af2ff2402e6abd",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/809d6d22ffa778d946620dde50af2ff2402e6abd"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/3a2e403c22b83693aeb88a55fab3d9753f57d3e5",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/3a2e403c22b83693aeb88a55fab3d9753f57d3e5",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/3a2e403c22b83693aeb88a55fab3d9753f57d3e5",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/3a2e403c22b83693aeb88a55fab3d9753f57d3e5/comments",
      "author": {
        "login": "ivanseidel",
        "id": 3102127,
        "node_id": "MDQ6VXNlcjMxMDIxMjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3102127?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ivanseidel",
        "html_url": "https://github.com/ivanseidel",
        "followers_url": "https://api.github.com/users/ivanseidel/followers",
        "following_url": "https://api.github.com/users/ivanseidel/following{/other_user}",
        "gists_url": "https://api.github.com/users/ivanseidel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ivanseidel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ivanseidel/subscriptions",
        "organizations_url": "https://api.github.com/users/ivanseidel/orgs",
        "repos_url": "https://api.github.com/users/ivanseidel/repos",
        "events_url": "https://api.github.com/users/ivanseidel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ivanseidel/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "aeb80e95cb3d9051bfd518da2bc6d73ae24a44d4",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/aeb80e95cb3d9051bfd518da2bc6d73ae24a44d4",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/aeb80e95cb3d9051bfd518da2bc6d73ae24a44d4"
        },
        {
          "sha": "8644b0a8f3e148523afcb722c603fe819f19258d",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/8644b0a8f3e148523afcb722c603fe819f19258d",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/8644b0a8f3e148523afcb722c603fe819f19258d"
        }
      ],
      "stats": { "total": 2, "additions": 1, "deletions": 1 },
      "files": [
        {
          "sha": "ec557ba1af19dd7eeb9da5b3d81d492ab7ce5619",
          "filename": "GameManipulator.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "changes": 2,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/3a2e403c22b83693aeb88a55fab3d9753f57d3e5/GameManipulator.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/3a2e403c22b83693aeb88a55fab3d9753f57d3e5/GameManipulator.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/GameManipulator.js?ref=3a2e403c22b83693aeb88a55fab3d9753f57d3e5",
          "patch": "@@ -28,7 +28,7 @@ var GameManipulator = {\n   gamestate: 'OVER',\n \n   // GameOver Position\n-  gameOverOffset: [190, -82],\n+  gameOverOffset: [190, -75],\n \n   // Stores an array of \"sensors\" (Ray tracings)\n   // Positions are always relative to global \"offset\""
        }
      ]
    },
    "aeb80e95cb3d9051bfd518da2bc6d73ae24a44d4": {
      "sha": "aeb80e95cb3d9051bfd518da2bc6d73ae24a44d4",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6YWViODBlOTVjYjNkOTA1MWJmZDUxOGRhMmJjNmQ3M2FlMjRhNDRkNA==",
      "commit": {
        "author": {
          "name": "Ivan Seidel",
          "email": "ivanseidel@gmail.com",
          "date": "2017-03-26T22:53:31Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2017-03-26T22:53:31Z"
        },
        "message": "Merge pull request #48 from AdriiiPRodri/master\n\nVersion update",
        "tree": {
          "sha": "8bad95e0204b7ab173c716c281e2c223d8d7231c",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/8bad95e0204b7ab173c716c281e2c223d8d7231c"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/aeb80e95cb3d9051bfd518da2bc6d73ae24a44d4",
        "comment_count": 1,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/aeb80e95cb3d9051bfd518da2bc6d73ae24a44d4",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/aeb80e95cb3d9051bfd518da2bc6d73ae24a44d4",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/aeb80e95cb3d9051bfd518da2bc6d73ae24a44d4/comments",
      "author": {
        "login": "ivanseidel",
        "id": 3102127,
        "node_id": "MDQ6VXNlcjMxMDIxMjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3102127?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ivanseidel",
        "html_url": "https://github.com/ivanseidel",
        "followers_url": "https://api.github.com/users/ivanseidel/followers",
        "following_url": "https://api.github.com/users/ivanseidel/following{/other_user}",
        "gists_url": "https://api.github.com/users/ivanseidel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ivanseidel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ivanseidel/subscriptions",
        "organizations_url": "https://api.github.com/users/ivanseidel/orgs",
        "repos_url": "https://api.github.com/users/ivanseidel/repos",
        "events_url": "https://api.github.com/users/ivanseidel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ivanseidel/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "50e46cacf7a3492261a2b9c6feb18f0fb7e0e6e2",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/50e46cacf7a3492261a2b9c6feb18f0fb7e0e6e2",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/50e46cacf7a3492261a2b9c6feb18f0fb7e0e6e2"
        },
        {
          "sha": "041722ff7c7d59eb49335e48d103180586493da3",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/041722ff7c7d59eb49335e48d103180586493da3",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/041722ff7c7d59eb49335e48d103180586493da3"
        }
      ],
      "stats": { "total": 2, "additions": 1, "deletions": 1 },
      "files": [
        {
          "sha": "9af20b699b0498891d3bc334a78917cf95d98fda",
          "filename": "package.json",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "changes": 2,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/aeb80e95cb3d9051bfd518da2bc6d73ae24a44d4/package.json",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/aeb80e95cb3d9051bfd518da2bc6d73ae24a44d4/package.json",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/package.json?ref=aeb80e95cb3d9051bfd518da2bc6d73ae24a44d4",
          "patch": "@@ -13,7 +13,7 @@\n     \"blessed\": \"^0.1.81\",\n     \"blessed-contrib\": \"^2.5.2\",\n     \"lodash\": \"^3.10.1\",\n-    \"robotjs\": \"^0.3.6\",\n+    \"robotjs\": \"^0.4.5\",\n     \"synaptic\": \"^1.0.5\"\n   },\n   \"repository\": {"
        }
      ]
    },
    "50e46cacf7a3492261a2b9c6feb18f0fb7e0e6e2": {
      "sha": "50e46cacf7a3492261a2b9c6feb18f0fb7e0e6e2",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6NTBlNDZjYWNmN2EzNDkyMjYxYTJiOWM2ZmViMThmMGZiN2UwZTZlMg==",
      "commit": {
        "author": {
          "name": "Ivan Seidel",
          "email": "ivanseidel@gmail.com",
          "date": "2016-12-17T05:23:01Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2016-12-17T05:23:01Z"
        },
        "message": "Merge pull request #40 from tiagosomda/master\n\nFixed page reload bug for windows OS",
        "tree": {
          "sha": "c0f1f0e3c26aca278774921b4ab5148bdabc5936",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/c0f1f0e3c26aca278774921b4ab5148bdabc5936"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/50e46cacf7a3492261a2b9c6feb18f0fb7e0e6e2",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/50e46cacf7a3492261a2b9c6feb18f0fb7e0e6e2",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/50e46cacf7a3492261a2b9c6feb18f0fb7e0e6e2",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/50e46cacf7a3492261a2b9c6feb18f0fb7e0e6e2/comments",
      "author": {
        "login": "ivanseidel",
        "id": 3102127,
        "node_id": "MDQ6VXNlcjMxMDIxMjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3102127?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ivanseidel",
        "html_url": "https://github.com/ivanseidel",
        "followers_url": "https://api.github.com/users/ivanseidel/followers",
        "following_url": "https://api.github.com/users/ivanseidel/following{/other_user}",
        "gists_url": "https://api.github.com/users/ivanseidel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ivanseidel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ivanseidel/subscriptions",
        "organizations_url": "https://api.github.com/users/ivanseidel/orgs",
        "repos_url": "https://api.github.com/users/ivanseidel/repos",
        "events_url": "https://api.github.com/users/ivanseidel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ivanseidel/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "b57942434601f1b80bb7e1e466efe66a0b90b7ca",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/b57942434601f1b80bb7e1e466efe66a0b90b7ca",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/b57942434601f1b80bb7e1e466efe66a0b90b7ca"
        },
        {
          "sha": "8e3ab2ac51bd171ef6c5b485abe140ab7522137a",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/8e3ab2ac51bd171ef6c5b485abe140ab7522137a",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/8e3ab2ac51bd171ef6c5b485abe140ab7522137a"
        }
      ],
      "stats": { "total": 15, "additions": 14, "deletions": 1 },
      "files": [
        {
          "sha": "55c2c2735942d3062c5904ce4d521b714780c07d",
          "filename": "GameManipulator.js",
          "status": "modified",
          "additions": 14,
          "deletions": 1,
          "changes": 15,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/50e46cacf7a3492261a2b9c6feb18f0fb7e0e6e2/GameManipulator.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/50e46cacf7a3492261a2b9c6feb18f0fb7e0e6e2/GameManipulator.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/GameManipulator.js?ref=50e46cacf7a3492261a2b9c6feb18f0fb7e0e6e2",
          "patch": "@@ -208,7 +208,7 @@ GameManipulator.startNewGame = function (next) {\n     // Press space to begin game (repetidelly)\n     _startKeyInterval = setInterval(function (){\n       // Due to dino slowly gliding over the screen after multiple restarts, its better to just reload the page\n-      robot.keyTap('r','command');\n+      GameManipulator.reloadPage();\n       setTimeout(function() {\n         // Once reloaded we wait 0.5sec for it to let us start the game with a space.\n           robot.keyTap(' ');\n@@ -228,6 +228,19 @@ GameManipulator.startNewGame = function (next) {\n \n }\n \n+// reload the page\n+GameManipulator.reloadPage = function ()\n+{\n+  // retrieves platform\n+  var platform = process.platform;\n+\n+  if(/^win/.test(process.platform)) {\n+    robot.keyTap('r','control');\n+  } else if(/^darwin/.test(process.platform)) {\n+    robot.keyTap('r','command');\n+  }\n+}\n+\n \n // Compute points based on sensors\n //"
        }
      ]
    },
    "b57942434601f1b80bb7e1e466efe66a0b90b7ca": {
      "sha": "b57942434601f1b80bb7e1e466efe66a0b90b7ca",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6YjU3OTQyNDM0NjAxZjFiODBiYjdlMWU0NjZlZmU2NmEwYjkwYjdjYQ==",
      "commit": {
        "author": {
          "name": "Ivan Seidel",
          "email": "ivanseidel@gmail.com",
          "date": "2016-10-25T19:03:18Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2016-10-25T19:03:18Z"
        },
        "message": "Merge pull request #23 from JPaulMora/master\n\nOK, Ready!",
        "tree": {
          "sha": "07e7e7ddd00ed728652d6a35f6e287a28bf11ca5",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/07e7e7ddd00ed728652d6a35f6e287a28bf11ca5"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/b57942434601f1b80bb7e1e466efe66a0b90b7ca",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/b57942434601f1b80bb7e1e466efe66a0b90b7ca",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/b57942434601f1b80bb7e1e466efe66a0b90b7ca",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/b57942434601f1b80bb7e1e466efe66a0b90b7ca/comments",
      "author": {
        "login": "ivanseidel",
        "id": 3102127,
        "node_id": "MDQ6VXNlcjMxMDIxMjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3102127?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ivanseidel",
        "html_url": "https://github.com/ivanseidel",
        "followers_url": "https://api.github.com/users/ivanseidel/followers",
        "following_url": "https://api.github.com/users/ivanseidel/following{/other_user}",
        "gists_url": "https://api.github.com/users/ivanseidel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ivanseidel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ivanseidel/subscriptions",
        "organizations_url": "https://api.github.com/users/ivanseidel/orgs",
        "repos_url": "https://api.github.com/users/ivanseidel/repos",
        "events_url": "https://api.github.com/users/ivanseidel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ivanseidel/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "31e57d8be5051d0e363aaeac09d3f25cbb10e9a2",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/31e57d8be5051d0e363aaeac09d3f25cbb10e9a2",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/31e57d8be5051d0e363aaeac09d3f25cbb10e9a2"
        },
        {
          "sha": "8263db554465fd943fff0d90915073dd533a02d6",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/8263db554465fd943fff0d90915073dd533a02d6",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/8263db554465fd943fff0d90915073dd533a02d6"
        }
      ],
      "stats": { "total": 61, "additions": 34, "deletions": 27 },
      "files": [
        {
          "sha": "80f5dfdf22db3bcbe3a7d79082c3a0a3feb359df",
          "filename": "GameManipulator.js",
          "status": "modified",
          "additions": 8,
          "deletions": 3,
          "changes": 11,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/b57942434601f1b80bb7e1e466efe66a0b90b7ca/GameManipulator.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/b57942434601f1b80bb7e1e466efe66a0b90b7ca/GameManipulator.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/GameManipulator.js?ref=b57942434601f1b80bb7e1e466efe66a0b90b7ca",
          "patch": "@@ -8,7 +8,7 @@ var Scanner = require ('./Scanner');\n // COLOR DEFINITIONS\n // This is the Dino's colour, also used by Obstacles.\n var COLOR_DINOSAUR = '535353';\n-\n+var DARK_COLOR_DINO = 'ACACAC';\n \n var GameManipulator = {\n \n@@ -207,7 +207,12 @@ GameManipulator.startNewGame = function (next) {\n \n     // Press space to begin game (repetidelly)\n     _startKeyInterval = setInterval(function (){\n-      robot.keyTap(' ');\n+      // Due to dino slowly gliding over the screen after multiple restarts, its better to just reload the page\n+      robot.keyTap('r','command');\n+      setTimeout(function() {\n+        // Once reloaded we wait 0.5sec for it to let us start the game with a space.\n+          robot.keyTap(' ');\n+      }, 500);\n     }, 300);\n \n     // Refresh state\n@@ -429,4 +434,4 @@ GameManipulator.focusGame = function (){\n   robot.mouseClick('left');\n }\n \n-module.exports = GameManipulator;\n\\ No newline at end of file\n+module.exports = GameManipulator;"
        },
        {
          "sha": "5637e56eaaeaab1b7c5b946b3b816f34f57c1554",
          "filename": "UI.js",
          "status": "modified",
          "additions": 26,
          "deletions": 24,
          "changes": 50,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/b57942434601f1b80bb7e1e466efe66a0b90b7ca/UI.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/b57942434601f1b80bb7e1e466efe66a0b90b7ca/UI.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/UI.js?ref=b57942434601f1b80bb7e1e466efe66a0b90b7ca",
          "patch": "@@ -5,6 +5,27 @@ var fs = require('fs');\n var screen = blessed.screen()\n \n var UI = {};\n+var savegame = function(){\n+  var jsonGenomes = [];\n+  for (var k in UI.learner.genomes) {\n+    jsonGenomes.push(UI.learner.genomes[k].toJSON());\n+  }\n+\n+  UI.logger.log('Saving '+jsonGenomes.length+' genomes...');\n+\n+  var dir = './genomes';\n+  var fileName = dir + '/gen_'+UI.learner.generation+'_'+Date.now()+'.json';\n+  fs.writeFile(fileName, JSON.stringify(jsonGenomes), function (err){\n+    if (err) {\n+      UI.logger.log('Failed to save! '+err);\n+    } else {\n+      UI.logger.log('Saved to '+fileName);\n+    }\n+\n+    UI.refreshFiles();\n+  });\n+\n+};\n \n \n // Initialize UI objects\n@@ -65,6 +86,7 @@ UI.init = function (gameManipulator, learner) {\n \n \n   // Callback for Loading genomes and focusing tree\n+  screen.key(['l','L'], UI.savesTree.focus.bind(UI.savesTree));\n   UI.savesTree.on('click', UI.savesTree.focus.bind(UI.savesTree));\n   UI.savesTree.on('select', function (item){\n \n@@ -94,28 +116,8 @@ UI.init = function (gameManipulator, learner) {\n     align: 'center',\n   });\n \n-  UI.btnSave.on('click', function (){\n-\n-    var jsonGenomes = [];\n-    for (var k in UI.learner.genomes) {\n-      jsonGenomes.push(UI.learner.genomes[k].toJSON());\n-    }\n-\n-    UI.logger.log('Saving '+jsonGenomes.length+' genomes...');\n-\n-    var dir = './genomes';\n-    var fileName = dir + '/gen_'+UI.learner.generation+'_'+Date.now()+'.json';\n-    fs.writeFile(fileName, JSON.stringify(jsonGenomes), function (err){\n-      if (err) {\n-        UI.logger.log('Failed to save! '+err);\n-      } else {\n-        UI.logger.log('Saved to '+fileName);\n-      }\n-\n-      UI.refreshFiles();\n-    });\n-\n-  });\n+  UI.btnSave.on('click', savegame())\n+  screen.key(['o','O'], savegame());\n \n   screen.key(['escape', 'q', 'C-c'], function(ch, key) {\n     return process.exit(0);\n@@ -151,7 +153,7 @@ UI.refreshFiles = function (){\n   var files = fs.readdirSync('./genomes');\n   for (var k in files) {\n     if (files[k].indexOf('.json') >= 0) {\n-      \n+\n       fileData.children.push({\n         name: files[k],\n         isFile: true,\n@@ -204,4 +206,4 @@ UI.render = function () {\n // Continuously render screen\n setInterval(UI.render, 25);\n \n-module.exports = UI;\n\\ No newline at end of file\n+module.exports = UI;"
        }
      ]
    },
    "31e57d8be5051d0e363aaeac09d3f25cbb10e9a2": {
      "sha": "31e57d8be5051d0e363aaeac09d3f25cbb10e9a2",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6MzFlNTdkOGJlNTA1MWQwZTM2M2FhZWFjMDlkM2YyNWNiYjEwZTlhMg==",
      "commit": {
        "author": {
          "name": "Ivan Seidel",
          "email": "ivanseidel@gmail.com",
          "date": "2016-07-09T00:31:09Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2016-07-09T00:31:09Z"
        },
        "message": "Merge pull request #16 from JPaulMora/master\n\nfixed package.json",
        "tree": {
          "sha": "4901bdd0fd61ce3356818d84aa81a2a81e0816ca",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/4901bdd0fd61ce3356818d84aa81a2a81e0816ca"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/31e57d8be5051d0e363aaeac09d3f25cbb10e9a2",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/31e57d8be5051d0e363aaeac09d3f25cbb10e9a2",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/31e57d8be5051d0e363aaeac09d3f25cbb10e9a2",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/31e57d8be5051d0e363aaeac09d3f25cbb10e9a2/comments",
      "author": {
        "login": "ivanseidel",
        "id": 3102127,
        "node_id": "MDQ6VXNlcjMxMDIxMjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3102127?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ivanseidel",
        "html_url": "https://github.com/ivanseidel",
        "followers_url": "https://api.github.com/users/ivanseidel/followers",
        "following_url": "https://api.github.com/users/ivanseidel/following{/other_user}",
        "gists_url": "https://api.github.com/users/ivanseidel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ivanseidel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ivanseidel/subscriptions",
        "organizations_url": "https://api.github.com/users/ivanseidel/orgs",
        "repos_url": "https://api.github.com/users/ivanseidel/repos",
        "events_url": "https://api.github.com/users/ivanseidel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ivanseidel/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "15067c9f5a2e2f91292ba53e8fcc4cc2d80c8624",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/15067c9f5a2e2f91292ba53e8fcc4cc2d80c8624",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/15067c9f5a2e2f91292ba53e8fcc4cc2d80c8624"
        },
        {
          "sha": "ae3bef1d4d4ecc594a0a48d1983fa89b1609c3f5",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/ae3bef1d4d4ecc594a0a48d1983fa89b1609c3f5",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/ae3bef1d4d4ecc594a0a48d1983fa89b1609c3f5"
        }
      ],
      "stats": { "total": 6, "additions": 5, "deletions": 1 },
      "files": [
        {
          "sha": "38ffa4071e568218444450dfbafb51e25ffdceaa",
          "filename": "package.json",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "changes": 6,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/31e57d8be5051d0e363aaeac09d3f25cbb10e9a2/package.json",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/31e57d8be5051d0e363aaeac09d3f25cbb10e9a2/package.json",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/package.json?ref=31e57d8be5051d0e363aaeac09d3f25cbb10e9a2",
          "patch": "@@ -14,6 +14,10 @@\n     \"blessed-contrib\": \"^2.5.2\",\n     \"lodash\": \"^3.10.1\",\n     \"robotjs\": \"^0.3.6\",\n-    \"synaptic\": \"^1.0.2\"\n+    \"synaptic\": \"^1.0.5\"\n+  },\n+  \"repository\": {\n+    \"type\": \"git\",\n+    \"url\": \"git://github.com/ivanseidel/IAMDinosaur.git\"\n   }\n }"
        }
      ]
    },
    "15067c9f5a2e2f91292ba53e8fcc4cc2d80c8624": {
      "sha": "15067c9f5a2e2f91292ba53e8fcc4cc2d80c8624",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6MTUwNjdjOWY1YTJlMmY5MTI5MmJhNTNlOGZjYzRjYzJkODBjODYyNA==",
      "commit": {
        "author": {
          "name": "Ivan Seidel",
          "email": "ivanseidel@gmail.com",
          "date": "2016-01-05T15:14:32Z"
        },
        "committer": {
          "name": "Ivan Seidel",
          "email": "ivanseidel@gmail.com",
          "date": "2016-01-05T15:14:32Z"
        },
        "message": "Rename scanner.js to Scanner.js",
        "tree": {
          "sha": "c20a30e6993f6dca18a2cec59c610ce725d732a6",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/c20a30e6993f6dca18a2cec59c610ce725d732a6"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/15067c9f5a2e2f91292ba53e8fcc4cc2d80c8624",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/15067c9f5a2e2f91292ba53e8fcc4cc2d80c8624",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/15067c9f5a2e2f91292ba53e8fcc4cc2d80c8624",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/15067c9f5a2e2f91292ba53e8fcc4cc2d80c8624/comments",
      "author": {
        "login": "ivanseidel",
        "id": 3102127,
        "node_id": "MDQ6VXNlcjMxMDIxMjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3102127?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ivanseidel",
        "html_url": "https://github.com/ivanseidel",
        "followers_url": "https://api.github.com/users/ivanseidel/followers",
        "following_url": "https://api.github.com/users/ivanseidel/following{/other_user}",
        "gists_url": "https://api.github.com/users/ivanseidel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ivanseidel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ivanseidel/subscriptions",
        "organizations_url": "https://api.github.com/users/ivanseidel/orgs",
        "repos_url": "https://api.github.com/users/ivanseidel/repos",
        "events_url": "https://api.github.com/users/ivanseidel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ivanseidel/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "ivanseidel",
        "id": 3102127,
        "node_id": "MDQ6VXNlcjMxMDIxMjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3102127?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ivanseidel",
        "html_url": "https://github.com/ivanseidel",
        "followers_url": "https://api.github.com/users/ivanseidel/followers",
        "following_url": "https://api.github.com/users/ivanseidel/following{/other_user}",
        "gists_url": "https://api.github.com/users/ivanseidel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ivanseidel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ivanseidel/subscriptions",
        "organizations_url": "https://api.github.com/users/ivanseidel/orgs",
        "repos_url": "https://api.github.com/users/ivanseidel/repos",
        "events_url": "https://api.github.com/users/ivanseidel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ivanseidel/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "b062da9296f831ba8752412d3764c40f52897aa5",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/b062da9296f831ba8752412d3764c40f52897aa5",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/b062da9296f831ba8752412d3764c40f52897aa5"
        }
      ],
      "stats": { "total": 2, "additions": 1, "deletions": 1 },
      "files": [
        {
          "sha": "1abf8be52e8260e946ca5c8d2ab8e0a56efe2d30",
          "filename": "Scanner.js",
          "status": "renamed",
          "additions": 1,
          "deletions": 1,
          "changes": 2,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/15067c9f5a2e2f91292ba53e8fcc4cc2d80c8624/Scanner.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/15067c9f5a2e2f91292ba53e8fcc4cc2d80c8624/Scanner.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/Scanner.js?ref=15067c9f5a2e2f91292ba53e8fcc4cc2d80c8624",
          "patch": "@@ -100,4 +100,4 @@ Scanner.scanUntil = function (start, delta, matchColor, inverted, iterLimit) {\n \n \n // Export the module\n-module.exports = Scanner;\n\\ No newline at end of file\n+module.exports = Scanner;",
          "previous_filename": "scanner.js"
        }
      ]
    },
    "b062da9296f831ba8752412d3764c40f52897aa5": {
      "sha": "b062da9296f831ba8752412d3764c40f52897aa5",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6YjA2MmRhOTI5NmY4MzFiYTg3NTI0MTJkMzc2NGM0MGY1Mjg5N2FhNQ==",
      "commit": {
        "author": {
          "name": "Ivan Seidel",
          "email": "ivanseidel@gmail.com",
          "date": "2015-12-29T15:47:46Z"
        },
        "committer": {
          "name": "Ivan Seidel",
          "email": "ivanseidel@gmail.com",
          "date": "2015-12-29T15:47:46Z"
        },
        "message": "Following Felix's style guideline\n\nChanged indent to spaces. Fixed comments. Fixed quotes. Added guideline\nto README. Added space to while/if/for. Added bracket in all\nstatements. Removed extra comment lines.",
        "tree": {
          "sha": "77d31df2a44131314d97b59127fb73a2d3e30305",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/77d31df2a44131314d97b59127fb73a2d3e30305"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/b062da9296f831ba8752412d3764c40f52897aa5",
        "comment_count": 1,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/b062da9296f831ba8752412d3764c40f52897aa5",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/b062da9296f831ba8752412d3764c40f52897aa5",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/b062da9296f831ba8752412d3764c40f52897aa5/comments",
      "author": {
        "login": "ivanseidel",
        "id": 3102127,
        "node_id": "MDQ6VXNlcjMxMDIxMjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3102127?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ivanseidel",
        "html_url": "https://github.com/ivanseidel",
        "followers_url": "https://api.github.com/users/ivanseidel/followers",
        "following_url": "https://api.github.com/users/ivanseidel/following{/other_user}",
        "gists_url": "https://api.github.com/users/ivanseidel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ivanseidel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ivanseidel/subscriptions",
        "organizations_url": "https://api.github.com/users/ivanseidel/orgs",
        "repos_url": "https://api.github.com/users/ivanseidel/repos",
        "events_url": "https://api.github.com/users/ivanseidel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ivanseidel/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "ivanseidel",
        "id": 3102127,
        "node_id": "MDQ6VXNlcjMxMDIxMjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3102127?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ivanseidel",
        "html_url": "https://github.com/ivanseidel",
        "followers_url": "https://api.github.com/users/ivanseidel/followers",
        "following_url": "https://api.github.com/users/ivanseidel/following{/other_user}",
        "gists_url": "https://api.github.com/users/ivanseidel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ivanseidel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ivanseidel/subscriptions",
        "organizations_url": "https://api.github.com/users/ivanseidel/orgs",
        "repos_url": "https://api.github.com/users/ivanseidel/repos",
        "events_url": "https://api.github.com/users/ivanseidel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ivanseidel/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "184d836dff9d30d083db4799d215ce7d335dbd3d",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/184d836dff9d30d083db4799d215ce7d335dbd3d",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/184d836dff9d30d083db4799d215ce7d335dbd3d"
        }
      ],
      "stats": { "total": 1622, "additions": 778, "deletions": 844 },
      "files": [
        {
          "sha": "ba5de5986613304b1f6d3bc939d9df93559e1093",
          "filename": "GameManipulator.js",
          "status": "modified",
          "additions": 307,
          "deletions": 331,
          "changes": 638,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/b062da9296f831ba8752412d3764c40f52897aa5/GameManipulator.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/b062da9296f831ba8752412d3764c40f52897aa5/GameManipulator.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/GameManipulator.js?ref=b062da9296f831ba8752412d3764c40f52897aa5",
          "patch": "@@ -1,268 +1,246 @@\n-/*\n-\tDeveloped by Ivan Seidel [https://github.com/ivanseidel]\n-*/\n-\n var robot = require('robotjs');\n \n-var scanner = require ('./scanner');\n+// Cache screen size\n var screenSize = robot.getScreenSize();\n \n-//\n-// Color definitions\n-//\n+var Scanner = require ('./Scanner');\n \n+// COLOR DEFINITIONS\n // This is the Dino's colour, also used by Obstacles.\n-var COLOR_DINOSAUR = \"535353\";\n+var COLOR_DINOSAUR = '535353';\n+\n \n var GameManipulator = {\n \n-\t// Stores the game position (Globally)\n-\toffset: null,\n-\twidth: null,\n-\n-\t// Stores points (jumps)\n-\tpoints: 0,\n-\n-\t// Listners\n-\tonGameEnd: null,\n-\tonGameStart: null,\n-\tonSensorData: null,\n-\n-\t// Game State\n-\tgamestate: 'OVER',\n-\n-\t// GameOver Position\n-\tgameOverOffset: [190, -82],\n-\n-\t//\n-\t// Stores an array of \"sensors\" (Ray tracings)\n-\t// Positions are always relative to global \"offset\"\n-\t//\n-\tsensors: [\n-\t\t{\n-\t\t\tlastValue: 1,\n-\n-\t\t\tvalue: null,\n-\t\t\toffset: [84, -15], // 64,-15\n-\t\t\tstep: [4, 0],\n-\t\t\tlength: 0.3,\n-\n-\t\t\t// Speed\n-\t\t\tspeed: 0,\n-\t\t\tlastComputeSpeed: 0,\n-\n-\t\t\t// Computes size of the object\n-\t\t\tsize: 0,\n-\t\t\tcomputeSize: true,\n-\t\t},\n-\n-\t\t// {\n-\t\t// \tlastValue: 1,\n-\n-\t\t// \tvalue: null,\n-\t\t// \toffset: [66, -30],\n-\t\t// \tstep: [5, 0],\n-\t\t// \tlength: 0.5,\n-\t\t// }\n-\t]\n+  // Stores the game position (Globally)\n+  offset: null,\n+  width: null,\n+\n+  // Stores points (jumps)\n+  points: 0,\n+\n+  // Listners\n+  onGameEnd: null,\n+  onGameStart: null,\n+  onSensorData: null,\n+\n+  // Game State\n+  gamestate: 'OVER',\n+\n+  // GameOver Position\n+  gameOverOffset: [190, -82],\n+\n+  // Stores an array of \"sensors\" (Ray tracings)\n+  // Positions are always relative to global \"offset\"\n+  sensors: [\n+    {\n+      lastValue: 1,\n+\n+      value: null,\n+      offset: [84, -15], // 64,-15\n+      step: [4, 0],\n+      length: 0.3,\n+\n+      // Speed\n+      speed: 0,\n+      lastComputeSpeed: 0,\n+\n+      // Computes size of the object\n+      size: 0,\n+      computeSize: true,\n+    },\n+  ]\n };\n \n \n-//\n // Find out dinosaur (fast)\n-//\n GameManipulator.findGamePosition = function () {\n-\tvar pos, dinoPos, skipXFast = 15;\n-\n-\tfor(var x = 20; x < screenSize.width; x+= skipXFast){\n-\n-\t\tdinoPos = scanner.scanUntil(\n-\t\t\t// Start position\n-\t\t\t[x, 80],\n-\t\t\t// Skip pixels\n-\t\t\t[0, skipXFast],\n-\t\t\t// Searching Color\n-\t\t\tCOLOR_DINOSAUR,\n-\t\t\t// Normal mode (not inverse)\n-\t\t\tfalse,\n-\t\t\t// Iteration limit\n-\t\t\t500 / skipXFast);\n-\n-\t\tif(dinoPos)\n-\t\t\tbreak;\n-\t}\n-\n-\tif(!dinoPos)\n-\t\treturn null;\n-\n-\tfor(var x = dinoPos[0] - 50; x <= dinoPos[0]; x += 1){\n-\n-\t\tpos = scanner.scanUntil(\n-\t\t\t// Start position\n-\t\t\t[x, dinoPos[1] - 2],\n-\t\t\t// Skip pixels\n-\t\t\t[0, 1],\n-\t\t\t// Searching Color\n-\t\t\tCOLOR_DINOSAUR,\n-\t\t\t// Normal mode (not inverse)\n-\t\t\tfalse,\n-\t\t\t// Iteration limit\n-\t\t\t100);\n-\n-\t\tif(pos)\n-\t\t\tbreak;\n-\t}\n-\n-\t// Did actually found? If not, error!\n-\tif(!pos)\n-\t\treturn null;\n-\n-\n-\t// Find the end of the game\n-\tvar endPos = pos;\n-\n-\twhile(robot.getPixelColor(endPos[0] + 3, endPos[1]) == COLOR_DINOSAUR){\n-\t\t endPos = scanner.scanUntil(\n-\t\t\t\t// Start position\n-\t\t\t\t[endPos[0] + 2, endPos[1]],\n-\t\t\t\t// Skip pixels\n-\t\t\t\t[2, 0],\n-\t\t\t\t// Searching Color\n-\t\t\t\tCOLOR_DINOSAUR,\n-\t\t\t\t// Invert mode\n-\t\t\t\ttrue,\n-\t\t\t\t// Iteration limit\n-\t\t\t\t600);\n-\t}\n-\n-\t// Did actually found? If not, error!\n-\tif(!endPos)\n-\t\treturn null;\n-\n-\t// Save to allow global access\n-\tGameManipulator.offset = pos;\n-\tGameManipulator.width = 600;//endPos[0] - pos[0];\n-\n-\treturn pos;\n+  var pos, dinoPos, skipXFast = 15;\n+\n+  for (var x = 20; x < screenSize.width; x+= skipXFast) {\n+    dinoPos = Scanner.scanUntil(\n+      // Start position\n+      [x, 80],\n+      // Skip pixels\n+      [0, skipXFast],\n+      // Searching Color\n+      COLOR_DINOSAUR,\n+      // Normal mode (not inverse)\n+      false,\n+      // Iteration limit\n+      500 / skipXFast);\n+\n+    if (dinoPos) {\n+      break;\n+    }\n+  }\n+\n+  if (!dinoPos) {\n+    return null;\n+  }\n+\n+  for (var x = dinoPos[0] - 50; x <= dinoPos[0]; x += 1) {\n+    pos = Scanner.scanUntil(\n+      // Start position\n+      [x, dinoPos[1] - 2],\n+      // Skip pixels\n+      [0, 1],\n+      // Searching Color\n+      COLOR_DINOSAUR,\n+      // Normal mode (not inverse)\n+      false,\n+      // Iteration limit\n+      100);\n+\n+    if (pos) {\n+      break;\n+    }\n+  }\n+\n+  // Did actually found? If not, error!\n+  if (!pos) {\n+    return null;\n+  }\n+\n+  // Find the end of the game\n+  var endPos = pos;\n+\n+  while (robot.getPixelColor(endPos[0] + 3, endPos[1]) == COLOR_DINOSAUR) {\n+     endPos = Scanner.scanUntil(\n+        // Start position\n+        [endPos[0] + 2, endPos[1]],\n+        // Skip pixels\n+        [2, 0],\n+        // Searching Color\n+        COLOR_DINOSAUR,\n+        // Invert mode\n+        true,\n+        // Iteration limit\n+        600);\n+  }\n+\n+  // Did actually found? If not, error!\n+  if (!endPos) {\n+    return null;\n+  }\n+\n+  // Save to allow global access\n+  GameManipulator.offset = pos;\n+  GameManipulator.width = 600;//endPos[0] - pos[0];\n+\n+  return pos;\n };\n \n \n-//\n // Read Game state\n // (If game is ended or is playing)\n-//\n GameManipulator.readGameState = function () {\n-\t// Read GameOver\n-\tvar found = scanner.scanUntil(\n-\t\t[\n-\t\t\tGameManipulator.offset[0] + GameManipulator.gameOverOffset[0],\n-\t\t\tGameManipulator.offset[1] + GameManipulator.gameOverOffset[1]\n-\t\t],\n+  // Read GameOver\n+  var found = Scanner.scanUntil(\n+    [\n+      GameManipulator.offset[0] + GameManipulator.gameOverOffset[0],\n+      GameManipulator.offset[1] + GameManipulator.gameOverOffset[1]\n+    ],\n \n-\t\t[2, 0], COLOR_DINOSAUR, false, 20);\n+    [2, 0], COLOR_DINOSAUR, false, 20);\n \n-\tif(found && GameManipulator.gamestate != 'OVER'){\n-\t\tGameManipulator.gamestate = 'OVER';\n+  if (found && GameManipulator.gamestate != 'OVER') {\n+    GameManipulator.gamestate = 'OVER';\n \n-\t\t// Clear keys\n-\t\tGameManipulator.setGameOutput(0.5);\n+    // Clear keys\n+    GameManipulator.setGameOutput(0.5);\n \n-\t\t// Trigger callback and clear\n-\t\tGameManipulator.onGameEnd && GameManipulator.onGameEnd(GameManipulator.points);\n-\t\tGameManipulator.onGameEnd = null;\n+    // Trigger callback and clear\n+    GameManipulator.onGameEnd && GameManipulator.onGameEnd(GameManipulator.points);\n+    GameManipulator.onGameEnd = null;\n \n-\t\t// console.log('GAME OVER: '+GameManipulator.points);\n+    // console.log('GAME OVER: '+GameManipulator.points);\n \n-\t}else if(!found && GameManipulator.gamestate != 'PLAYING'){\n-\t\tGameManipulator.gamestate = 'PLAYING';\n+  } else if (!found && GameManipulator.gamestate != 'PLAYING') {\n+    GameManipulator.gamestate = 'PLAYING';\n \n-\t\t// Clear points\n-\t\tGameManipulator.points = 0;\n-\t\tGameManipulator.lastScore = 0;\n+    // Clear points\n+    GameManipulator.points = 0;\n+    GameManipulator.lastScore = 0;\n \n-\t\t// Clear keys\n-\t\tGameManipulator.setGameOutput(0.5);\n+    // Clear keys\n+    GameManipulator.setGameOutput(0.5);\n \n-\t\t// Clear sensors\n-\t\tGameManipulator.sensors[0].lastComputeSpeed = 0;\n-\t\tGameManipulator.sensors[0].lastSpeeds = [];\n-\t\tGameManipulator.sensors[0].lastValue = 1;\n-\t\tGameManipulator.sensors[0].value = 1;\n-\t\tGameManipulator.sensors[0].speed = 0;\n-\t\tGameManipulator.sensors[0].size = 0;\n+    // Clear sensors\n+    GameManipulator.sensors[0].lastComputeSpeed = 0;\n+    GameManipulator.sensors[0].lastSpeeds = [];\n+    GameManipulator.sensors[0].lastValue = 1;\n+    GameManipulator.sensors[0].value = 1;\n+    GameManipulator.sensors[0].speed = 0;\n+    GameManipulator.sensors[0].size = 0;\n \n-\t\t// Clar Output flags\n-\t\tGameManipulator.lastOutputSet = 'NONE';\n+    // Clar Output flags\n+    GameManipulator.lastOutputSet = 'NONE';\n \n-\t\t// Trigger callback and clear\n-\t\tGameManipulator.onGameStart && GameManipulator.onGameStart();\n-\t\tGameManipulator.onGameStart = null;\n+    // Trigger callback and clear\n+    GameManipulator.onGameStart && GameManipulator.onGameStart();\n+    GameManipulator.onGameStart = null;\n \n-\t\t// console.log('GAME RUNNING '+GameManipulator.points);\n-\t}\n+    // console.log('GAME RUNNING '+GameManipulator.points);\n+  }\n }\n \n \n-//\n // Call this to start a fresh new game\n // Will wait untill game has ended,\n // and call the `next` callback\n-//\n var _startKeyInterval;\n GameManipulator.startNewGame = function (next) {\n \n-\t// Refresh state\n-\tGameManipulator.readGameState();\n+  // Refresh state\n+  GameManipulator.readGameState();\n \n-\t// If game is already over, press space\n-\tif(GameManipulator.gamestate == 'OVER'){\n-\t\tclearInterval(_startKeyInterval);\n+  // If game is already over, press space\n+  if (GameManipulator.gamestate == 'OVER') {\n+    clearInterval(_startKeyInterval);\n \n-\t\t// Set start callback\n-\t\tGameManipulator.onGameStart = function (argument) {\n-\t\t\tclearInterval(_startKeyInterval);\n-\t\t\tnext && next();\n-\t\t};\n+    // Set start callback\n+    GameManipulator.onGameStart = function (argument) {\n+      clearInterval(_startKeyInterval);\n+      next && next();\n+    };\n \n-\t\t// Press space to begin game (repetidelly)\n-\t\t_startKeyInterval = setInterval(function (){\n-\t\t\trobot.keyTap(' ');\n-\t\t}, 300);\n+    // Press space to begin game (repetidelly)\n+    _startKeyInterval = setInterval(function (){\n+      robot.keyTap(' ');\n+    }, 300);\n \n-\t\t// Refresh state\n-\t\tGameManipulator.readGameState();\n+    // Refresh state\n+    GameManipulator.readGameState();\n \n-\t}else{\n-\t\t// Wait die, and call recursive action\n-\t\tGameManipulator.onGameEnd = function () {\n-\t\t\tGameManipulator.startNewGame(next);\n-\t\t}\n-\t}\n+  } else {\n+    // Wait die, and call recursive action\n+    GameManipulator.onGameEnd = function () {\n+      GameManipulator.startNewGame(next);\n+    }\n+  }\n \n \n }\n \n \n-//\n // Compute points based on sensors\n //\n // Basicaly, checks if an object has\n // passed trough the sensor and the\n // value is now higher than before\n-//\n GameManipulator.computePoints = function () {\n-\tfor(var k in GameManipulator.sensors){\n-\t\tvar sensor = GameManipulator.sensors[k];\n-\n-\t\tif(sensor.value > 0.5 && sensor.lastValue < 0.3){\n-\t\t\tGameManipulator.points++;\n-\t\t\t// console.log('POINTS: '+GameManipulator.points);\n-\t\t}\n-\t}\n+  for (var k in GameManipulator.sensors) {\n+    var sensor = GameManipulator.sensors[k];\n+\n+    if (sensor.value > 0.5 && sensor.lastValue < 0.3) {\n+      GameManipulator.points++;\n+      // console.log('POINTS: '+GameManipulator.points);\n+    }\n+  }\n }\n \n \n-//\n // Read sensors\n //\n // Sensors are like ray-traces:\n@@ -274,183 +252,181 @@ GameManipulator.computePoints = function () {\n // SIZE and it's speed\n //\n // Note: We currently only have a sensor.\n-//\n GameManipulator.readSensors = function () {\n-\tvar offset = GameManipulator.offset;\n-\n-\tvar startTime = Date.now();\n+  var offset = GameManipulator.offset;\n \n-\tfor(var k in GameManipulator.sensors){\n+  var startTime = Date.now();\n \n-\t\tvar sensor = GameManipulator.sensors[k];\n+  for (var k in GameManipulator.sensors) {\n \n-\t\t// Calculate absolute position of ray tracing\n-\t\tvar start = [\n-\t\t\toffset[0] + sensor.offset[0],\n-\t\t\toffset[1] + sensor.offset[1],\n-\t\t];\n+    var sensor = GameManipulator.sensors[k];\n \n-\t\t// Compute cursor forwarding\n-\t\tvar forward = sensor.value * GameManipulator.width * 0.8 * sensor.length;\n+    // Calculate absolute position of ray tracing\n+    var start = [\n+      offset[0] + sensor.offset[0],\n+      offset[1] + sensor.offset[1],\n+    ];\n \n-\t\tvar end = scanner.scanUntil(\n-\t\t\t// console.log(\n-\t\t\t\t// Start position\n-\t\t\t\t[start[0], start[1]],\n-\t\t\t\t// Skip pixels\n-\t\t\t\tsensor.step,\n-\t\t\t\t// Searching Color\n-\t\t\t\tCOLOR_DINOSAUR,\n-\t\t\t\t// Invert mode?\n-\t\t\t\tfalse,\n-\t\t\t\t// Iteration limit\n-\t\t\t\t(GameManipulator.width * sensor.length) / sensor.step[0]);\n+    // Compute cursor forwarding\n+    var forward = sensor.value * GameManipulator.width * 0.8 * sensor.length;\n \n-\t\t// Save lastValue\n-\t\tsensor.lastValue = sensor.value;\n+    var end = Scanner.scanUntil(\n+      // console.log(\n+        // Start position\n+        [start[0], start[1]],\n+        // Skip pixels\n+        sensor.step,\n+        // Searching Color\n+        COLOR_DINOSAUR,\n+        // Invert mode?\n+        false,\n+        // Iteration limit\n+        (GameManipulator.width * sensor.length) / sensor.step[0]);\n \n-\t\t// Calculate the Sensor value\n-\t\tif(end){\n-\t\t\tsensor.value = (end[0] - start[0]) / (GameManipulator.width * sensor.length);\n+    // Save lastValue\n+    sensor.lastValue = sensor.value;\n \n-\t\t\t//\n-\t\t\t// Calculate size of obstacle\n-\t\t\t//\n-\t\t\tvar endPoint = scanner.scanUntil(\n-\t\t\t\t[end[0] + 75, end[1]],\n-\t\t\t\t[-2, 0],\n-\t\t\t\tCOLOR_DINOSAUR,\n-\t\t\t\tfalse,\n-\t\t\t\t75 / 2\n-\t\t\t);\n+    // Calculate the Sensor value\n+    if (end) {\n+      sensor.value = (end[0] - start[0]) / (GameManipulator.width * sensor.length);\n \n-\t\t\t// If no end point, set the start point as end\n-\t\t\tif(!endPoint)\n-\t\t\t\tendPoint = end;\n+      // Calculate size of obstacle\n+      var endPoint = Scanner.scanUntil(\n+        [end[0] + 75, end[1]],\n+        [-2, 0],\n+        COLOR_DINOSAUR,\n+        false,\n+        75 / 2\n+      );\n \n-\t\t\tvar sizeTmp = (endPoint[0] - end[0]) / 100.0;\n-\t\t\tif(GameManipulator.points == sensor.lastScore){\n-\t\t\t\t// It's the same obstacle. Set size to \"max\" of both\n-\t\t\t\tsensor.size = Math.max(sensor.size, sizeTmp);\n-\t\t\t}else{\n-\t\t\t\tsensor.size = sizeTmp;\n-\t\t\t}\n+      // If no end point, set the start point as end\n+      if (!endPoint) {\n+        endPoint = end;\n+      }\n \n+      var sizeTmp = (endPoint[0] - end[0]) / 100.0;\n+      if (GameManipulator.points == sensor.lastScore) {\n+        // It's the same obstacle. Set size to \"max\" of both\n+        sensor.size = Math.max(sensor.size, sizeTmp);\n+      } else {\n+        sensor.size = sizeTmp;\n+      }\n \n-\t\t\t// We use the current score to check for object equality\n-\t\t\tsensor.lastScore = GameManipulator.points;\n \n-\t\t\t// sensor.size = Math.max(sensor.size, endPoint[0] - end[0]);\n+      // We use the current score to check for object equality\n+      sensor.lastScore = GameManipulator.points;\n \n-\t\t}else{\n-\t\t\tsensor.value = 1;\n-\t\t\tsensor.size = 0;\n-\t\t}\n+      // sensor.size = Math.max(sensor.size, endPoint[0] - end[0]);\n \n-\t\t// Compute speed\n-\t\tvar dt = (Date.now() - sensor.lastComputeSpeed) / 1000;\n-\t\tsensor.lastComputeSpeed = Date.now();\n+    } else {\n+      sensor.value = 1;\n+      sensor.size = 0;\n+    }\n \n-\t\tif(sensor.value < sensor.lastValue){\n-\t\t\t// Compute speed\n-\t\t\tvar newSpeed = (sensor.lastValue - sensor.value) / dt;\n+    // Compute speed\n+    var dt = (Date.now() - sensor.lastComputeSpeed) / 1000;\n+    sensor.lastComputeSpeed = Date.now();\n \n-\t\t\tsensor.lastSpeeds.unshift(newSpeed);\n+    if (sensor.value < sensor.lastValue) {\n+      // Compute speed\n+      var newSpeed = (sensor.lastValue - sensor.value) / dt;\n \n-\t\t\twhile(sensor.lastSpeeds.length > 10)\n-\t\t\t\tsensor.lastSpeeds.pop();\n+      sensor.lastSpeeds.unshift(newSpeed);\n \n-\t\t\t// Take Average\n-\t\t\tvar avgSpeed = 0;\n-\t\t\tfor(var k in sensor.lastSpeeds)\n-\t\t\t\tavgSpeed += sensor.lastSpeeds[k] / sensor.lastSpeeds.length;\n+      while (sensor.lastSpeeds.length > 10) {\n+        sensor.lastSpeeds.pop();\n+      }\n \n-\t\t\tsensor.speed = Math.max(avgSpeed - 1.5, sensor.speed);\n+      // Take Average\n+      var avgSpeed = 0;\n+      for (var k in sensor.lastSpeeds) {\n+        avgSpeed += sensor.lastSpeeds[k] / sensor.lastSpeeds.length;\n+      }\n \n-\t\t}\n+      sensor.speed = Math.max(avgSpeed - 1.5, sensor.speed);\n \n-\t\tsensor.size = Math.min(sensor.size, 1.0);\n+    }\n \n-\t\t// if(GameManipulator.gamestate == 'PLAYING')\n-\t\t\t// console.log(\"S[\"+k+\"]: \", sensor.value, sensor.size, Date.now() - startTime);\n+    // Save length/size of sensor value\n+    sensor.size = Math.min(sensor.size, 1.0);\n \n-\t\tstartTime = Date.now();\n-\t}\n+    startTime = Date.now();\n+  }\n \n-\t// Compute points\n-\tGameManipulator.computePoints();\n+  // Compute points\n+  GameManipulator.computePoints();\n \n-\t// Call sensor callback (to act)\n-\tGameManipulator.onSensorData && GameManipulator.onSensorData();\n+  // Call sensor callback (to act)\n+  GameManipulator.onSensorData && GameManipulator.onSensorData();\n }\n \n \n-//\n // Set action to game\n // Values:\n-//  0.0 to  0.4: DOWN\n-//  0.4 to  0.6: NOTHING\n-//  0.6 to  1.0: UP (JUMP)\n-//\n+//  0.00 to  0.45: DOWN\n+//  0.45 to  0.55: NOTHING\n+//  0.55 to  1.00: UP (JUMP)\n var PRESS = 'down';\n var RELEASE = 'up';\n+\n GameManipulator.lastOutputSet = 'NONE';\n GameManipulator.lastOutputSetTime = 0;\n+\n GameManipulator.setGameOutput = function (output){\n \n-\tGameManipulator.gameOutput = output;\n-\tGameManipulator.gameOutputString = GameManipulator.getDiscreteState(output);\n-\n-\tif(GameManipulator.gameOutputString == 'DOWN'){\n-\t\t// Skew\n-\t\trobot.keyToggle('up', RELEASE);\n-\t\trobot.keyToggle('down', PRESS);\n-\t}else if(GameManipulator.gameOutputString == 'NORM'){\n-\t\t// DO Nothing\n-\t\trobot.keyToggle('up', RELEASE);\n-\t\trobot.keyToggle('down', RELEASE);\n-\t}else{\n-\n-\t\t// Filter JUMP\n-\t\tif(GameManipulator.lastOutputSet != 'JUMP')\n-\t\t\tGameManipulator.lastOutputSetTime = Date.now();\n-\n-\t\t// JUMP\n-\t\t// Check if hasn't jump for more than 3 continuous secconds\n-\t\tif(Date.now() - GameManipulator.lastOutputSetTime < 3000){\n-\t\t\trobot.keyToggle('up', PRESS);\n-\t\t\trobot.keyToggle('down', RELEASE);\n-\t\t}else{\n-\t\t\trobot.keyToggle('up', RELEASE);\n-\t\t\trobot.keyToggle('down', RELEASE);\n-\t\t}\n-\n-\t}\n-\n-\tGameManipulator.lastOutputSet = GameManipulator.gameOutputString;\n+  GameManipulator.gameOutput = output;\n+  GameManipulator.gameOutputString = GameManipulator.getDiscreteState(output);\n+\n+  if (GameManipulator.gameOutputString == 'DOWN') {\n+    // Skew\n+    robot.keyToggle('up', RELEASE);\n+    robot.keyToggle('down', PRESS);\n+  } else if (GameManipulator.gameOutputString == 'NORM') {\n+    // DO Nothing\n+    robot.keyToggle('up', RELEASE);\n+    robot.keyToggle('down', RELEASE);\n+  } else {\n+\n+    // Filter JUMP\n+    if (GameManipulator.lastOutputSet != 'JUMP') {\n+      GameManipulator.lastOutputSetTime = Date.now();\n+    }\n+\n+    // JUMP\n+    // Check if hasn't jump for more than 3 continuous secconds\n+    if (Date.now() - GameManipulator.lastOutputSetTime < 3000) {\n+      robot.keyToggle('up', PRESS);\n+      robot.keyToggle('down', RELEASE);\n+    } else {\n+      robot.keyToggle('up', RELEASE);\n+      robot.keyToggle('down', RELEASE);\n+    }\n+\n+  }\n+\n+  GameManipulator.lastOutputSet = GameManipulator.gameOutputString;\n }\n \n+\n //\n // Simply maps an real number to string actions\n //\n GameManipulator.getDiscreteState = function (value){\n-\tif(value < 0.45){\n-\t\treturn 'DOWN'\n-\t}else if(value > 0.55){\n-\t\treturn 'JUMP';\n-\t}\n+  if (value < 0.45) {\n+    return 'DOWN'\n+  } else if(value > 0.55) {\n+    return 'JUMP';\n+  }\n \n-\treturn 'NORM';\n+  return 'NORM';\n }\n \n \n-//\n // Click on the Starting point\n // to make sure game is focused\n-//\n GameManipulator.focusGame = function (){\n-\trobot.moveMouse(GameManipulator.offset[0], GameManipulator.offset[1]);\n-\trobot.mouseClick(\"left\");\n+  robot.moveMouse(GameManipulator.offset[0], GameManipulator.offset[1]);\n+  robot.mouseClick('left');\n }\n \n module.exports = GameManipulator;\n\\ No newline at end of file"
        },
        {
          "sha": "fffb14f0ebe7e7f1a151705a63b6bd6d3873e1df",
          "filename": "Learner.js",
          "status": "modified",
          "additions": 187,
          "deletions": 213,
          "changes": 400,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/b062da9296f831ba8752412d3764c40f52897aa5/Learner.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/b062da9296f831ba8752412d3764c40f52897aa5/Learner.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/Learner.js?ref=b062da9296f831ba8752412d3764c40f52897aa5",
          "patch": "@@ -1,72 +1,57 @@\n-/*\n-\tDeveloped by Ivan Seidel [https://github.com/ivanseidel]\n-*/\n-\n-var _ = require('lodash');\n-var async = require('async');\n var synaptic = require('synaptic');\n+var async = require('async');\n+var _ = require('lodash');\n \n-var Network = synaptic.Network;\n var Architect = synaptic.Architect;\n+var Network = synaptic.Network;\n+\n \n var Learn = {\n-\t// \n-\t// Current Genomes\n-\t// In form of: {\n-\t// \t\tfitness: null,\n-\t// \t\tgenome: [...],\n-\t// \t\tnetwork: {NeuralNetworkObject}\n-\t// }\n-\t// \n-\tgenomes: [],\n-\n-\tstate: 'STOP',\n-\n-\t// \n-\t// Current genome tryout\n-\t// \n-\tgenome: 0,\n-\tgeneration: 0,\n-\n-\t// \n-\t// Set this, to verify genome action BEFORE running it\n-\t// \n-\tshouldCheckExperience: false,\n \n-};\n+  // Array of networks for current Genomes\n+  // (Genomes will be added the key `fitness`)\n+  genomes: [],\n \n+  // Current state of learning [STOP, LEARNING]\n+  state: 'STOP',\n+\n+  // Current genome/generation tryout\n+  genome: 0,\n+  generation: 0,\n+\n+  // Set this, to verify genome experience BEFORE running it\n+  shouldCheckExperience: false,\n+\n+};\n \n \n-// \n // Initialize the Learner\n-// \n-Learn.init = function (gameManipulator, ui, genomeUnits, selection, mutationProb) {\n-\tLearn.gm = gameManipulator;\n-\tLearn.ui = ui;\n+Learn.init = function (gameManip, ui, genomeUnits, selection, mutationProb) {\n+  Learn.gm = gameManip;\n+  Learn.ui = ui;\n \n-\tLearn.genome = 0;\n-\tLearn.generation = 0;\n+  Learn.genome = 0;\n+  Learn.generation = 0;\n \n-\tLearn.genomeUnits = genomeUnits;\n-\tLearn.selection = selection;\n-\tLearn.mutationProb = mutationProb;\n+  Learn.genomeUnits = genomeUnits;\n+  Learn.selection = selection;\n+  Learn.mutationProb = mutationProb;\n }\n \n-// \n+\n // Build genomes before calling executeGeneration.\n-// \n Learn.startLearning = function () {\n \n-\t// Build genomes if needed\n-\twhile(Learn.genomes.length < Learn.genomeUnits){\n-\t\tLearn.genomes.push(Learn.buildGenome(3, 1));\n-\t}\n+  // Build genomes if needed\n+  while (Learn.genomes.length < Learn.genomeUnits) {\n+    Learn.genomes.push(Learn.buildGenome(3, 1));\n+  }\n \n-\tLearn.executeGeneration();\n-\t\n+  Learn.executeGeneration();\n+  \n }\n \n-// \n+\n // Given the entire generation of genomes (An array),\n // applyes method `executeGenome` for each element.\n // After all elements have completed executing:\n@@ -75,257 +60,246 @@ Learn.startLearning = function () {\n // 2) Does cross over (except for 2 genomes)\n // 3) Does Mutation-only on remaining genomes\n // 4) Execute generation (recursivelly)\n-// \n Learn.executeGeneration = function (){\n-\tif(Learn.state == 'STOP')\n-\t\treturn;\n+  if (Learn.state == 'STOP') {\n+    return;\n+  }\n \n-\tLearn.generation++;\n-\tLearn.ui.logger.log('Executing generation '+Learn.generation);\n+  Learn.generation++;\n+  Learn.ui.logger.log('Executing generation '+Learn.generation);\n \n-\tLearn.genome = 0;\n+  Learn.genome = 0;\n \n-\tasync.mapSeries(Learn.genomes, Learn.executeGenome, function (argument) {\n+  async.mapSeries(Learn.genomes, Learn.executeGenome, function (argument) {\n \n-\t\t// Kill worst genomes\n-\t\tLearn.genomes = Learn.selectBestGenomes(Learn.selection);\n+    // Kill worst genomes\n+    Learn.genomes = Learn.selectBestGenomes(Learn.selection);\n \n-\t\t// Copy best genomes\n-\t\tvar bestGenomes = _.clone(Learn.genomes);\n+    // Copy best genomes\n+    var bestGenomes = _.clone(Learn.genomes);\n \n-\t\t// Cross Over ()\n-\t\twhile(Learn.genomes.length < Learn.genomeUnits - 2){\n-\t\t\t// Get two random Genomes\n-\t\t\tvar genA = _.sample(bestGenomes).toJSON();\n-\t\t\tvar genB = _.sample(bestGenomes).toJSON();\n+    // Cross Over ()\n+    while (Learn.genomes.length < Learn.genomeUnits - 2) {\n+      // Get two random Genomes\n+      var genA = _.sample(bestGenomes).toJSON();\n+      var genB = _.sample(bestGenomes).toJSON();\n \n-\t\t\t// Cross over and Mutate\n-\t\t\tvar newGenome = Learn.mutate(Learn.crossOver(genA, genB));\n+      // Cross over and Mutate\n+      var newGenome = Learn.mutate(Learn.crossOver(genA, genB));\n \n-\t\t\t// Add to generation\n-\t\t\tLearn.genomes.push(Network.fromJSON(newGenome));\n-\t\t}\n+      // Add to generation\n+      Learn.genomes.push(Network.fromJSON(newGenome));\n+    }\n \n-\t\t// Mutation-only\n-\t\twhile(Learn.genomes.length < Learn.genomeUnits){\n-\t\t\t// Get two random Genomes\n-\t\t\tvar gen = _.sample(bestGenomes).toJSON();\n+    // Mutation-only\n+    while (Learn.genomes.length < Learn.genomeUnits) {\n+      // Get two random Genomes\n+      var gen = _.sample(bestGenomes).toJSON();\n \n-\t\t\t// Cross over and Mutate\n-\t\t\tvar newGenome = Learn.mutate(gen);\n+      // Cross over and Mutate\n+      var newGenome = Learn.mutate(gen);\n \n-\t\t\t// Add to generation\n-\t\t\tLearn.genomes.push(Network.fromJSON(newGenome));\n-\t\t}\n+      // Add to generation\n+      Learn.genomes.push(Network.fromJSON(newGenome));\n+    }\n \n-\t\tLearn.ui.logger.log('Completed generation '+Learn.generation);\n+    Learn.ui.logger.log('Completed generation '+Learn.generation);\n \n-\t\t// Execute next generation\n-\t\tLearn.executeGeneration();\n-\t})\n+    // Execute next generation\n+    Learn.executeGeneration();\n+  })\n }\n \n \n-// \n // Sort all the genomes, and delete the worst one\n // untill the genome list has selectN elements.\n-// \n Learn.selectBestGenomes = function (selectN){\n-\tvar selected = _.sortBy(Learn.genomes, 'fitness').reverse();\n+  var selected = _.sortBy(Learn.genomes, 'fitness').reverse();\n \n-\twhile(selected.length > selectN){\n-\t\tselected.pop();\n-\t}\n+  while (selected.length > selectN) {\n+    selected.pop();\n+  }\n \n-\tLearn.ui.logger.log('Fitness: '+_.pluck(selected, 'fitness').join(','));\n+  Learn.ui.logger.log('Fitness: '+_.pluck(selected, 'fitness').join(','));\n \n-\treturn selected;\n+  return selected;\n }\n \n \n-// \n // Waits the game to end, and start a new one, then:\n // 1) Set's listener for sensorData\n // 2) On data read, applyes the neural network, and\n //    set it's output\n // 3) When the game has ended and compute the fitness\n-// \n Learn.executeGenome = function (genome, next){\n-\tif(Learn.state == 'STOP')\n-\t\treturn;\n-\n-\tLearn.genome = Learn.genomes.indexOf(genome) + 1;\n-\t// Learn.ui.logger.log('Executing genome '+Learn.genome);\n-\n-\t// Check if genome has AT LEAST some experience\n-\tif(Learn.shouldCheckExperience){\n-\t\tif(!Learn.checkExperience(genome)){\n-\t\t\tgenome.fitness = 0;\n-\t\t\t// Learn.ui.logger.log('Genome '+Learn.genome+' has no minimum experience');\n-\t\t\treturn next();\n-\t\t}\n-\t}\n-\n-\tLearn.gm.startNewGame(function (){\n-\n-\t\t// Reads sensor data, and apply network\n-\t\tLearn.gm.onSensorData = function (){\n-\t\t\tvar inputs = [\n-\t\t\t\tLearn.gm.sensors[0].value,\n-\t\t\t\tLearn.gm.sensors[0].size,\n-\t\t\t\tLearn.gm.sensors[0].speed,\n-\t\t\t];\n-\t\t\t// console.log(inputs);\n-\t\t\t// Apply to network\n-\t\t\tvar outputs = genome.activate(inputs);\n-\n-\t\t\tLearn.gm.setGameOutput(outputs[0]);\n-\t\t}\n-\n-\t\t// Wait game end, and compute fitness\n-\t\tLearn.gm.onGameEnd = function (points){\n-\t\t\tLearn.ui.logger.log('Genome '+Learn.genome+' ended. Fitness: '+points);\n-\n-\t\t\t// Save Genome fitness\n-\t\t\tgenome.fitness = points;\n-\n-\t\t\t// Go to next genome\n-\t\t\tnext();\n-\t\t}\n-\t});\n+  if (Learn.state == 'STOP') {\n+    return;\n+  }\n+\n+  Learn.genome = Learn.genomes.indexOf(genome) + 1;\n+  // Learn.ui.logger.log('Executing genome '+Learn.genome);\n+\n+  // Check if genome has AT LEAST some experience\n+  if (Learn.shouldCheckExperience) {\n+    if (!Learn.checkExperience(genome)) {\n+      genome.fitness = 0;\n+      // Learn.ui.logger.log('Genome '+Learn.genome+' has no min. experience');\n+      return next();\n+    }\n+  }\n+\n+  Learn.gm.startNewGame(function (){\n+\n+    // Reads sensor data, and apply network\n+    Learn.gm.onSensorData = function (){\n+      var inputs = [\n+        Learn.gm.sensors[0].value,\n+        Learn.gm.sensors[0].size,\n+        Learn.gm.sensors[0].speed,\n+      ];\n+      // console.log(inputs);\n+      // Apply to network\n+      var outputs = genome.activate(inputs);\n+\n+      Learn.gm.setGameOutput(outputs[0]);\n+    }\n+\n+    // Wait game end, and compute fitness\n+    Learn.gm.onGameEnd = function (points){\n+      Learn.ui.logger.log('Genome '+Learn.genome+' ended. Fitness: '+points);\n+\n+      // Save Genome fitness\n+      genome.fitness = points;\n+\n+      // Go to next genome\n+      next();\n+    }\n+  });\n \n }\n \n-// \n+\n // Validate if any acction occur uppon a given input (in this case, distance).\n // If genome only keeps a single activation value for any given input,\n // it will return false\n-// \n Learn.checkExperience = function (genome) {\n-\t\n-\tvar step = 0.1, start = 0.0, stop = 1;\n+  \n+  var step = 0.1, start = 0.0, stop = 1;\n \n-\t// Inputs are default. We only want to test the first index\n-\tvar inputs = [0.0, 0.3, 0.2];\n-\tvar activation, state, outputs = {};\n+  // Inputs are default. We only want to test the first index\n+  var inputs = [0.0, 0.3, 0.2];\n+  var activation, state, outputs = {};\n \n-\tfor(var k = start; k < stop; k += step){\n-\t\tinputs[0] = k;\n+  for (var k = start; k < stop; k += step) {\n+    inputs[0] = k;\n \n-\t\tactivation = genome.activate(inputs);\n-\t\tstate = Learn.gm.getDiscreteState(activation);\n-\t\t\n-\t\toutputs[state] = true;\n-\t}\n+    activation = genome.activate(inputs);\n+    state = Learn.gm.getDiscreteState(activation);\n+    \n+    outputs[state] = true;\n+  }\n \n-\t// Count states, and return true if greater than 1\n-\treturn _.keys(outputs).length > 1;\n+  // Count states, and return true if greater than 1\n+  return _.keys(outputs).length > 1;\n }\n \n \n-// \n // Load genomes saved from JSON file\n-// \n Learn.loadGenomes = function (genomes, deleteOthers){\n-\tif(deleteOthers)\n-\t\tLearn.genomes = [];\n+  if (deleteOthers) {\n+    Learn.genomes = [];\n+  }\n \n-\tvar loaded = 0;\n-\tfor(var k in genomes){\n-\t\tLearn.genomes.push(Network.fromJSON(genomes[k]));\n-\t\tloaded++;\n-\t}\n+  var loaded = 0;\n+  for (var k in genomes) {\n+    Learn.genomes.push(Network.fromJSON(genomes[k]));\n+    loaded++;\n+  }\n \n-\tLearn.ui.logger.log('Loaded '+loaded+' genomes!');\n+  Learn.ui.logger.log('Loaded '+loaded+' genomes!');\n }\n \n \n-// \n // Builds a new genome based on the \n // expected number of inputs and outputs\n-// \n Learn.buildGenome = function (inputs, outputs) {\n-\tLearn.ui.logger.log('Build genome '+(Learn.genomes.length+1));\n-\tvar network = new Architect.Perceptron(inputs, 4, 4, outputs);\n-\treturn network;\n-\t// console.log(JSON.stringify(network.toJSON()));\n-\t// process.exit();\n+  Learn.ui.logger.log('Build genome '+(Learn.genomes.length+1));\n+\n+  var network = new Architect.Perceptron(inputs, 4, 4, outputs);\n+\n+  return network;\n }\n \n \n-// \n // SPECIFIC to Neural Network.\n // Those two methods convert from JSON to Array, and from Array to JSON\n-// \n Learn.crossOver = function (netA, netB) {\n-\t// Swap (50% prob.)\n-\tif(Math.random() > 0.5){\n-\t\tvar tmp = netA;\n-\t\tnetA = netB;\n-\t\tnetB = tmp;\n-\t}\n-\n-\t// Clone network\n-\tnetA = _.cloneDeep(netA);\n-\tnetB = _.cloneDeep(netB);\n-\n-\t// Cross over data keys\n-\tLearn.crossOverDataKey(netA.neurons, netB.neurons, 'bias');\n-\t// Learn.crossOverDataKey(netA.connections, netB.connections, 'weight');\n-\n-\treturn netA;\n+  // Swap (50% prob.)\n+  if (Math.random() > 0.5) {\n+    var tmp = netA;\n+    netA = netB;\n+    netB = tmp;\n+  }\n+\n+  // Clone network\n+  netA = _.cloneDeep(netA);\n+  netB = _.cloneDeep(netB);\n+\n+  // Cross over data keys\n+  Learn.crossOverDataKey(netA.neurons, netB.neurons, 'bias');\n+\n+  return netA;\n }\n \n-// \n+\n // Does random mutations across all\n // the biases and weights of the Networks\n // (This must be done in the JSON to\n // prevent modifying the current one)\n-// \n Learn.mutate = function (net){\n-\t// Mutate\n-\tLearn.mutateDataKeys(net.neurons, 'bias', Learn.mutationProb);\n-\t\n-\tLearn.mutateDataKeys(net.connections, 'weight', Learn.mutationProb);\n+  // Mutate\n+  Learn.mutateDataKeys(net.neurons, 'bias', Learn.mutationProb);\n+  \n+  Learn.mutateDataKeys(net.connections, 'weight', Learn.mutationProb);\n \n-\treturn net;\n+  return net;\n }\n \n-// \n+\n // Given an Object A and an object B, both Arrays\n // of Objects:\n // \n // 1) Select a cross over point (cutLocation)\n //    randomly (going from 0 to A.length)\n // 2) Swap values from `key` one to another,\n //    starting by cutLocation\n-// \n Learn.crossOverDataKey = function (a, b, key) {\n-\tvar cutLocation = Math.round(a.length * Math.random());\n-\n-\tvar tmp;\n-\tfor(var k = cutLocation; k < a.length; k++){\n-\t\t// Swap\n-\t\ttmp = a[k][key];\n-\t\ta[k][key] = b[k][key];\n-\t\tb[k][key] = tmp;\n-\t}\n+  var cutLocation = Math.round(a.length * Math.random());\n+\n+  var tmp;\n+  for (var k = cutLocation; k < a.length; k++) {\n+    // Swap\n+    tmp = a[k][key];\n+    a[k][key] = b[k][key];\n+    b[k][key] = tmp;\n+  }\n }\n \n-// \n+\n // Given an Array of objects with key `key`,\n // and also a `mutationRate`, randomly Mutate\n // the value of each key, if random value is\n // lower than mutationRate for each element.\n-// \n Learn.mutateDataKeys = function (a, key, mutationRate){\n-\tfor(var k = 0; k < a.length; k++){\n-\t\t// Should mutate?\n-\t\tif(Math.random() > mutationRate)\n-\t\t\tcontinue;\n-\n-\t\ta[k][key] += a[k][key] * (Math.random() - 0.5) * 3 + (Math.random() - 0.5);\n-\t}\n+  for (var k = 0; k < a.length; k++) {\n+    // Should mutate?\n+    if (Math.random() > mutationRate) {\n+      continue;\n+    }\n+\n+    a[k][key] += a[k][key] * (Math.random() - 0.5) * 3 + (Math.random() - 0.5);\n+  }\n }\n \n+\n module.exports = Learn;\n\\ No newline at end of file"
        },
        {
          "sha": "4610695c9cd05618cc00cf0650de486c2acea2a7",
          "filename": "README.md",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "changes": 7,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/b062da9296f831ba8752412d3764c40f52897aa5/README.md",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/b062da9296f831ba8752412d3764c40f52897aa5/README.md",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/README.md?ref=b062da9296f831ba8752412d3764c40f52897aa5",
          "patch": "@@ -66,7 +66,7 @@ There are a few files in the project:\n \n - `index.js`: It tight all things together.\n \n-- `scanner.js`: Basic abstraction layer above RobotJs library that reads the screen like\n+- `Scanner.js`: Basic abstraction layer above RobotJs library that reads the screen like\n   ray tracing. Also have some utilities functions.\n \n - `UI.js`: Global scope for the UI management. It initializes and also updates the screen\n@@ -103,6 +103,11 @@ console in the element inspector:\n setInterval(function (){Runner.instance_.tRex.xPos = 21}, 2000)\n ```\n \n+## Development guidelines\n+\n+Please, follow the Node.js style guide from [Felix](https://github.com/felixge/node-style-guide).\n+It is not complex, and has a great simple pattern for things.\n+\n ## Credits\n \n - [Ivan Seidel](https://github.com/ivanseidel)"
        },
        {
          "sha": "ce2569ba0f7f511ad0b932cd0694578671dd4966",
          "filename": "UI.js",
          "status": "modified",
          "additions": 183,
          "deletions": 195,
          "changes": 378,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/b062da9296f831ba8752412d3764c40f52897aa5/UI.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/b062da9296f831ba8752412d3764c40f52897aa5/UI.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/UI.js?ref=b062da9296f831ba8752412d3764c40f52897aa5",
          "patch": "@@ -1,219 +1,207 @@\n-/*\n-\tDeveloped by Ivan Seidel [https://github.com/ivanseidel]\n-*/\n-\n-var fs = require('fs');\n-var blessed = require('blessed')\n var contrib = require('blessed-contrib')\n+var blessed = require('blessed')\n+var fs = require('fs');\n+\n var screen = blessed.screen()\n \n var UI = {};\n \n \n-//\n // Initialize UI objects\n-//\n UI.init = function (gameManipulator, learner) {\n-\tUI.gm = gameManipulator;\n-\tUI.learner = learner;\n-\n-\tUI.grid = new contrib.grid({\n-\t\trows: 12,\n-\t\tcols: 6,\n-\t\tscreen: screen\n-\t});\n-\n-\t//\n-\t// Build Sensor inputs\n-\t//\n-\tUI.uiSensors = UI.grid.set(0, 0, 3, 6, contrib.bar, {\n-\t\tlabel: 'Network Inputs',\n-\t\t// bg: 'white',\n-\t\tbarWidth: 12,\n-\t\tbarSpacing: 1,\n-\t\txOffset: 0,\n-\t\tmaxHeight: 100,\n-\t});\n-\n-\t//\n-\t// Build Log box\n-\t//\n-\tUI.logger = UI.grid.set(3, 0, 3, 6, contrib.log, {\n-\t\tfg: 'green',\n-\t\tselectedFg: 'green',\n-\t\tlabel: 'Logs'\n-\t});\n-\n-\t//\n-\t// Current score/time view\n-\t//\n-\tUI.uiScore = UI.grid.set(6, 0, 3, 3, blessed.Text, {\n-\t\tlabel: 'Game Stats',\n-\t\t// bg: 'green',\n-\t\tfg: 'white',\n-\t\tcontent: 'Loading...',\n-\t\talign: 'center',\n-\t});\n-\n-\t//\n-\t// Current Genomes stats\n-\t//\n-\tUI.uiGenomes = UI.grid.set(6, 3, 3, 3, blessed.Text, {\n-\t\tlabel: 'Genome Stats',\n-\t\t// bg: 'green',\n-\t\tfg: 'white',\n-\t\tcontent: 'Hey!',\n-\t\talign: 'center',\n-\t});\n-\n-\n-\t//\n-\t// Load Tree\n-\t//\n-\tUI.savesTree = UI.grid.set(9, 0, 3, 3, contrib.tree, {\n-\t\tlabel: 'Saved Genomes',\n-\t});\n-\n-\tUI.savesTree.on('click', UI.savesTree.focus.bind(UI.savesTree));\n-\tUI.savesTree.on('select', function (item){\n-\n-\t\tif(item.isFile){\n-\t\t\tvar fileName = item.name;\n-\n-\t\t\tUI.logger.log('Loading genomes from file:');\n-\t\t\tUI.logger.log(fileName);\n-\n-\t\t\tvar genomes = require('./genomes/'+fileName);\n-\n-\t\t\tUI.learner.loadGenomes(genomes);\n-\t\t}else{\n-\t\t\tUI.refreshFiles();\n-\t\t}\n-\t});\n-\n-\tUI.refreshFiles();\n-\n-\t//\n-\t// Save Btn\n-\t//\n-\tUI.btnSave = UI.grid.set(9, 3, 3, 3, blessed.box, {\n-\t\tlabel: 'Save to File',\n-\t\tbg: 'green',\n-\t\tfg: 'red',\n-\t\tcontent: '\\n\\n\\n\\nSave Genomes',\n-\t\talign: 'center',\n-\t});\n-\n-\tUI.btnSave.on('click', function (){\n-\n-\t\tvar jsonGenomes = [];\n-\t\tfor(var k in UI.learner.genomes){\n-\t\t\tjsonGenomes.push(UI.learner.genomes[k].toJSON());\n-\t\t}\n-\n-\t\tUI.logger.log('Saving '+jsonGenomes.length+' genomes...');\n-\n-\t\tvar fileName = './genomes/gen_'+UI.learner.generation+'_'+Date.now()+'.json';\n-\t\tfs.writeFile(fileName, JSON.stringify(jsonGenomes), function (err){\n-\t\t\tif(err)\n-\t\t\t\tUI.logger.log('Failed to save! '+err);\n-\t\t\telse\n-\t\t\t\tUI.logger.log('Saved to '+fileName);\n-\n-\t\t\tUI.refreshFiles();\n-\t\t});\n-\n-\t});\n-\n-\tscreen.key(['escape', 'q', 'C-c'], function(ch, key) {\n-\t return process.exit(0);\n-\t});\n-\n-\tscreen.key(['s'], function (ch, key){\n-\t\tif(learner.state == 'STOP'){\n-\t\t\tlearner.state = 'LEARNING';\n-\t\t\tgameManipulator.focusGame();\n-\t\t\tlearner.startLearning();\n-\t\t}else{\n-\t\t\tlearner.state = 'STOP';\n-\t\t}\n-\t});\n-\n-\n-\tscreen.render()\n+  UI.gm = gameManipulator;\n+  UI.learner = learner;\n+\n+  UI.grid = new contrib.grid({\n+    rows: 12,\n+    cols: 6,\n+    screen: screen\n+  });\n \n+\n+  // Build Sensor inputs\n+  UI.uiSensors = UI.grid.set(0, 0, 3, 6, contrib.bar, {\n+    label: 'Network Inputs',\n+    // bg: 'white',\n+    barWidth: 12,\n+    barSpacing: 1,\n+    xOffset: 0,\n+    maxHeight: 100,\n+  });\n+\n+\n+  // Build Log box\n+  UI.logger = UI.grid.set(3, 0, 3, 6, contrib.log, {\n+    fg: 'green',\n+    selectedFg: 'green',\n+    label: 'Logs'\n+  });\n+\n+\n+  // Current score/time view\n+  UI.uiScore = UI.grid.set(6, 0, 3, 3, blessed.Text, {\n+    label: 'Game Stats',\n+    // bg: 'green',\n+    fg: 'white',\n+    content: 'Loading...',\n+    align: 'center',\n+  });\n+\n+\n+  // Current Genomes stats\n+  UI.uiGenomes = UI.grid.set(6, 3, 3, 3, blessed.Text, {\n+    label: 'Genome Stats',\n+    // bg: 'green',\n+    fg: 'white',\n+    content: 'Hey!',\n+    align: 'center',\n+  });\n+\n+\n+  // Load Tree\n+  UI.savesTree = UI.grid.set(9, 0, 3, 3, contrib.tree, {\n+    label: 'Saved Genomes',\n+  });\n+\n+\n+  // Callback for Loading genomes and focusing tree\n+  UI.savesTree.on('click', UI.savesTree.focus.bind(UI.savesTree));\n+  UI.savesTree.on('select', function (item){\n+\n+    if (item.isFile) {\n+      var fileName = item.name;\n+\n+      UI.logger.log('Loading genomes from file:');\n+      UI.logger.log(fileName);\n+\n+      var genomes = require('./genomes/'+fileName);\n+\n+      UI.learner.loadGenomes(genomes);\n+    } else {\n+      UI.refreshFiles();\n+    }\n+  });\n+\n+  UI.refreshFiles();\n+\n+\n+  // Save Btn\n+  UI.btnSave = UI.grid.set(9, 3, 3, 3, blessed.box, {\n+    label: 'Save to File',\n+    bg: 'green',\n+    fg: 'red',\n+    content: '\\n\\n\\n\\nSave Genomes',\n+    align: 'center',\n+  });\n+\n+  UI.btnSave.on('click', function (){\n+\n+    var jsonGenomes = [];\n+    for (var k in UI.learner.genomes) {\n+      jsonGenomes.push(UI.learner.genomes[k].toJSON());\n+    }\n+\n+    UI.logger.log('Saving '+jsonGenomes.length+' genomes...');\n+\n+    var dir = './genomes';\n+    var fileName = dir + '/gen_'+UI.learner.generation+'_'+Date.now()+'.json';\n+    fs.writeFile(fileName, JSON.stringify(jsonGenomes), function (err){\n+      if (err) {\n+        UI.logger.log('Failed to save! '+err);\n+      } else {\n+        UI.logger.log('Saved to '+fileName);\n+      }\n+\n+      UI.refreshFiles();\n+    });\n+\n+  });\n+\n+  screen.key(['escape', 'q', 'C-c'], function(ch, key) {\n+    return process.exit(0);\n+  });\n+\n+  screen.key(['s'], function (ch, key){\n+    if (learner.state == 'STOP') {\n+      learner.state = 'LEARNING';\n+      gameManipulator.focusGame();\n+      learner.startLearning();\n+    } else {\n+      learner.state = 'STOP';\n+    }\n+  });\n+\n+  screen.render()\n };\n \n \n-//\n // Read entire folder and select files that match a .json file\n-//\n UI.refreshFiles = function (){\n-\tvar files = [];\n-\tvar fileData =\n-\t{\n-\t\tname: 'Saved Files',\n-\t\textended: true,\n-\t\tchildren: [{\n-\t\t\tname: 'Refresh Folders'\n-\t\t}]\n-\t};\n-\n-\t// Populate tree\n-\tUI.logger.log('Reading genomes dir...')\n-\tvar files = fs.readdirSync('./genomes');\n-\tfor(var k in files){\n-\t\tif(files[k].indexOf('.json') >= 0){\n-\t\t\tfileData.children.push({\n-\t\t\t\tname: files[k],\n-\t\t\t\tisFile: true,\n-\t\t\t});\n-\t\t}\n-\t}\n-\n-\tUI.savesTree.setData(fileData);\n+  var files = [];\n+  var fileData = {\n+    name: 'Saved Files',\n+    extended: true,\n+    children: [{\n+      name: 'Refresh Folders'\n+    }]\n+  };\n+\n+  // Populate tree\n+  UI.logger.log('Reading genomes dir...')\n+  var files = fs.readdirSync('./genomes');\n+  for (var k in files) {\n+    if (files[k].indexOf('.json') >= 0) {\n+      \n+      fileData.children.push({\n+        name: files[k],\n+        isFile: true,\n+      });\n+\n+    }\n+  }\n+\n+  UI.savesTree.setData(fileData);\n }\n \n-//\n+\n // Updates data on the screen and render it\n-//\n UI.render = function () {\n \n-\t//\n-\t// Update data\n-\t//\n-\tUI.uiSensors.setData({\n-\t\ttitles: ['Distance', 'Size', 'Speed', 'Activation'],\n-\t\tdata: [\n-\t\t\tMath.round(UI.gm.sensors[0].value * 100),\n-\t\t\tMath.round(UI.gm.sensors[0].size * 100),\n-\t\t\tMath.round(UI.gm.sensors[0].speed * 100),\n-\t\t\tMath.round(UI.gm.gameOutput * 100),\n-\t\t]\n-\t})\n-\n-\t//\n-\t// Set Genome stats and score\n-\t//\n-\tvar learn = UI.learner;\n-\tvar uiStats = 'Status: '+learn.state+'\\n';\n-\tuiStats += 'Fitness: '+UI.gm.points+'\\nGameStatus: '+UI.gm.gamestate + '\\n';\n-\tuiStats += 'Generation: '+learn.generation+' : '+learn.genome+'/'+learn.genomes.length;\n-\tUI.uiScore.setText(uiStats);\n-\n-\tif(UI.gm.gameOutput){\n-\t\tvar str = 'Action: '+UI.gm.gameOutputString+'\\nActivation: '+UI.gm.gameOutput;\n-\t\tUI.uiGenomes.setText(str);\n-\t}else{\n-\t\tUI.uiGenomes.setText('Loading...');\n-\t}\n-\n-\t//\n-\t// Render screen\n-\t//\n-\tscreen.render();\n+  // Update data\n+  UI.uiSensors.setData({\n+    titles: ['Distance', 'Size', 'Speed', 'Activation'],\n+    data: [\n+      Math.round(UI.gm.sensors[0].value * 100),\n+      Math.round(UI.gm.sensors[0].size * 100),\n+      Math.round(UI.gm.sensors[0].speed * 100),\n+      Math.round(UI.gm.gameOutput * 100),\n+    ]\n+  })\n+\n+  // Set Genome stats and score\n+  var learn = UI.learner;\n+  var uiStats = '';\n+  uiStats += 'Status: ' + learn.state + '\\n';\n+  uiStats += 'Fitness: ' + UI.gm.points + '\\n';\n+  uiStats += 'GameStatus: ' + UI.gm.gamestate + '\\n';\n+  uiStats += 'Generation: ' + learn.generation;\n+  uiStats += ' : ' + learn.genome + '/' + learn.genomes.length;\n+  UI.uiScore.setText(uiStats);\n+\n+  if (UI.gm.gameOutput) {\n+    var str = '';\n+    str += 'Action: ' + UI.gm.gameOutputString + '\\n'\n+    str += 'Activation: ' + UI.gm.gameOutput;\n+    UI.uiGenomes.setText(str);\n+  } else {\n+    UI.uiGenomes.setText('Loading...');\n+  }\n+\n+  // Render screen\n+  screen.render();\n }\n \n+// Continuously render screen\n setInterval(UI.render, 25);\n \n module.exports = UI;\n\\ No newline at end of file"
        },
        {
          "sha": "a7fc5c646dd2ee4023d403914a291d3800ddf935",
          "filename": "index.js",
          "status": "modified",
          "additions": 26,
          "deletions": 41,
          "changes": 67,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/b062da9296f831ba8752412d3764c40f52897aa5/index.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/b062da9296f831ba8752412d3764c40f52897aa5/index.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/index.js?ref=b062da9296f831ba8752412d3764c40f52897aa5",
          "patch": "@@ -1,76 +1,61 @@\n-/*\n-\tDeveloped by Ivan Seidel [https://github.com/ivanseidel]\n-*/\n-\n-var UI = require('./UI');\n var robot = require('robotjs');\n-var Learner = require('./Learner');\n-var scanner = require('./scanner');\n+\n var GameManipulator = require('./GameManipulator');\n+var Learner = require('./Learner');\n+var Scanner = require('./Scanner');\n+var UI = require('./UI');\n+\n \n-//\n // Configure Robotjs\n-//\n robot.setMouseDelay(1);\n \n \n-//\n // Initialize Game\n-//\n GameManipulator.findGamePosition();\n \n \n-//\n // Check for found game\n-//\n-if(GameManipulator.offset){\n-\t// Uncomment this line to debug the\n-\t// starting point (Check if it's detecting it correcly)\n-\n-\t// robot.moveMouse(GameManipulator.offset[0]+GameManipulator.sensors[0].offset[0],\n-\t// \t\tGameManipulator.offset[1] + GameManipulator.sensors[0].offset[1]);\n-\n-\trobot.moveMouse(GameManipulator.offset[0], GameManipulator.offset[1]);\n-}else{\n-\tconsole.error('FAILED TO FIND GAME!');\n-\tprocess.exit();\n+if (GameManipulator.offset) {\n+  // Uncomment this line to debug the\n+  // starting point of sensor (Check if it's detecting it correcly)\n+\n+  // robot.moveMouse(GameManipulator.offset[0]+GameManipulator.sensors[0].offset[0],\n+  //    GameManipulator.offset[1] + GameManipulator.sensors[0].offset[1]);\n+\n+  robot.moveMouse(GameManipulator.offset[0], GameManipulator.offset[1]);\n+} else {\n+  console.error('FAILED TO FIND GAME!');\n+  process.exit();\n }\n \n \n-//\n // Initialize UI\n-//\n UI.init(GameManipulator, Learner);\n \n-//\n+\n // Init Learner\n-//\n Learner.init(GameManipulator, UI, 12, 4, 0.2);\n \n \n-//\n // Start reading game state and sensors\n-//\n setInterval(GameManipulator.readSensors, 40);\n setInterval(GameManipulator.readGameState, 200);\n \n \n-//\n // Start game (Example of API usage)\n-//\n /*\n function startGame () {\n-\tvar game = Math.round(Math.random() * 100);\n+  var game = Math.round(Math.random() * 100);\n \n-\tUI.logger.log('Queuing start... ', game);\n+  UI.logger.log('Queuing start... ', game);\n \n-\tGameManipulator.startNewGame(function() {\n-\t\tUI.logger.log('Game HAS started!', game);\n-\t\tGameManipulator.onGameEnd = function () {\n-\t\t\tUI.logger.log('Game HAS ended!', game);\n+  GameManipulator.startNewGame(function() {\n+    UI.logger.log('Game HAS started!', game);\n+    GameManipulator.onGameEnd = function () {\n+      UI.logger.log('Game HAS ended!', game);\n \n-\t\t\tstartGame();\n-\t\t}\n-\t});\n+      startGame();\n+    }\n+  });\n }\n */\n\\ No newline at end of file"
        },
        {
          "sha": "3c2f8fcd88ee32332bb1fbf375d1faaf55d102ce",
          "filename": "scanner.js",
          "status": "modified",
          "additions": 69,
          "deletions": 63,
          "changes": 132,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/b062da9296f831ba8752412d3764c40f52897aa5/scanner.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/b062da9296f831ba8752412d3764c40f52897aa5/scanner.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/scanner.js?ref=b062da9296f831ba8752412d3764c40f52897aa5",
          "patch": "@@ -1,97 +1,103 @@\n-/*\n-\tDeveloped by Ivan Seidel [https://github.com/ivanseidel]\n-*/\n-\n-// External Modules\n var robot = require('robotjs');\n+\n+// Cache screen size\n var screenSize = robot.getScreenSize();\n \n // Indexes\n var X = 0;\n var Y = 1;\n \n+\n // Create the \"class\" wrapper\n-var scanner = {};\n+var Scanner = {};\n+\n \n-//\n // Check if the given position is outside the Screen\n-//\n-scanner.isOutOfBound = function (pos) {\n-\tif( pos[X] < 0 || pos[Y] < 0 ||\n-\t\tpos[X] >= screenSize.width ||\n-\t\tpos[Y] >= screenSize.height)\n-\t\treturn true;\n+Scanner.isOutOfBound = function (pos) {\n+  if ( pos[X] < 0 || pos[Y] < 0 ||\n+     pos[X] >= screenSize.width ||\n+     pos[Y] >= screenSize.height) {\n+\n+    return true;\n+  }\n \n-\treturn false;\n+  return false;\n }\n \n-//\n+\n // Limits the x/y values of position to fit the screen\n-//\n-scanner.makeInBounds = function (pos) {\n+Scanner.makeInBounds = function (pos) {\n \n-\tif(pos[X] < 0)\n-\t\tpos[X] = 0;\n+  if (pos[X] < 0) {\n+    pos[X] = 0;\n+  }\n \n-\tif(pos[X] >= screenSize.width)\n-\t\tpos[X] = screenSize.width - 1;\n+  if (pos[X] >= screenSize.width) {\n+    pos[X] = screenSize.width - 1;\n+  }\n \n-\tif(pos[Y] < 0)\n-\t\tpos[Y] = 0;\n+  if (pos[Y] < 0) {\n+    pos[Y] = 0;\n+  }\n \n-\tif(pos[Y] >= screenSize.height)\n-\t\tpos[Y] = screenSize.height - 1;\n+  if (pos[Y] >= screenSize.height) {\n+    pos[Y] = screenSize.height - 1;\n+  }\n \n-\treturn pos;\n+  return pos;\n }\n \n-/*\n-\tGiven start [X, Y], and a DELTA [dX, dY],\n-\tmaps from \"start\", adding \"delta\" to position,\n-\tuntil \"matchinColor\" is found OR isOutOfBounds.\n-\n-\tIf iterations reach > iterLimit:\n-\t\treturns null;\n-\n-\tif isOutOfBounds:\n-\t\treturns null\n \n-\totherwise:\n-\t\treturn that point\n-\n-\tExample: (X direction)\n-\t\tscanUntil([0,0], [1, 0], \"000000\");\n-*/\n-scanner.scanUntil = function (start, delta, matchingColor, invertMatch, iterLimit) {\n-\tvar color, current, iterations = 0;\n+//  Given start [X, Y], and a DELTA [dX, dY],\n+//  maps from \"start\", adding \"delta\" to position,\n+//  until \"matchinColor\" is found OR isOutOfBounds.\n+//\n+//  If iterations reach > iterLimit:\n+//    returns null;\n+//\n+//  if isOutOfBounds:\n+//    returns null\n+//\n+//  otherwise:\n+//    return that point\n+//\n+//  Example: (X direction)\n+//    scanUntil([0,0], [1, 0], \"000000\");\n+Scanner.scanUntil = function (start, delta, matchColor, inverted, iterLimit) {\n+  var color, current, iterations = 0;\n \n-\t// (CLONE instead of using the real one)\n-\tcurrent = scanner.makeInBounds([start[X], start[Y]]);\n+  // (CLONE instead of using the real one)\n+  current = Scanner.makeInBounds([start[X], start[Y]]);\n \n-\tif(delta[X] == 0 && delta[Y] == 0)\n-\t\treturn null;\n+  if (delta[X] == 0 && delta[Y] == 0) {\n+    return null;\n+  }\n \n \n-\twhile(!scanner.isOutOfBound(current)){\n-\t\t// Check current pixel\n-\t\tcolor = robot.getPixelColor(current[X], current[Y]);\n+  while (!Scanner.isOutOfBound(current)) {\n+    // Check current pixel\n+    color = robot.getPixelColor(current[X], current[Y]);\n \n-\t\tif(!invertMatch && color.toString() == matchingColor)\n-\t\t\treturn current;\n+    if (!inverted && color.toString() == matchColor) {\n+      return current;\n+    }\n \n-\t\tif(invertMatch && color.toString() != matchingColor)\n-\t\t\treturn current;\n+    if (inverted && color.toString() != matchColor) {\n+      return current;\n+    }\n \n-\t\tcurrent[X] += delta[X];\n-\t\tcurrent[Y] += delta[Y];\n-\t\titerations++;\n+    current[X] += delta[X];\n+    current[Y] += delta[Y];\n+    iterations++;\n \n-\t\tif(iterations > iterLimit)\n-\t\t\treturn null;\n-\t}\n+    if (iterations > iterLimit) {\n+      return null;\n+    }\n+  }\n \n-\treturn null;\n+  return null;\n };\n \n+\n // Export the module\n-module.exports = scanner;\n\\ No newline at end of file\n+module.exports = Scanner;\n\\ No newline at end of file"
        }
      ]
    },
    "184d836dff9d30d083db4799d215ce7d335dbd3d": {
      "sha": "184d836dff9d30d083db4799d215ce7d335dbd3d",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6MTg0ZDgzNmRmZjlkMzBkMDgzZGI0Nzk5ZDIxNWNlN2QzMzVkYmQzZA==",
      "commit": {
        "author": {
          "name": "Ivan Seidel",
          "email": "ivanseidel@gmail.com",
          "date": "2015-12-29T14:05:37Z"
        },
        "committer": {
          "name": "Ivan Seidel",
          "email": "ivanseidel@gmail.com",
          "date": "2015-12-29T14:05:37Z"
        },
        "message": "Merge pull request #6 from tngan/master\n\nFix typo in README.md",
        "tree": {
          "sha": "690c887ba251f48a6fee9d76289de48ca4479e44",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/690c887ba251f48a6fee9d76289de48ca4479e44"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/184d836dff9d30d083db4799d215ce7d335dbd3d",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/184d836dff9d30d083db4799d215ce7d335dbd3d",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/184d836dff9d30d083db4799d215ce7d335dbd3d",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/184d836dff9d30d083db4799d215ce7d335dbd3d/comments",
      "author": {
        "login": "ivanseidel",
        "id": 3102127,
        "node_id": "MDQ6VXNlcjMxMDIxMjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3102127?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ivanseidel",
        "html_url": "https://github.com/ivanseidel",
        "followers_url": "https://api.github.com/users/ivanseidel/followers",
        "following_url": "https://api.github.com/users/ivanseidel/following{/other_user}",
        "gists_url": "https://api.github.com/users/ivanseidel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ivanseidel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ivanseidel/subscriptions",
        "organizations_url": "https://api.github.com/users/ivanseidel/orgs",
        "repos_url": "https://api.github.com/users/ivanseidel/repos",
        "events_url": "https://api.github.com/users/ivanseidel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ivanseidel/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "ivanseidel",
        "id": 3102127,
        "node_id": "MDQ6VXNlcjMxMDIxMjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3102127?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ivanseidel",
        "html_url": "https://github.com/ivanseidel",
        "followers_url": "https://api.github.com/users/ivanseidel/followers",
        "following_url": "https://api.github.com/users/ivanseidel/following{/other_user}",
        "gists_url": "https://api.github.com/users/ivanseidel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ivanseidel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ivanseidel/subscriptions",
        "organizations_url": "https://api.github.com/users/ivanseidel/orgs",
        "repos_url": "https://api.github.com/users/ivanseidel/repos",
        "events_url": "https://api.github.com/users/ivanseidel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ivanseidel/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "c6a36b68a4abd2e125658b7020f0ab6946029d02",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/c6a36b68a4abd2e125658b7020f0ab6946029d02",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/c6a36b68a4abd2e125658b7020f0ab6946029d02"
        },
        {
          "sha": "b31eb151d6dce516137693bc6cf0263c40ee5bd6",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/b31eb151d6dce516137693bc6cf0263c40ee5bd6",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/b31eb151d6dce516137693bc6cf0263c40ee5bd6"
        }
      ],
      "stats": { "total": 4, "additions": 2, "deletions": 2 },
      "files": [
        {
          "sha": "ac86acb7938cbfe57b34fed7fad77e562792db8d",
          "filename": "README.md",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "changes": 4,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/184d836dff9d30d083db4799d215ce7d335dbd3d/README.md",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/184d836dff9d30d083db4799d215ce7d335dbd3d/README.md",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/README.md?ref=184d836dff9d30d083db4799d215ce7d335dbd3d",
          "patch": "@@ -7,7 +7,7 @@ jump cactus, using Neural Networks and a simple Genetic Algorithm.\n \n **Watch** this video to see it in action, and learn how it works: [Artificial Inteligence with Google's Dinosaur](https://youtu.be/P7XHzqZjXQs)\n \n-## Instalation\n+## Installation\n \n 1. Install `Node.js` on your computer.\n \n@@ -57,7 +57,7 @@ in the values/configurations of the Neural Network, creating a new genome.\n We do the cross-over/mutation until we get 12 genomes again, and repeat it constantly.\n \n \n-## Inplementation\n+## Implementation\n \n All the implementation was done using Node.js, with Synaptic (Neural Network library),\n and RobotJs (a library to read pixels and simulate key presses)."
        }
      ]
    },
    "c6a36b68a4abd2e125658b7020f0ab6946029d02": {
      "sha": "c6a36b68a4abd2e125658b7020f0ab6946029d02",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6YzZhMzZiNjhhNGFiZDJlMTI1NjU4YjcwMjBmMGFiNjk0NjAyOWQwMg==",
      "commit": {
        "author": {
          "name": "Ivan Seidel",
          "email": "ivanseidel@gmail.com",
          "date": "2015-12-28T21:09:48Z"
        },
        "committer": {
          "name": "Ivan Seidel",
          "email": "ivanseidel@gmail.com",
          "date": "2015-12-28T21:09:48Z"
        },
        "message": "Add learned genome",
        "tree": {
          "sha": "9ba3e90a2e7bc9f1448df5bd3baefcd9cd16bbdd",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/9ba3e90a2e7bc9f1448df5bd3baefcd9cd16bbdd"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/c6a36b68a4abd2e125658b7020f0ab6946029d02",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/c6a36b68a4abd2e125658b7020f0ab6946029d02",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/c6a36b68a4abd2e125658b7020f0ab6946029d02",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/c6a36b68a4abd2e125658b7020f0ab6946029d02/comments",
      "author": {
        "login": "ivanseidel",
        "id": 3102127,
        "node_id": "MDQ6VXNlcjMxMDIxMjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3102127?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ivanseidel",
        "html_url": "https://github.com/ivanseidel",
        "followers_url": "https://api.github.com/users/ivanseidel/followers",
        "following_url": "https://api.github.com/users/ivanseidel/following{/other_user}",
        "gists_url": "https://api.github.com/users/ivanseidel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ivanseidel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ivanseidel/subscriptions",
        "organizations_url": "https://api.github.com/users/ivanseidel/orgs",
        "repos_url": "https://api.github.com/users/ivanseidel/repos",
        "events_url": "https://api.github.com/users/ivanseidel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ivanseidel/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "ivanseidel",
        "id": 3102127,
        "node_id": "MDQ6VXNlcjMxMDIxMjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3102127?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ivanseidel",
        "html_url": "https://github.com/ivanseidel",
        "followers_url": "https://api.github.com/users/ivanseidel/followers",
        "following_url": "https://api.github.com/users/ivanseidel/following{/other_user}",
        "gists_url": "https://api.github.com/users/ivanseidel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ivanseidel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ivanseidel/subscriptions",
        "organizations_url": "https://api.github.com/users/ivanseidel/orgs",
        "repos_url": "https://api.github.com/users/ivanseidel/repos",
        "events_url": "https://api.github.com/users/ivanseidel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ivanseidel/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "32a7b831fa1aa92743f21b8b3e134bcfd597466f",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/32a7b831fa1aa92743f21b8b3e134bcfd597466f",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/32a7b831fa1aa92743f21b8b3e134bcfd597466f"
        }
      ],
      "stats": { "total": 4, "additions": 3, "deletions": 1 },
      "files": [
        {
          "sha": "ef8e3f0e2e8992c542b39e13924493eb11e85112",
          "filename": ".gitignore",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "changes": 3,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/c6a36b68a4abd2e125658b7020f0ab6946029d02/.gitignore",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/c6a36b68a4abd2e125658b7020f0ab6946029d02/.gitignore",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/.gitignore?ref=c6a36b68a4abd2e125658b7020f0ab6946029d02",
          "patch": "@@ -8,4 +8,5 @@ robotjs\n \n # Saved files\n genomes/*\n-!genomes/.gitkeep\n\\ No newline at end of file\n+!genomes/.gitkeep\n+!genomes/ninja.json\n\\ No newline at end of file"
        },
        {
          "sha": "25fa4d97a04a1ceb2a0d62836c1c044b8723c945",
          "filename": "genomes/ninja.json",
          "status": "added",
          "additions": 1,
          "deletions": 0,
          "changes": 1,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/c6a36b68a4abd2e125658b7020f0ab6946029d02/genomes/ninja.json",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/c6a36b68a4abd2e125658b7020f0ab6946029d02/genomes/ninja.json",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/genomes/ninja.json?ref=c6a36b68a4abd2e125658b7020f0ab6946029d02",
          "patch": "@@ -0,0 +1 @@\n+[{\"neurons\":[{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0,\"old\":0,\"activation\":0,\"bias\":0,\"layer\":\"input\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0,\"old\":0,\"activation\":0.39,\"bias\":0,\"layer\":\"input\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0,\"old\":0,\"activation\":1.3348040246025272,\"bias\":0,\"layer\":\"input\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-2.0322203816959745,\"old\":-2.0322203816959745,\"activation\":0.11586127777543492,\"bias\":-0.3880038627461479,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-0.13389542952294398,\"old\":-0.13389542952294398,\"activation\":0.46657606302794025,\"bias\":0.4224254883608316,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":1.3094505597741015,\"old\":1.3094505597741015,\"activation\":0.7874212001220087,\"bias\":1.0005502347416861,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-1.237310938797589,\"old\":-1.237310938797589,\"activation\":0.22490440257338484,\"bias\":-0.0617127046413693,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":1.254692958082969,\"old\":1.254692958082969,\"activation\":0.77811117738326,\"bias\":-0.722564815227587,\"layer\":\"output\",\"squash\":\"LOGISTIC\"}],\"connections\":[{\"from\":\"0\",\"to\":\"3\",\"weight\":-1.5327815896231223,\"gater\":null},{\"from\":\"0\",\"to\":\"4\",\"weight\":-2.2822599700889814,\"gater\":null},{\"from\":\"0\",\"to\":\"5\",\"weight\":-3.924941099051849,\"gater\":null},{\"from\":\"0\",\"to\":\"6\",\"weight\":-1.415126002091672,\"gater\":null},{\"from\":\"1\",\"to\":\"3\",\"weight\":2.652204887043163,\"gater\":null},{\"from\":\"1\",\"to\":\"4\",\"weight\":0.25244677897121565,\"gater\":null},{\"from\":\"1\",\"to\":\"5\",\"weight\":0.6026895028488548,\"gater\":null},{\"from\":\"1\",\"to\":\"6\",\"weight\":-1.684542508399489,\"gater\":null},{\"from\":\"2\",\"to\":\"3\",\"weight\":-2.006718870730313,\"gater\":null},{\"from\":\"2\",\"to\":\"4\",\"weight\":-0.49054029626373513,\"gater\":null},{\"from\":\"2\",\"to\":\"5\",\"weight\":0.05532753689692624,\"gater\":null},{\"from\":\"2\",\"to\":\"6\",\"weight\":-0.3885414235508119,\"gater\":null},{\"from\":\"3\",\"to\":\"7\",\"weight\":-2.1244527601868586,\"gater\":null},{\"from\":\"4\",\"to\":\"7\",\"weight\":2.7318777381342363,\"gater\":null},{\"from\":\"5\",\"to\":\"7\",\"weight\":1.049037113655114,\"gater\":null},{\"from\":\"6\",\"to\":\"7\",\"weight\":0.5457285875056297,\"gater\":null}]},{\"neurons\":[{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0,\"old\":0,\"activation\":1,\"bias\":0,\"layer\":\"input\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0,\"old\":0,\"activation\":0,\"bias\":0,\"layer\":\"input\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0,\"old\":0,\"activation\":1.558682894018903,\"bias\":0,\"layer\":\"input\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0.37855917410895623,\"old\":0.37855917410895623,\"activation\":0.5935255463003045,\"bias\":0.0741467908577419,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-3.095739582607292,\"old\":-3.095739582607292,\"activation\":0.04328333546512352,\"bias\":-0.058910553209155725,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-3.385600747957228,\"old\":-3.385600747957228,\"activation\":0.03274852017462801,\"bias\":0.45310226576518264,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-2.0114726230093747,\"old\":-2.0114726230093747,\"activation\":0.11800362278092183,\"bias\":-0.36206345233458886,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-0.5020491705615062,\"old\":-0.5020491705615062,\"activation\":0.3770592270907349,\"bias\":-0.15822368844560386,\"layer\":\"output\",\"squash\":\"LOGISTIC\"}],\"connections\":[{\"from\":\"0\",\"to\":\"3\",\"weight\":3.4322507601634835,\"gater\":null},{\"from\":\"0\",\"to\":\"4\",\"weight\":-2.8034656130516424,\"gater\":null},{\"from\":\"0\",\"to\":\"5\",\"weight\":-3.924941099051849,\"gater\":null},{\"from\":\"0\",\"to\":\"6\",\"weight\":-1.1080729890794625,\"gater\":null},{\"from\":\"1\",\"to\":\"3\",\"weight\":0.48228087984296164,\"gater\":null},{\"from\":\"1\",\"to\":\"4\",\"weight\":0.9891307183748549,\"gater\":null},{\"from\":\"1\",\"to\":\"5\",\"weight\":0.6833116344782653,\"gater\":null},{\"from\":\"1\",\"to\":\"6\",\"weight\":-0.9599631511320865,\"gater\":null},{\"from\":\"2\",\"to\":\"3\",\"weight\":-2.006718870730313,\"gater\":null},{\"from\":\"2\",\"to\":\"4\",\"weight\":-0.14971834055661595,\"gater\":null},{\"from\":\"2\",\"to\":\"5\",\"weight\":0.05532753689692624,\"gater\":null},{\"from\":\"2\",\"to\":\"6\",\"weight\":-0.34730360079819933,\"gater\":null},{\"from\":\"3\",\"to\":\"7\",\"weight\":-1.0482693514372388,\"gater\":null},{\"from\":\"4\",\"to\":\"7\",\"weight\":1.9731384153235008,\"gater\":null},{\"from\":\"5\",\"to\":\"7\",\"weight\":1.049037113655114,\"gater\":null},{\"from\":\"6\",\"to\":\"7\",\"weight\":1.343947995818256,\"gater\":null}]},{\"neurons\":[{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0,\"old\":0,\"activation\":1,\"bias\":0,\"layer\":\"input\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0,\"old\":0,\"activation\":0,\"bias\":0,\"layer\":\"input\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0,\"old\":0,\"activation\":0.9870179373832775,\"bias\":0,\"layer\":\"input\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":1.525730030324892,\"old\":1.525730030324892,\"activation\":0.8213807074621803,\"bias\":0.0741467908577419,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-5.357329475185197,\"old\":-5.357329475185197,\"activation\":0.004691364135778572,\"bias\":-0.058910553209155725,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-3.342436153876341,\"old\":-3.342436153876341,\"activation\":0.0341437271323433,\"bias\":0.45310226576518264,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-1.9052829198683146,\"old\":-1.9052829198683146,\"activation\":0.12951171963332328,\"bias\":-0.36206345233458886,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-0.7637087994528299,\"old\":-0.7637087994528299,\"activation\":0.31784158786129346,\"bias\":-0.15822368844560386,\"layer\":\"output\",\"squash\":\"LOGISTIC\"}],\"connections\":[{\"from\":\"0\",\"to\":\"3\",\"weight\":3.4322507601634835,\"gater\":null},{\"from\":\"0\",\"to\":\"4\",\"weight\":-5.055376588267963,\"gater\":null},{\"from\":\"0\",\"to\":\"5\",\"weight\":-3.924941099051849,\"gater\":null},{\"from\":\"0\",\"to\":\"6\",\"weight\":-1.1080729890794625,\"gater\":null},{\"from\":\"1\",\"to\":\"3\",\"weight\":-0.36011783279864695,\"gater\":null},{\"from\":\"1\",\"to\":\"4\",\"weight\":0.8383497771952181,\"gater\":null},{\"from\":\"1\",\"to\":\"5\",\"weight\":-0.41278719733651026,\"gater\":null},{\"from\":\"1\",\"to\":\"6\",\"weight\":-0.9599631511320865,\"gater\":null},{\"from\":\"2\",\"to\":\"3\",\"weight\":-2.006718870730313,\"gater\":null},{\"from\":\"2\",\"to\":\"4\",\"weight\":-0.24623902413811963,\"gater\":null},{\"from\":\"2\",\"to\":\"5\",\"weight\":0.13110468868822137,\"gater\":null},{\"from\":\"2\",\"to\":\"6\",\"weight\":-0.4408698788270223,\"gater\":null},{\"from\":\"3\",\"to\":\"7\",\"weight\":-1.0482693514372388,\"gater\":null},{\"from\":\"4\",\"to\":\"7\",\"weight\":1.9731384153235008,\"gater\":null},{\"from\":\"5\",\"to\":\"7\",\"weight\":2.115451057070952,\"gater\":null},{\"from\":\"6\",\"to\":\"7\",\"weight\":1.343947995818256,\"gater\":null}]},{\"neurons\":[{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0,\"old\":0,\"activation\":1,\"bias\":0,\"layer\":\"input\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0,\"old\":0,\"activation\":0,\"bias\":0,\"layer\":\"input\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0,\"old\":0,\"activation\":1.3268571659854063,\"bias\":0,\"layer\":\"input\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0.8437682372745674,\"old\":0.8437682372745674,\"activation\":0.6992582563012741,\"bias\":0.0741467908577419,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-3.1891001799837158,\"old\":-3.1891001799837158,\"activation\":0.039577968940608936,\"bias\":-0.058910553209155725,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-3.3984270944786577,\"old\":-3.3984270944786577,\"activation\":0.03234465805658589,\"bias\":0.45310226576518264,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-1.930958712905677,\"old\":-1.930958712905677,\"activation\":0.1266445030749041,\"bias\":-0.36206345233458886,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-0.6090075035297202,\"old\":-0.6090075035297202,\"activation\":0.3522856330109004,\"bias\":-0.15822368844560386,\"layer\":\"output\",\"squash\":\"LOGISTIC\"}],\"connections\":[{\"from\":\"0\",\"to\":\"3\",\"weight\":3.4322507601634835,\"gater\":null},{\"from\":\"0\",\"to\":\"4\",\"weight\":-2.8034656130516424,\"gater\":null},{\"from\":\"0\",\"to\":\"5\",\"weight\":-3.924941099051849,\"gater\":null},{\"from\":\"0\",\"to\":\"6\",\"weight\":-1.1080729890794625,\"gater\":null},{\"from\":\"1\",\"to\":\"3\",\"weight\":0.48228087984296164,\"gater\":null},{\"from\":\"1\",\"to\":\"4\",\"weight\":0.29658182092604235,\"gater\":null},{\"from\":\"1\",\"to\":\"5\",\"weight\":0.6833116344782653,\"gater\":null},{\"from\":\"1\",\"to\":\"6\",\"weight\":-0.9599631511320865,\"gater\":null},{\"from\":\"2\",\"to\":\"3\",\"weight\":-2.006718870730313,\"gater\":null},{\"from\":\"2\",\"to\":\"4\",\"weight\":-0.24623902413811963,\"gater\":null},{\"from\":\"2\",\"to\":\"5\",\"weight\":0.05532753689692624,\"gater\":null},{\"from\":\"2\",\"to\":\"6\",\"weight\":-0.34730360079819933,\"gater\":null},{\"from\":\"3\",\"to\":\"7\",\"weight\":-1.0482693514372388,\"gater\":null},{\"from\":\"4\",\"to\":\"7\",\"weight\":1.9731384153235008,\"gater\":null},{\"from\":\"5\",\"to\":\"7\",\"weight\":1.049037113655114,\"gater\":null},{\"from\":\"6\",\"to\":\"7\",\"weight\":1.343947995818256,\"gater\":null}]},{\"neurons\":[{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0,\"old\":0,\"activation\":1,\"bias\":0,\"layer\":\"input\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0,\"old\":0,\"activation\":0,\"bias\":0,\"layer\":\"input\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0,\"old\":0,\"activation\":0.7034429459478244,\"bias\":0,\"layer\":\"input\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-2.7498127565519295,\"old\":-2.7498127565519295,\"activation\":0.060097225851886135,\"bias\":0.19458106718681561,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-2.2049015928380302,\"old\":-2.2049015928380302,\"activation\":0.09931118719847756,\"bias\":0.4224254883608316,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":2.624370964018958,\"old\":2.624370964018958,\"activation\":0.9324136787936003,\"bias\":2.325056714187551,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-1.2319174138576585,\"old\":-1.2319174138576585,\"activation\":0.2258460096643315,\"bias\":-0.0617127046413693,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-0.3918628114825984,\"old\":-0.3918628114825984,\"activation\":0.40326894730699053,\"bias\":-0.722564815227587,\"layer\":\"output\",\"squash\":\"LOGISTIC\"}],\"connections\":[{\"from\":\"0\",\"to\":\"3\",\"weight\":-1.5327815896231223,\"gater\":null},{\"from\":\"0\",\"to\":\"4\",\"weight\":-2.2822599700889814,\"gater\":null},{\"from\":\"0\",\"to\":\"5\",\"weight\":0.2603944842845962,\"gater\":null},{\"from\":\"0\",\"to\":\"6\",\"weight\":-1.415126002091672,\"gater\":null},{\"from\":\"1\",\"to\":\"3\",\"weight\":2.652204887043163,\"gater\":null},{\"from\":\"1\",\"to\":\"4\",\"weight\":0.25244677897121565,\"gater\":null},{\"from\":\"1\",\"to\":\"5\",\"weight\":0.6026895028488548,\"gater\":null},{\"from\":\"1\",\"to\":\"6\",\"weight\":-1.684542508399489,\"gater\":null},{\"from\":\"2\",\"to\":\"3\",\"weight\":-2.006718870730313,\"gater\":null},{\"from\":\"2\",\"to\":\"4\",\"weight\":-0.49054029626373513,\"gater\":null},{\"from\":\"2\",\"to\":\"5\",\"weight\":0.05532753689692624,\"gater\":null},{\"from\":\"2\",\"to\":\"6\",\"weight\":0.34817506421274,\"gater\":null},{\"from\":\"3\",\"to\":\"7\",\"weight\":-2.1244527601868586,\"gater\":null},{\"from\":\"4\",\"to\":\"7\",\"weight\":4.5683114530682865,\"gater\":null},{\"from\":\"5\",\"to\":\"7\",\"weight\":-0.1271531503187604,\"gater\":null},{\"from\":\"6\",\"to\":\"7\",\"weight\":0.5457285875056297,\"gater\":null}]},{\"neurons\":[{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0,\"old\":0,\"activation\":1,\"bias\":0,\"layer\":\"input\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0,\"old\":0,\"activation\":0,\"bias\":0,\"layer\":\"input\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0,\"old\":0,\"activation\":0.36315197142666866,\"bias\":0,\"layer\":\"input\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":2.3155029834125243,\"old\":2.170808356066037,\"activation\":0.9101528765086756,\"bias\":-0.3880038627461479,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-4.722373286965069,\"old\":-4.450745127336467,\"activation\":0.008815638668693445,\"bias\":0.4224254883608316,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-2.8767799381497556,\"old\":-2.867988592331429,\"activation\":0.05331342290125554,\"bias\":1.0005502347416861,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-1.1651050177720992,\"old\":-1.3228741722854298,\"activation\":0.23774091470999323,\"bias\":-0.0617127046413693,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-1.2583321303399948,\"old\":-1.2742757519845853,\"activation\":0.22126114030677738,\"bias\":-0.611772379000412,\"layer\":\"output\",\"squash\":\"LOGISTIC\"}],\"connections\":[{\"from\":\"0\",\"to\":\"3\",\"weight\":3.4322507601634835,\"gater\":null},{\"from\":\"0\",\"to\":\"4\",\"weight\":-5.055376588267963,\"gater\":null},{\"from\":\"0\",\"to\":\"5\",\"weight\":-3.924941099051849,\"gater\":null},{\"from\":\"0\",\"to\":\"6\",\"weight\":-1.1080729890794625,\"gater\":null},{\"from\":\"1\",\"to\":\"3\",\"weight\":-0.36011783279864695,\"gater\":null},{\"from\":\"1\",\"to\":\"4\",\"weight\":0.8383497771952181,\"gater\":null},{\"from\":\"1\",\"to\":\"5\",\"weight\":-0.41278719733651026,\"gater\":null},{\"from\":\"1\",\"to\":\"6\",\"weight\":-0.9599631511320865,\"gater\":null},{\"from\":\"2\",\"to\":\"3\",\"weight\":-2.006718870730313,\"gater\":null},{\"from\":\"2\",\"to\":\"4\",\"weight\":-0.24623902413811963,\"gater\":null},{\"from\":\"2\",\"to\":\"5\",\"weight\":0.13110468868822137,\"gater\":null},{\"from\":\"2\",\"to\":\"6\",\"weight\":0.012889028057163576,\"gater\":null},{\"from\":\"3\",\"to\":\"7\",\"weight\":-1.177175249553277,\"gater\":null},{\"from\":\"4\",\"to\":\"7\",\"weight\":1.9731384153235008,\"gater\":null},{\"from\":\"5\",\"to\":\"7\",\"weight\":1.6495618223150093,\"gater\":null},{\"from\":\"6\",\"to\":\"7\",\"weight\":1.343947995818256,\"gater\":null}]},{\"neurons\":[{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0,\"old\":0,\"activation\":1,\"bias\":0,\"layer\":\"input\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0,\"old\":0,\"activation\":0,\"bias\":0,\"layer\":\"input\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0,\"old\":0,\"activation\":1.1559255305454421,\"bias\":0,\"layer\":\"input\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":1.1867799757167377,\"old\":1.1867799757167377,\"activation\":0.7661646708729688,\"bias\":0.0741467908577419,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-3.4553309099312908,\"old\":-3.4553309099312908,\"activation\":0.03061027729003264,\"bias\":-0.058910553209155725,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-8.175422133392143,\"old\":-8.175422133392143,\"activation\":0.0002814083948202581,\"bias\":0.45310226576518264,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-1.8715935404270523,\"old\":-1.8715935404270523,\"activation\":0.1333574442814589,\"bias\":-0.36206345233458886,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-0.7215224304655379,\"old\":-0.7215224304655379,\"activation\":0.327057821503504,\"bias\":-0.15822368844560386,\"layer\":\"output\",\"squash\":\"LOGISTIC\"}],\"connections\":[{\"from\":\"0\",\"to\":\"3\",\"weight\":3.4322507601634835,\"gater\":null},{\"from\":\"0\",\"to\":\"4\",\"weight\":-2.8034656130516424,\"gater\":null},{\"from\":\"0\",\"to\":\"5\",\"weight\":-8.692478911598677,\"gater\":null},{\"from\":\"0\",\"to\":\"6\",\"weight\":-1.1080729890794625,\"gater\":null},{\"from\":\"1\",\"to\":\"3\",\"weight\":0.48228087984296164,\"gater\":null},{\"from\":\"1\",\"to\":\"4\",\"weight\":0.9891307183748549,\"gater\":null},{\"from\":\"1\",\"to\":\"5\",\"weight\":0.6833116344782653,\"gater\":null},{\"from\":\"1\",\"to\":\"6\",\"weight\":-0.9599631511320865,\"gater\":null},{\"from\":\"2\",\"to\":\"3\",\"weight\":-2.006718870730313,\"gater\":null},{\"from\":\"2\",\"to\":\"4\",\"weight\":-0.5129696749501651,\"gater\":null},{\"from\":\"2\",\"to\":\"5\",\"weight\":0.05532753689692624,\"gater\":null},{\"from\":\"2\",\"to\":\"6\",\"weight\":-0.34730360079819933,\"gater\":null},{\"from\":\"3\",\"to\":\"7\",\"weight\":-1.0482693514372388,\"gater\":null},{\"from\":\"4\",\"to\":\"7\",\"weight\":1.9731384153235008,\"gater\":null},{\"from\":\"5\",\"to\":\"7\",\"weight\":0.7974766216988861,\"gater\":null},{\"from\":\"6\",\"to\":\"7\",\"weight\":1.343947995818256,\"gater\":null}]},{\"neurons\":[{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0,\"old\":0,\"activation\":1,\"bias\":0,\"layer\":\"input\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0,\"old\":0,\"activation\":0,\"bias\":0,\"layer\":\"input\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0,\"old\":0,\"activation\":0.7734451448094388,\"bias\":0,\"layer\":\"input\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":1.9543105834573848,\"old\":1.6006342385163317,\"activation\":0.8759159068707985,\"bias\":0.0741467908577419,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-2.9697160943594763,\"old\":-1.7265227760704982,\"activation\":0.04881290310710323,\"bias\":-0.058910553209155725,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-3.4290460184994735,\"old\":-2.1725727708991007,\"activation\":0.03139993365352594,\"bias\":0.45310226576518264,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-0.8899481544815321,\"old\":-1.3307081309467792,\"activation\":0.2911205266447669,\"bias\":0.4867451184101333,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-0.5559143296758808,\"old\":-0.34429100554572833,\"activation\":0.3644933310029331,\"bias\":-0.15822368844560386,\"layer\":\"output\",\"squash\":\"LOGISTIC\"}],\"connections\":[{\"from\":\"0\",\"to\":\"3\",\"weight\":3.4322507601634835,\"gater\":null},{\"from\":\"0\",\"to\":\"4\",\"weight\":-2.8034656130516424,\"gater\":null},{\"from\":\"0\",\"to\":\"5\",\"weight\":-3.924941099051849,\"gater\":null},{\"from\":\"0\",\"to\":\"6\",\"weight\":-1.1080729890794625,\"gater\":null},{\"from\":\"1\",\"to\":\"3\",\"weight\":0.48228087984296164,\"gater\":null},{\"from\":\"1\",\"to\":\"4\",\"weight\":0.9891307183748549,\"gater\":null},{\"from\":\"1\",\"to\":\"5\",\"weight\":0.6833116344782653,\"gater\":null},{\"from\":\"1\",\"to\":\"6\",\"weight\":-0.9599631511320865,\"gater\":null},{\"from\":\"2\",\"to\":\"3\",\"weight\":-2.006718870730313,\"gater\":null},{\"from\":\"2\",\"to\":\"4\",\"weight\":-0.13878156559522326,\"gater\":null},{\"from\":\"2\",\"to\":\"5\",\"weight\":0.05532753689692624,\"gater\":null},{\"from\":\"2\",\"to\":\"6\",\"weight\":-0.34730360079819933,\"gater\":null},{\"from\":\"3\",\"to\":\"7\",\"weight\":-1.0482693514372388,\"gater\":null},{\"from\":\"4\",\"to\":\"7\",\"weight\":1.9731384153235008,\"gater\":null},{\"from\":\"5\",\"to\":\"7\",\"weight\":1.049037113655114,\"gater\":null},{\"from\":\"6\",\"to\":\"7\",\"weight\":1.343947995818256,\"gater\":null}]},{\"neurons\":[{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0,\"old\":0,\"activation\":1,\"bias\":0,\"layer\":\"input\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0,\"old\":0,\"activation\":0,\"bias\":0,\"layer\":\"input\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0,\"old\":0,\"activation\":0.29708918360200975,\"bias\":0,\"layer\":\"input\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-2.516959923393286,\"old\":-2.516959923393286,\"activation\":0.07467774600297021,\"bias\":-0.3880038627461479,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-2.005568697869031,\"old\":-2.005568697869031,\"activation\":0.11861948318220022,\"bias\":0.4224254883608316,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-4.038510636440209,\"old\":-4.038510636440209,\"activation\":0.017318485172809074,\"bias\":1.0005502347416861,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-1.4725320654496081,\"old\":-1.4725320654496081,\"activation\":0.18655805753140917,\"bias\":0.05802539096033746,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-0.020211851205492737,\"old\":-0.020211851205492737,\"activation\":0.49494720921084584,\"bias\":-0.722564815227587,\"layer\":\"output\",\"squash\":\"LOGISTIC\"}],\"connections\":[{\"from\":\"0\",\"to\":\"3\",\"weight\":-1.5327815896231223,\"gater\":null},{\"from\":\"0\",\"to\":\"4\",\"weight\":-2.2822599700889814,\"gater\":null},{\"from\":\"0\",\"to\":\"5\",\"weight\":-5.055498083949312,\"gater\":null},{\"from\":\"0\",\"to\":\"6\",\"weight\":-1.415126002091672,\"gater\":null},{\"from\":\"1\",\"to\":\"3\",\"weight\":6.240821060311731,\"gater\":null},{\"from\":\"1\",\"to\":\"4\",\"weight\":0.25244677897121565,\"gater\":null},{\"from\":\"1\",\"to\":\"5\",\"weight\":0.6026895028488548,\"gater\":null},{\"from\":\"1\",\"to\":\"6\",\"weight\":0.7046441596613022,\"gater\":null},{\"from\":\"2\",\"to\":\"3\",\"weight\":-2.006718870730313,\"gater\":null},{\"from\":\"2\",\"to\":\"4\",\"weight\":-0.49054029626373513,\"gater\":null},{\"from\":\"2\",\"to\":\"5\",\"weight\":0.05532753689692624,\"gater\":null},{\"from\":\"2\",\"to\":\"6\",\"weight\":-0.3885414235508119,\"gater\":null},{\"from\":\"3\",\"to\":\"7\",\"weight\":-2.1244527601868586,\"gater\":null},{\"from\":\"4\",\"to\":\"7\",\"weight\":6.247072477810807,\"gater\":null},{\"from\":\"5\",\"to\":\"7\",\"weight\":1.049037113655114,\"gater\":null},{\"from\":\"6\",\"to\":\"7\",\"weight\":0.5457285875056297,\"gater\":null}]},{\"neurons\":[{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0,\"old\":0,\"activation\":0.044444444444444446,\"bias\":0,\"layer\":\"input\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0,\"old\":0,\"activation\":0.39,\"bias\":0,\"layer\":\"input\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0,\"old\":0,\"activation\":1.105168862099406,\"bias\":0,\"layer\":\"input\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-1.1773801403193218,\"old\":-1.1773801403193218,\"activation\":0.23552358090977477,\"bias\":0.0741467908577419,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-0.503607985408148,\"old\":-0.503607985408148,\"activation\":0.3766931542116663,\"bias\":-0.058910553209155725,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0.14975469718047513,\"old\":0.14975469718047513,\"activation\":0.5373688627468657,\"bias\":0.45310226576518264,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-1.5113334025363758,\"old\":-1.5113334025363758,\"activation\":0.18074126703206564,\"bias\":-0.36206345233458886,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":1.0328527892054404,\"old\":1.0328527892054404,\"activation\":0.7374685945972644,\"bias\":-0.15822368844560386,\"layer\":\"output\",\"squash\":\"LOGISTIC\"}],\"connections\":[{\"from\":\"0\",\"to\":\"3\",\"weight\":-1.5327815896231223,\"gater\":null},{\"from\":\"0\",\"to\":\"4\",\"weight\":-2.2822599700889814,\"gater\":null},{\"from\":\"0\",\"to\":\"5\",\"weight\":-3.924941099051849,\"gater\":null},{\"from\":\"0\",\"to\":\"6\",\"weight\":-1.415126002091672,\"gater\":null},{\"from\":\"1\",\"to\":\"3\",\"weight\":2.652204887043163,\"gater\":null},{\"from\":\"1\",\"to\":\"4\",\"weight\":0.5099133468848835,\"gater\":null},{\"from\":\"1\",\"to\":\"5\",\"weight\":0.6026895028488548,\"gater\":null},{\"from\":\"1\",\"to\":\"6\",\"weight\":-1.684542508399489,\"gater\":null},{\"from\":\"2\",\"to\":\"3\",\"weight\":-2.006718870730313,\"gater\":null},{\"from\":\"2\",\"to\":\"4\",\"weight\":-0.49054029626373513,\"gater\":null},{\"from\":\"2\",\"to\":\"5\",\"weight\":-0.3293203966856767,\"gater\":null},{\"from\":\"2\",\"to\":\"6\",\"weight\":-0.3885414235508119,\"gater\":null},{\"from\":\"3\",\"to\":\"7\",\"weight\":-2.1244527601868586,\"gater\":null},{\"from\":\"4\",\"to\":\"7\",\"weight\":2.7318777381342363,\"gater\":null},{\"from\":\"5\",\"to\":\"7\",\"weight\":1.049037113655114,\"gater\":null},{\"from\":\"6\",\"to\":\"7\",\"weight\":0.5457285875056297,\"gater\":null}]},{\"neurons\":[{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0,\"old\":0,\"activation\":0,\"bias\":0,\"layer\":\"input\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0,\"old\":0,\"activation\":0.47,\"bias\":0,\"layer\":\"input\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0,\"old\":0,\"activation\":0.3542686948738374,\"bias\":0,\"layer\":\"input\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":1.0995689724263564,\"old\":1.0995689724263564,\"activation\":0.7501793352992012,\"bias\":-0.3880038627461479,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0.367292403936924,\"old\":0.367292403936924,\"activation\":0.5908045661120014,\"bias\":0.4224254883608316,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":1.303415115367706,\"old\":1.303415115367706,\"activation\":0.7864091803004385,\"bias\":1.0005502347416861,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-0.9910957466148982,\"old\":-0.9910957466148982,\"activation\":0.27069570151456196,\"bias\":-0.0617127046413693,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0.2704192664959591,\"old\":0.2704192664959591,\"activation\":0.5671958313821571,\"bias\":-0.722564815227587,\"layer\":\"output\",\"squash\":\"LOGISTIC\"}],\"connections\":[{\"from\":\"0\",\"to\":\"3\",\"weight\":-1.5327815896231223,\"gater\":null},{\"from\":\"0\",\"to\":\"4\",\"weight\":-2.2822599700889814,\"gater\":null},{\"from\":\"0\",\"to\":\"5\",\"weight\":-3.924941099051849,\"gater\":null},{\"from\":\"0\",\"to\":\"6\",\"weight\":-1.415126002091672,\"gater\":null},{\"from\":\"1\",\"to\":\"3\",\"weight\":3.874135168187089,\"gater\":null},{\"from\":\"1\",\"to\":\"4\",\"weight\":0.25244677897121565,\"gater\":null},{\"from\":\"1\",\"to\":\"5\",\"weight\":0.6026895028488548,\"gater\":null},{\"from\":\"1\",\"to\":\"6\",\"weight\":-1.684542508399489,\"gater\":null},{\"from\":\"2\",\"to\":\"3\",\"weight\":-0.9407286014760969,\"gater\":null},{\"from\":\"2\",\"to\":\"4\",\"weight\":-0.49054029626373513,\"gater\":null},{\"from\":\"2\",\"to\":\"5\",\"weight\":0.05532753689692624,\"gater\":null},{\"from\":\"2\",\"to\":\"6\",\"weight\":-0.3885414235508119,\"gater\":null},{\"from\":\"3\",\"to\":\"7\",\"weight\":-2.1244527601868586,\"gater\":null},{\"from\":\"4\",\"to\":\"7\",\"weight\":2.7318777381342363,\"gater\":null},{\"from\":\"5\",\"to\":\"7\",\"weight\":1.049037113655114,\"gater\":null},{\"from\":\"6\",\"to\":\"7\",\"weight\":0.5457285875056297,\"gater\":null}]},{\"neurons\":[{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0,\"old\":0,\"activation\":0.9333333333333333,\"bias\":0,\"layer\":\"input\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0,\"old\":0,\"activation\":0.19,\"bias\":0,\"layer\":\"input\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":0,\"old\":0,\"activation\":0.6163232373079741,\"bias\":0,\"layer\":\"input\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":1.931097439250038,\"old\":1.931097439250038,\"activation\":0.8733708400510548,\"bias\":0.0741467908577419,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-4.408568275384055,\"old\":-4.408568275384055,\"activation\":0.012026203572561341,\"bias\":0.30225958184064755,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-3.6276278239330852,\"old\":-3.6276278239330852,\"activation\":0.025890999120548548,\"bias\":0.45310226576518264,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-1.8503762584740953,\"old\":-1.8503762584740953,\"activation\":0.13582872600720639,\"bias\":-0.36206345233458886,\"layer\":\"0\",\"squash\":\"LOGISTIC\"},{\"trace\":{\"elegibility\":{},\"extended\":{}},\"state\":-0.9132444780298036,\"old\":-0.9132444780298036,\"activation\":0.2863363757721577,\"bias\":-0.15822368844560386,\"layer\":\"output\",\"squash\":\"LOGISTIC\"}],\"connections\":[{\"from\":\"0\",\"to\":\"3\",\"weight\":3.4322507601634835,\"gater\":null},{\"from\":\"0\",\"to\":\"4\",\"weight\":-5.055376588267963,\"gater\":null},{\"from\":\"0\",\"to\":\"5\",\"weight\":-4.240012049192514,\"gater\":null},{\"from\":\"0\",\"to\":\"6\",\"weight\":-1.1080729890794625,\"gater\":null},{\"from\":\"1\",\"to\":\"3\",\"weight\":-0.5773469665865629,\"gater\":null},{\"from\":\"1\",\"to\":\"4\",\"weight\":0.8383497771952181,\"gater\":null},{\"from\":\"1\",\"to\":\"5\",\"weight\":-0.41278719733651026,\"gater\":null},{\"from\":\"1\",\"to\":\"6\",\"weight\":-0.9599631511320865,\"gater\":null},{\"from\":\"2\",\"to\":\"3\",\"weight\":-2.006718870730313,\"gater\":null},{\"from\":\"2\",\"to\":\"4\",\"weight\":-0.24623902413811963,\"gater\":null},{\"from\":\"2\",\"to\":\"5\",\"weight\":-0.07294215151508224,\"gater\":null},{\"from\":\"2\",\"to\":\"6\",\"weight\":-0.4408698788270223,\"gater\":null},{\"from\":\"3\",\"to\":\"7\",\"weight\":-1.0482693514372388,\"gater\":null},{\"from\":\"4\",\"to\":\"7\",\"weight\":1.9731384153235008,\"gater\":null},{\"from\":\"5\",\"to\":\"7\",\"weight\":5.232172235513767,\"gater\":null},{\"from\":\"6\",\"to\":\"7\",\"weight\":0.009656009528346443,\"gater\":null}]}]\n\\ No newline at end of file"
        }
      ]
    },
    "32a7b831fa1aa92743f21b8b3e134bcfd597466f": {
      "sha": "32a7b831fa1aa92743f21b8b3e134bcfd597466f",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6MzJhN2I4MzFmYTFhYTkyNzQzZjIxYjhiM2UxMzRiY2ZkNTk3NDY2Zg==",
      "commit": {
        "author": {
          "name": "Ivan Seidel",
          "email": "ivanseidel@gmail.com",
          "date": "2015-12-28T21:09:38Z"
        },
        "committer": {
          "name": "Ivan Seidel",
          "email": "ivanseidel@gmail.com",
          "date": "2015-12-28T21:09:38Z"
        },
        "message": "Add image and link to video.",
        "tree": {
          "sha": "cb46759893c4a317225f660b556d04101b633fe3",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/cb46759893c4a317225f660b556d04101b633fe3"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/32a7b831fa1aa92743f21b8b3e134bcfd597466f",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/32a7b831fa1aa92743f21b8b3e134bcfd597466f",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/32a7b831fa1aa92743f21b8b3e134bcfd597466f",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/32a7b831fa1aa92743f21b8b3e134bcfd597466f/comments",
      "author": {
        "login": "ivanseidel",
        "id": 3102127,
        "node_id": "MDQ6VXNlcjMxMDIxMjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3102127?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ivanseidel",
        "html_url": "https://github.com/ivanseidel",
        "followers_url": "https://api.github.com/users/ivanseidel/followers",
        "following_url": "https://api.github.com/users/ivanseidel/following{/other_user}",
        "gists_url": "https://api.github.com/users/ivanseidel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ivanseidel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ivanseidel/subscriptions",
        "organizations_url": "https://api.github.com/users/ivanseidel/orgs",
        "repos_url": "https://api.github.com/users/ivanseidel/repos",
        "events_url": "https://api.github.com/users/ivanseidel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ivanseidel/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "ivanseidel",
        "id": 3102127,
        "node_id": "MDQ6VXNlcjMxMDIxMjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3102127?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ivanseidel",
        "html_url": "https://github.com/ivanseidel",
        "followers_url": "https://api.github.com/users/ivanseidel/followers",
        "following_url": "https://api.github.com/users/ivanseidel/following{/other_user}",
        "gists_url": "https://api.github.com/users/ivanseidel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ivanseidel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ivanseidel/subscriptions",
        "organizations_url": "https://api.github.com/users/ivanseidel/orgs",
        "repos_url": "https://api.github.com/users/ivanseidel/repos",
        "events_url": "https://api.github.com/users/ivanseidel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ivanseidel/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "0616237fdeb774dfa1f0ce6e13661045592add5c",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/0616237fdeb774dfa1f0ce6e13661045592add5c",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/0616237fdeb774dfa1f0ce6e13661045592add5c"
        }
      ],
      "stats": { "total": 29, "additions": 29, "deletions": 0 },
      "files": [
        {
          "sha": "49e0df15c2ec153f724cc87194723c1c40bd431c",
          "filename": "README.md",
          "status": "modified",
          "additions": 29,
          "deletions": 0,
          "changes": 29,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/32a7b831fa1aa92743f21b8b3e134bcfd597466f/README.md",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/32a7b831fa1aa92743f21b8b3e134bcfd597466f/README.md",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/README.md?ref=32a7b831fa1aa92743f21b8b3e134bcfd597466f",
          "patch": "@@ -1,8 +1,12 @@\n # IAMDinosaur\n \n+![IAMDinosaur](https://raw.githubusercontent.com/ivanseidel/IAMDinosaur/master/assets/top_score.png)\n+\n A simple artificial intelligence to teach Google Chrome's offline dinosaur to\n jump cactus, using Neural Networks and a simple Genetic Algorithm.\n \n+**Watch** this video to see it in action, and learn how it works: [Artificial Inteligence with Google's Dinosaur](https://youtu.be/P7XHzqZjXQs)\n+\n ## Instalation\n \n 1. Install `Node.js` on your computer.\n@@ -75,8 +79,33 @@ There are a few files in the project:\n - `Learner.js`: It is the core implementation of the Genetic Algorithm. This is where\n   \"magic\" happens, by running generations, doing \"natural\" selection, cross-over, mutation...\n \n+\n+### How to: Load a genome\n+\n+1. Make sure Genome is inside `genomes` folder with a `.json` extension\n+2. Run the program\n+3. Click the list in the terminal\n+4. Navigate up/down to the wanted file\n+5. Press `enter` (then, to start, press `s`)\n+\n+\n+### Be aware of a game bug\n+\n+The dino game has a anoying bug: It starts to \"drift\" to the right with time\n+making the dino to be wrong offseted from the origin of the game. That, makes\n+the program to read the dino as a cactus, since it is the same color.\n+\n+You can fix that by continuously refreshing the page, or, by pasting this code inside the \n+console in the element inspector:\n+\n+```\n+// Make sure the dino does not drift to the right\n+setInterval(function (){Runner.instance_.tRex.xPos = 21}, 2000)\n+```\n+\n ## Credits\n \n - [Ivan Seidel](https://github.com/ivanseidel)\n - [JoÃ£o Pedro](https://github.com/joaopedrovbs)\n - [Tony Ngan](https://github.com/tngan) **The idea came from him**\n+"
        },
        {
          "sha": "9bb8cd0dd0ccd168403d84634196af0764433866",
          "filename": "assets/top_score.png",
          "status": "added",
          "additions": 0,
          "deletions": 0,
          "changes": 0,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/32a7b831fa1aa92743f21b8b3e134bcfd597466f/assets/top_score.png",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/32a7b831fa1aa92743f21b8b3e134bcfd597466f/assets/top_score.png",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/assets/top_score.png?ref=32a7b831fa1aa92743f21b8b3e134bcfd597466f"
        }
      ]
    },
    "0616237fdeb774dfa1f0ce6e13661045592add5c": {
      "sha": "0616237fdeb774dfa1f0ce6e13661045592add5c",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6MDYxNjIzN2ZkZWI3NzRkZmExZjBjZTZlMTM2NjEwNDU1OTJhZGQ1Yw==",
      "commit": {
        "author": {
          "name": "Ivan Seidel",
          "email": "ivanseidel@gmail.com",
          "date": "2015-12-28T11:56:09Z"
        },
        "committer": {
          "name": "Ivan Seidel",
          "email": "ivanseidel@gmail.com",
          "date": "2015-12-28T11:56:09Z"
        },
        "message": "Merge pull request #3 from rodrigoalviani/fix-save-path\n\nFix save path",
        "tree": {
          "sha": "e852298473dea1b5a4581eb9463344977efb81f7",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/e852298473dea1b5a4581eb9463344977efb81f7"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/0616237fdeb774dfa1f0ce6e13661045592add5c",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/0616237fdeb774dfa1f0ce6e13661045592add5c",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/0616237fdeb774dfa1f0ce6e13661045592add5c",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/0616237fdeb774dfa1f0ce6e13661045592add5c/comments",
      "author": {
        "login": "ivanseidel",
        "id": 3102127,
        "node_id": "MDQ6VXNlcjMxMDIxMjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3102127?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ivanseidel",
        "html_url": "https://github.com/ivanseidel",
        "followers_url": "https://api.github.com/users/ivanseidel/followers",
        "following_url": "https://api.github.com/users/ivanseidel/following{/other_user}",
        "gists_url": "https://api.github.com/users/ivanseidel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ivanseidel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ivanseidel/subscriptions",
        "organizations_url": "https://api.github.com/users/ivanseidel/orgs",
        "repos_url": "https://api.github.com/users/ivanseidel/repos",
        "events_url": "https://api.github.com/users/ivanseidel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ivanseidel/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "ivanseidel",
        "id": 3102127,
        "node_id": "MDQ6VXNlcjMxMDIxMjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3102127?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ivanseidel",
        "html_url": "https://github.com/ivanseidel",
        "followers_url": "https://api.github.com/users/ivanseidel/followers",
        "following_url": "https://api.github.com/users/ivanseidel/following{/other_user}",
        "gists_url": "https://api.github.com/users/ivanseidel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ivanseidel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ivanseidel/subscriptions",
        "organizations_url": "https://api.github.com/users/ivanseidel/orgs",
        "repos_url": "https://api.github.com/users/ivanseidel/repos",
        "events_url": "https://api.github.com/users/ivanseidel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ivanseidel/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "3189e376ec28de674a61261005b015d2dad45ec9",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/3189e376ec28de674a61261005b015d2dad45ec9",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/3189e376ec28de674a61261005b015d2dad45ec9"
        },
        {
          "sha": "1d4a508207377b770775e3407cbd0e129752163d",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/1d4a508207377b770775e3407cbd0e129752163d",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/1d4a508207377b770775e3407cbd0e129752163d"
        }
      ],
      "stats": { "total": 52, "additions": 26, "deletions": 26 },
      "files": [
        {
          "sha": "8f4dd5add49c8f19eada03d0b643caf62241a1e4",
          "filename": "UI.js",
          "status": "modified",
          "additions": 26,
          "deletions": 26,
          "changes": 52,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/0616237fdeb774dfa1f0ce6e13661045592add5c/UI.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/0616237fdeb774dfa1f0ce6e13661045592add5c/UI.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/UI.js?ref=0616237fdeb774dfa1f0ce6e13661045592add5c",
          "patch": "@@ -10,9 +10,9 @@ var screen = blessed.screen()\n var UI = {};\n \n \n-// \n+//\n // Initialize UI objects\n-// \n+//\n UI.init = function (gameManipulator, learner) {\n \tUI.gm = gameManipulator;\n \tUI.learner = learner;\n@@ -23,9 +23,9 @@ UI.init = function (gameManipulator, learner) {\n \t\tscreen: screen\n \t});\n \n-\t// \n+\t//\n \t// Build Sensor inputs\n-\t// \n+\t//\n \tUI.uiSensors = UI.grid.set(0, 0, 3, 6, contrib.bar, {\n \t\tlabel: 'Network Inputs',\n \t\t// bg: 'white',\n@@ -35,18 +35,18 @@ UI.init = function (gameManipulator, learner) {\n \t\tmaxHeight: 100,\n \t});\n \n-\t// \n+\t//\n \t// Build Log box\n-\t// \n+\t//\n \tUI.logger = UI.grid.set(3, 0, 3, 6, contrib.log, {\n \t\tfg: 'green',\n \t\tselectedFg: 'green',\n \t\tlabel: 'Logs'\n \t});\n \n-\t// \n+\t//\n \t// Current score/time view\n-\t// \n+\t//\n \tUI.uiScore = UI.grid.set(6, 0, 3, 3, blessed.Text, {\n \t\tlabel: 'Game Stats',\n \t\t// bg: 'green',\n@@ -55,9 +55,9 @@ UI.init = function (gameManipulator, learner) {\n \t\talign: 'center',\n \t});\n \n-\t// \n+\t//\n \t// Current Genomes stats\n-\t// \n+\t//\n \tUI.uiGenomes = UI.grid.set(6, 3, 3, 3, blessed.Text, {\n \t\tlabel: 'Genome Stats',\n \t\t// bg: 'green',\n@@ -67,9 +67,9 @@ UI.init = function (gameManipulator, learner) {\n \t});\n \n \n-\t// \n+\t//\n \t// Load Tree\n-\t// \n+\t//\n \tUI.savesTree = UI.grid.set(9, 0, 3, 3, contrib.tree, {\n \t\tlabel: 'Saved Genomes',\n \t});\n@@ -93,9 +93,9 @@ UI.init = function (gameManipulator, learner) {\n \n \tUI.refreshFiles();\n \n-\t// \n+\t//\n \t// Save Btn\n-\t// \n+\t//\n \tUI.btnSave = UI.grid.set(9, 3, 3, 3, blessed.box, {\n \t\tlabel: 'Save to File',\n \t\tbg: 'green',\n@@ -113,7 +113,7 @@ UI.init = function (gameManipulator, learner) {\n \n \t\tUI.logger.log('Saving '+jsonGenomes.length+' genomes...');\n \n-\t\tvar fileName = './genomes.gen_'+UI.learner.generation+'_'+Date.now()+'.json';\n+\t\tvar fileName = './genomes/gen_'+UI.learner.generation+'_'+Date.now()+'.json';\n \t\tfs.writeFile(fileName, JSON.stringify(jsonGenomes), function (err){\n \t\t\tif(err)\n \t\t\t\tUI.logger.log('Failed to save! '+err);\n@@ -145,12 +145,12 @@ UI.init = function (gameManipulator, learner) {\n };\n \n \n-// \n+//\n // Read entire folder and select files that match a .json file\n-// \n+//\n UI.refreshFiles = function (){\n \tvar files = [];\n-\tvar fileData = \n+\tvar fileData =\n \t{\n \t\tname: 'Saved Files',\n \t\textended: true,\n@@ -174,14 +174,14 @@ UI.refreshFiles = function (){\n \tUI.savesTree.setData(fileData);\n }\n \n-// \n+//\n // Updates data on the screen and render it\n-// \n+//\n UI.render = function () {\n \n-\t// \n+\t//\n \t// Update data\n-\t// \n+\t//\n \tUI.uiSensors.setData({\n \t\ttitles: ['Distance', 'Size', 'Speed', 'Activation'],\n \t\tdata: [\n@@ -192,9 +192,9 @@ UI.render = function () {\n \t\t]\n \t})\n \n-\t// \n+\t//\n \t// Set Genome stats and score\n-\t// \n+\t//\n \tvar learn = UI.learner;\n \tvar uiStats = 'Status: '+learn.state+'\\n';\n \tuiStats += 'Fitness: '+UI.gm.points+'\\nGameStatus: '+UI.gm.gamestate + '\\n';\n@@ -208,9 +208,9 @@ UI.render = function () {\n \t\tUI.uiGenomes.setText('Loading...');\n \t}\n \n-\t// \n+\t//\n \t// Render screen\n-\t// \n+\t//\n \tscreen.render();\n }\n "
        }
      ]
    },
    "3189e376ec28de674a61261005b015d2dad45ec9": {
      "sha": "3189e376ec28de674a61261005b015d2dad45ec9",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6MzE4OWUzNzZlYzI4ZGU2NzRhNjEyNjEwMDViMDE1ZDJkYWQ0NWVjOQ==",
      "commit": {
        "author": {
          "name": "Ivan Seidel",
          "email": "ivanseidel@gmail.com",
          "date": "2015-12-28T11:54:47Z"
        },
        "committer": {
          "name": "Ivan Seidel",
          "email": "ivanseidel@gmail.com",
          "date": "2015-12-28T11:54:47Z"
        },
        "message": "Merge pull request #2 from rodrigoalviani/master\n\nFix robotjs installation",
        "tree": {
          "sha": "fc61abc7136515002e82858e353f60b1df73eb63",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/fc61abc7136515002e82858e353f60b1df73eb63"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/3189e376ec28de674a61261005b015d2dad45ec9",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/3189e376ec28de674a61261005b015d2dad45ec9",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/3189e376ec28de674a61261005b015d2dad45ec9",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/3189e376ec28de674a61261005b015d2dad45ec9/comments",
      "author": {
        "login": "ivanseidel",
        "id": 3102127,
        "node_id": "MDQ6VXNlcjMxMDIxMjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3102127?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ivanseidel",
        "html_url": "https://github.com/ivanseidel",
        "followers_url": "https://api.github.com/users/ivanseidel/followers",
        "following_url": "https://api.github.com/users/ivanseidel/following{/other_user}",
        "gists_url": "https://api.github.com/users/ivanseidel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ivanseidel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ivanseidel/subscriptions",
        "organizations_url": "https://api.github.com/users/ivanseidel/orgs",
        "repos_url": "https://api.github.com/users/ivanseidel/repos",
        "events_url": "https://api.github.com/users/ivanseidel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ivanseidel/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "ivanseidel",
        "id": 3102127,
        "node_id": "MDQ6VXNlcjMxMDIxMjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3102127?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ivanseidel",
        "html_url": "https://github.com/ivanseidel",
        "followers_url": "https://api.github.com/users/ivanseidel/followers",
        "following_url": "https://api.github.com/users/ivanseidel/following{/other_user}",
        "gists_url": "https://api.github.com/users/ivanseidel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ivanseidel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ivanseidel/subscriptions",
        "organizations_url": "https://api.github.com/users/ivanseidel/orgs",
        "repos_url": "https://api.github.com/users/ivanseidel/repos",
        "events_url": "https://api.github.com/users/ivanseidel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ivanseidel/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "c003c1d87ed84784d2875441c7a3ba3b601395d5",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/c003c1d87ed84784d2875441c7a3ba3b601395d5",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/c003c1d87ed84784d2875441c7a3ba3b601395d5"
        },
        {
          "sha": "929c411ca499bbdd9e00c9a6c213d803f6c820b6",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/929c411ca499bbdd9e00c9a6c213d803f6c820b6",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/929c411ca499bbdd9e00c9a6c213d803f6c820b6"
        }
      ],
      "stats": { "total": 132, "additions": 66, "deletions": 66 },
      "files": [
        {
          "sha": "902cd5a2aa0a6af463f6ac76b97a4fcc327b69bd",
          "filename": "GameManipulator.js",
          "status": "modified",
          "additions": 37,
          "deletions": 37,
          "changes": 74,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/3189e376ec28de674a61261005b015d2dad45ec9/GameManipulator.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/3189e376ec28de674a61261005b015d2dad45ec9/GameManipulator.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/GameManipulator.js?ref=3189e376ec28de674a61261005b015d2dad45ec9",
          "patch": "@@ -2,14 +2,14 @@\n \tDeveloped by Ivan Seidel [https://github.com/ivanseidel]\n */\n \n-var robot = require('./robotjs');\n+var robot = require('robotjs');\n \n var scanner = require ('./scanner');\n var screenSize = robot.getScreenSize();\n \n-// \n+//\n // Color definitions\n-// \n+//\n \n // This is the Dino's colour, also used by Obstacles.\n var COLOR_DINOSAUR = \"535353\";\n@@ -28,20 +28,20 @@ var GameManipulator = {\n \tonGameStart: null,\n \tonSensorData: null,\n \n-\t// Game State\t\n+\t// Game State\n \tgamestate: 'OVER',\n \n \t// GameOver Position\n \tgameOverOffset: [190, -82],\n \n-\t// \n+\t//\n \t// Stores an array of \"sensors\" (Ray tracings)\n \t// Positions are always relative to global \"offset\"\n-\t// \n+\t//\n \tsensors: [\n \t\t{\n \t\t\tlastValue: 1,\n-\t\t\t\n+\n \t\t\tvalue: null,\n \t\t\toffset: [84, -15], // 64,-15\n \t\t\tstep: [4, 0],\n@@ -68,9 +68,9 @@ var GameManipulator = {\n };\n \n \n-// \n+//\n // Find out dinosaur (fast)\n-// \n+//\n GameManipulator.findGamePosition = function () {\n \tvar pos, dinoPos, skipXFast = 15;\n \n@@ -147,10 +147,10 @@ GameManipulator.findGamePosition = function () {\n };\n \n \n-// \n+//\n // Read Game state\n // (If game is ended or is playing)\n-// \n+//\n GameManipulator.readGameState = function () {\n \t// Read GameOver\n \tvar found = scanner.scanUntil(\n@@ -170,7 +170,7 @@ GameManipulator.readGameState = function () {\n \t\t// Trigger callback and clear\n \t\tGameManipulator.onGameEnd && GameManipulator.onGameEnd(GameManipulator.points);\n \t\tGameManipulator.onGameEnd = null;\n-\t\t\n+\n \t\t// console.log('GAME OVER: '+GameManipulator.points);\n \n \t}else if(!found && GameManipulator.gamestate != 'PLAYING'){\n@@ -203,14 +203,14 @@ GameManipulator.readGameState = function () {\n }\n \n \n-// \n+//\n // Call this to start a fresh new game\n-// Will wait untill game has ended, \n+// Will wait untill game has ended,\n // and call the `next` callback\n-// \n+//\n var _startKeyInterval;\n GameManipulator.startNewGame = function (next) {\n-\t\n+\n \t// Refresh state\n \tGameManipulator.readGameState();\n \n@@ -243,13 +243,13 @@ GameManipulator.startNewGame = function (next) {\n }\n \n \n-// \n+//\n // Compute points based on sensors\n-// \n+//\n // Basicaly, checks if an object has\n // passed trough the sensor and the\n // value is now higher than before\n-// \n+//\n GameManipulator.computePoints = function () {\n \tfor(var k in GameManipulator.sensors){\n \t\tvar sensor = GameManipulator.sensors[k];\n@@ -262,19 +262,19 @@ GameManipulator.computePoints = function () {\n }\n \n \n-// \n+//\n // Read sensors\n-// \n-// Sensors are like ray-traces: \n+//\n+// Sensors are like ray-traces:\n //   They have a starting point,\n //   and a limit to search for.\n-// \n+//\n // Each sensor can gatter data about\n // the DISTANCE of the object, it's\n // SIZE and it's speed\n-// \n+//\n // Note: We currently only have a sensor.\n-// \n+//\n GameManipulator.readSensors = function () {\n \tvar offset = GameManipulator.offset;\n \n@@ -313,9 +313,9 @@ GameManipulator.readSensors = function () {\n \t\tif(end){\n \t\t\tsensor.value = (end[0] - start[0]) / (GameManipulator.width * sensor.length);\n \n-\t\t\t// \n+\t\t\t//\n \t\t\t// Calculate size of obstacle\n-\t\t\t// \n+\t\t\t//\n \t\t\tvar endPoint = scanner.scanUntil(\n \t\t\t\t[end[0] + 75, end[1]],\n \t\t\t\t[-2, 0],\n@@ -354,7 +354,7 @@ GameManipulator.readSensors = function () {\n \t\tif(sensor.value < sensor.lastValue){\n \t\t\t// Compute speed\n \t\t\tvar newSpeed = (sensor.lastValue - sensor.value) / dt;\n-\t\t\t\n+\n \t\t\tsensor.lastSpeeds.unshift(newSpeed);\n \n \t\t\twhile(sensor.lastSpeeds.length > 10)\n@@ -366,7 +366,7 @@ GameManipulator.readSensors = function () {\n \t\t\t\tavgSpeed += sensor.lastSpeeds[k] / sensor.lastSpeeds.length;\n \n \t\t\tsensor.speed = Math.max(avgSpeed - 1.5, sensor.speed);\n-\t\t\t\n+\n \t\t}\n \n \t\tsensor.size = Math.min(sensor.size, 1.0);\n@@ -385,13 +385,13 @@ GameManipulator.readSensors = function () {\n }\n \n \n-// \n+//\n // Set action to game\n-// Values: \n+// Values:\n //  0.0 to  0.4: DOWN\n //  0.4 to  0.6: NOTHING\n //  0.6 to  1.0: UP (JUMP)\n-// \n+//\n var PRESS = 'down';\n var RELEASE = 'up';\n GameManipulator.lastOutputSet = 'NONE';\n@@ -430,24 +430,24 @@ GameManipulator.setGameOutput = function (output){\n \tGameManipulator.lastOutputSet = GameManipulator.gameOutputString;\n }\n \n-// \n+//\n // Simply maps an real number to string actions\n-// \n+//\n GameManipulator.getDiscreteState = function (value){\n \tif(value < 0.45){\n \t\treturn 'DOWN'\n \t}else if(value > 0.55){\n \t\treturn 'JUMP';\n \t}\n-\t\n+\n \treturn 'NORM';\n }\n \n \n-// \n+//\n // Click on the Starting point\n // to make sure game is focused\n-// \n+//\n GameManipulator.focusGame = function (){\n \trobot.moveMouse(GameManipulator.offset[0], GameManipulator.offset[1]);\n \trobot.mouseClick(\"left\");"
        },
        {
          "sha": "8250059f74bfb6f8227a68d3014864d6f6561a05",
          "filename": "index.js",
          "status": "modified",
          "additions": 17,
          "deletions": 17,
          "changes": 34,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/3189e376ec28de674a61261005b015d2dad45ec9/index.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/3189e376ec28de674a61261005b015d2dad45ec9/index.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/index.js?ref=3189e376ec28de674a61261005b015d2dad45ec9",
          "patch": "@@ -3,30 +3,30 @@\n */\n \n var UI = require('./UI');\n-var robot = require('./robotjs');\n+var robot = require('robotjs');\n var Learner = require('./Learner');\n var scanner = require('./scanner');\n var GameManipulator = require('./GameManipulator');\n \n-// \n+//\n // Configure Robotjs\n-// \n+//\n robot.setMouseDelay(1);\n \n \n-// \n+//\n // Initialize Game\n-// \n+//\n GameManipulator.findGamePosition();\n \n \n-// \n+//\n // Check for found game\n-// \n+//\n if(GameManipulator.offset){\n \t// Uncomment this line to debug the\n \t// starting point (Check if it's detecting it correcly)\n-\t\n+\n \t// robot.moveMouse(GameManipulator.offset[0]+GameManipulator.sensors[0].offset[0],\n \t// \t\tGameManipulator.offset[1] + GameManipulator.sensors[0].offset[1]);\n \n@@ -37,27 +37,27 @@ if(GameManipulator.offset){\n }\n \n \n-// \n+//\n // Initialize UI\n-// \n+//\n UI.init(GameManipulator, Learner);\n \n-// \n+//\n // Init Learner\n-// \n+//\n Learner.init(GameManipulator, UI, 12, 4, 0.2);\n \n \n-// \n+//\n // Start reading game state and sensors\n-// \n+//\n setInterval(GameManipulator.readSensors, 40);\n setInterval(GameManipulator.readGameState, 200);\n \n \n-// \n+//\n // Start game (Example of API usage)\n-// \n+//\n /*\n function startGame () {\n \tvar game = Math.round(Math.random() * 100);\n@@ -71,6 +71,6 @@ function startGame () {\n \n \t\t\tstartGame();\n \t\t}\n-\t});\t\n+\t});\n }\n */\n\\ No newline at end of file"
        },
        {
          "sha": "238abcd0506bc19ca2df1f1de4c2be149ce28c14",
          "filename": "package.json",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "changes": 2,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/3189e376ec28de674a61261005b015d2dad45ec9/package.json",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/3189e376ec28de674a61261005b015d2dad45ec9/package.json",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/package.json?ref=3189e376ec28de674a61261005b015d2dad45ec9",
          "patch": "@@ -13,7 +13,7 @@\n     \"blessed\": \"^0.1.81\",\n     \"blessed-contrib\": \"^2.5.2\",\n     \"lodash\": \"^3.10.1\",\n-    \"robotjs\": \"file:robotjs\",\n+    \"robotjs\": \"^0.3.6\",\n     \"synaptic\": \"^1.0.2\"\n   }\n }"
        },
        {
          "sha": "e1ae1ccfe6ab676a30e32e089df6b48b231cf738",
          "filename": "scanner.js",
          "status": "modified",
          "additions": 11,
          "deletions": 11,
          "changes": 22,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/3189e376ec28de674a61261005b015d2dad45ec9/scanner.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/3189e376ec28de674a61261005b015d2dad45ec9/scanner.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/scanner.js?ref=3189e376ec28de674a61261005b015d2dad45ec9",
          "patch": "@@ -3,7 +3,7 @@\n */\n \n // External Modules\n-var robot = require('./robotjs');\n+var robot = require('robotjs');\n var screenSize = robot.getScreenSize();\n \n // Indexes\n@@ -13,29 +13,29 @@ var Y = 1;\n // Create the \"class\" wrapper\n var scanner = {};\n \n-// \n+//\n // Check if the given position is outside the Screen\n-// \n+//\n scanner.isOutOfBound = function (pos) {\n \tif( pos[X] < 0 || pos[Y] < 0 ||\n \t\tpos[X] >= screenSize.width ||\n \t\tpos[Y] >= screenSize.height)\n \t\treturn true;\n \n-\treturn false;\t\t\n+\treturn false;\n }\n \n-// \n+//\n // Limits the x/y values of position to fit the screen\n-// \n+//\n scanner.makeInBounds = function (pos) {\n-\t\n+\n \tif(pos[X] < 0)\n \t\tpos[X] = 0;\n \n \tif(pos[X] >= screenSize.width)\n \t\tpos[X] = screenSize.width - 1;\n-\t\n+\n \tif(pos[Y] < 0)\n \t\tpos[Y] = 0;\n \n@@ -49,11 +49,11 @@ scanner.makeInBounds = function (pos) {\n \tGiven start [X, Y], and a DELTA [dX, dY],\n \tmaps from \"start\", adding \"delta\" to position,\n \tuntil \"matchinColor\" is found OR isOutOfBounds.\n-\t\n+\n \tIf iterations reach > iterLimit:\n \t\treturns null;\n \n-\tif isOutOfBounds: \n+\tif isOutOfBounds:\n \t\treturns null\n \n \totherwise:\n@@ -78,7 +78,7 @@ scanner.scanUntil = function (start, delta, matchingColor, invertMatch, iterLimi\n \n \t\tif(!invertMatch && color.toString() == matchingColor)\n \t\t\treturn current;\n-\t\t\n+\n \t\tif(invertMatch && color.toString() != matchingColor)\n \t\t\treturn current;\n "
        }
      ]
    },
    "c003c1d87ed84784d2875441c7a3ba3b601395d5": {
      "sha": "c003c1d87ed84784d2875441c7a3ba3b601395d5",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6YzAwM2MxZDg3ZWQ4NDc4NGQyODc1NDQxYzdhM2JhM2I2MDEzOTVkNQ==",
      "commit": {
        "author": {
          "name": "Ivan Seidel",
          "email": "ivanseidel@gmail.com",
          "date": "2015-12-28T09:02:20Z"
        },
        "committer": {
          "name": "Ivan Seidel",
          "email": "ivanseidel@gmail.com",
          "date": "2015-12-28T09:02:20Z"
        },
        "message": "Merge pull request #1 from octalmage/patch-1\n\nCorrected spelling of intelligence.",
        "tree": {
          "sha": "2b5b2f8e5ff5244e8c83562572494393459bd825",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/2b5b2f8e5ff5244e8c83562572494393459bd825"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/c003c1d87ed84784d2875441c7a3ba3b601395d5",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/c003c1d87ed84784d2875441c7a3ba3b601395d5",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/c003c1d87ed84784d2875441c7a3ba3b601395d5",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/c003c1d87ed84784d2875441c7a3ba3b601395d5/comments",
      "author": {
        "login": "ivanseidel",
        "id": 3102127,
        "node_id": "MDQ6VXNlcjMxMDIxMjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3102127?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ivanseidel",
        "html_url": "https://github.com/ivanseidel",
        "followers_url": "https://api.github.com/users/ivanseidel/followers",
        "following_url": "https://api.github.com/users/ivanseidel/following{/other_user}",
        "gists_url": "https://api.github.com/users/ivanseidel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ivanseidel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ivanseidel/subscriptions",
        "organizations_url": "https://api.github.com/users/ivanseidel/orgs",
        "repos_url": "https://api.github.com/users/ivanseidel/repos",
        "events_url": "https://api.github.com/users/ivanseidel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ivanseidel/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "ivanseidel",
        "id": 3102127,
        "node_id": "MDQ6VXNlcjMxMDIxMjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3102127?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ivanseidel",
        "html_url": "https://github.com/ivanseidel",
        "followers_url": "https://api.github.com/users/ivanseidel/followers",
        "following_url": "https://api.github.com/users/ivanseidel/following{/other_user}",
        "gists_url": "https://api.github.com/users/ivanseidel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ivanseidel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ivanseidel/subscriptions",
        "organizations_url": "https://api.github.com/users/ivanseidel/orgs",
        "repos_url": "https://api.github.com/users/ivanseidel/repos",
        "events_url": "https://api.github.com/users/ivanseidel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ivanseidel/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "826383dadc1f00a96d2d2e04e099218087f4cf16",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/826383dadc1f00a96d2d2e04e099218087f4cf16",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/826383dadc1f00a96d2d2e04e099218087f4cf16"
        },
        {
          "sha": "977be983f9ea2d412d28ae0844dc9996a196589d",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/977be983f9ea2d412d28ae0844dc9996a196589d",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/977be983f9ea2d412d28ae0844dc9996a196589d"
        }
      ],
      "stats": { "total": 4, "additions": 2, "deletions": 2 },
      "files": [
        {
          "sha": "d54b3f9f44c5869935ec416bfd1b77703493222e",
          "filename": "README.md",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "changes": 4,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/c003c1d87ed84784d2875441c7a3ba3b601395d5/README.md",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/c003c1d87ed84784d2875441c7a3ba3b601395d5/README.md",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/README.md?ref=c003c1d87ed84784d2875441c7a3ba3b601395d5",
          "patch": "@@ -1,6 +1,6 @@\n # IAMDinosaur\n \n-A simple artificial inteligence to teach Google Chrome's offline dinosaur to\n+A simple artificial intelligence to teach Google Chrome's offline dinosaur to\n jump cactus, using Neural Networks and a simple Genetic Algorithm.\n \n ## Instalation\n@@ -79,4 +79,4 @@ There are a few files in the project:\n \n - [Ivan Seidel](https://github.com/ivanseidel)\n - [JoÃ£o Pedro](https://github.com/joaopedrovbs)\n-- [Tony Ngan](https://github.com/tngan) **The idea came from him**\n\\ No newline at end of file\n+- [Tony Ngan](https://github.com/tngan) **The idea came from him**"
        }
      ]
    },
    "826383dadc1f00a96d2d2e04e099218087f4cf16": {
      "sha": "826383dadc1f00a96d2d2e04e099218087f4cf16",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6ODI2MzgzZGFkYzFmMDBhOTZkMmQyZTA0ZTA5OTIxODA4N2Y0Y2YxNg==",
      "commit": {
        "author": {
          "name": "Ivan Seidel",
          "email": "ivanseidel@gmail.com",
          "date": "2015-12-28T04:11:12Z"
        },
        "committer": {
          "name": "Ivan Seidel",
          "email": "ivanseidel@gmail.com",
          "date": "2015-12-28T04:11:12Z"
        },
        "message": "Change name",
        "tree": {
          "sha": "9f6a260a6ff6b1d62647b0c3deab37e62c6417a4",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/9f6a260a6ff6b1d62647b0c3deab37e62c6417a4"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/826383dadc1f00a96d2d2e04e099218087f4cf16",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/826383dadc1f00a96d2d2e04e099218087f4cf16",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/826383dadc1f00a96d2d2e04e099218087f4cf16",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/826383dadc1f00a96d2d2e04e099218087f4cf16/comments",
      "author": {
        "login": "ivanseidel",
        "id": 3102127,
        "node_id": "MDQ6VXNlcjMxMDIxMjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3102127?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ivanseidel",
        "html_url": "https://github.com/ivanseidel",
        "followers_url": "https://api.github.com/users/ivanseidel/followers",
        "following_url": "https://api.github.com/users/ivanseidel/following{/other_user}",
        "gists_url": "https://api.github.com/users/ivanseidel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ivanseidel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ivanseidel/subscriptions",
        "organizations_url": "https://api.github.com/users/ivanseidel/orgs",
        "repos_url": "https://api.github.com/users/ivanseidel/repos",
        "events_url": "https://api.github.com/users/ivanseidel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ivanseidel/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "ivanseidel",
        "id": 3102127,
        "node_id": "MDQ6VXNlcjMxMDIxMjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3102127?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ivanseidel",
        "html_url": "https://github.com/ivanseidel",
        "followers_url": "https://api.github.com/users/ivanseidel/followers",
        "following_url": "https://api.github.com/users/ivanseidel/following{/other_user}",
        "gists_url": "https://api.github.com/users/ivanseidel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ivanseidel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ivanseidel/subscriptions",
        "organizations_url": "https://api.github.com/users/ivanseidel/orgs",
        "repos_url": "https://api.github.com/users/ivanseidel/repos",
        "events_url": "https://api.github.com/users/ivanseidel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ivanseidel/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "96dce7e887d9e6f712b4fdc342c45ae9918a65d0",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/96dce7e887d9e6f712b4fdc342c45ae9918a65d0",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/96dce7e887d9e6f712b4fdc342c45ae9918a65d0"
        }
      ],
      "stats": { "total": 2, "additions": 1, "deletions": 1 },
      "files": [
        {
          "sha": "60392b31c058936d0c06ff7871f7d3e0d396ae29",
          "filename": "LICENSE",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "changes": 2,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/826383dadc1f00a96d2d2e04e099218087f4cf16/LICENSE",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/826383dadc1f00a96d2d2e04e099218087f4cf16/LICENSE",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/LICENSE?ref=826383dadc1f00a96d2d2e04e099218087f4cf16",
          "patch": "@@ -1,6 +1,6 @@\n The MIT License (MIT)\n \n-Copyright (c) 2016 ivanseidel\n+Copyright (c) 2016 Ivan Seidel\n \n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal"
        }
      ]
    },
    "96dce7e887d9e6f712b4fdc342c45ae9918a65d0": {
      "sha": "96dce7e887d9e6f712b4fdc342c45ae9918a65d0",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6OTZkY2U3ZTg4N2Q5ZTZmNzEyYjRmZGMzNDJjNDVhZTk5MThhNjVkMA==",
      "commit": {
        "author": {
          "name": "Ivan Seidel",
          "email": "ivanseidel@gmail.com",
          "date": "2015-12-28T04:07:38Z"
        },
        "committer": {
          "name": "Ivan Seidel",
          "email": "ivanseidel@gmail.com",
          "date": "2015-12-28T04:07:38Z"
        },
        "message": "Added License",
        "tree": {
          "sha": "d04b0aaaa2f56b06347d23811cc3b661127b8f49",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/d04b0aaaa2f56b06347d23811cc3b661127b8f49"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/96dce7e887d9e6f712b4fdc342c45ae9918a65d0",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/96dce7e887d9e6f712b4fdc342c45ae9918a65d0",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/96dce7e887d9e6f712b4fdc342c45ae9918a65d0",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/96dce7e887d9e6f712b4fdc342c45ae9918a65d0/comments",
      "author": {
        "login": "ivanseidel",
        "id": 3102127,
        "node_id": "MDQ6VXNlcjMxMDIxMjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3102127?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ivanseidel",
        "html_url": "https://github.com/ivanseidel",
        "followers_url": "https://api.github.com/users/ivanseidel/followers",
        "following_url": "https://api.github.com/users/ivanseidel/following{/other_user}",
        "gists_url": "https://api.github.com/users/ivanseidel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ivanseidel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ivanseidel/subscriptions",
        "organizations_url": "https://api.github.com/users/ivanseidel/orgs",
        "repos_url": "https://api.github.com/users/ivanseidel/repos",
        "events_url": "https://api.github.com/users/ivanseidel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ivanseidel/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "ivanseidel",
        "id": 3102127,
        "node_id": "MDQ6VXNlcjMxMDIxMjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3102127?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ivanseidel",
        "html_url": "https://github.com/ivanseidel",
        "followers_url": "https://api.github.com/users/ivanseidel/followers",
        "following_url": "https://api.github.com/users/ivanseidel/following{/other_user}",
        "gists_url": "https://api.github.com/users/ivanseidel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ivanseidel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ivanseidel/subscriptions",
        "organizations_url": "https://api.github.com/users/ivanseidel/orgs",
        "repos_url": "https://api.github.com/users/ivanseidel/repos",
        "events_url": "https://api.github.com/users/ivanseidel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ivanseidel/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "19dd61aed7ab0df67c880dbf0dd07e5a11614f2a",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/19dd61aed7ab0df67c880dbf0dd07e5a11614f2a",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/19dd61aed7ab0df67c880dbf0dd07e5a11614f2a"
        }
      ],
      "stats": { "total": 52, "additions": 47, "deletions": 5 },
      "files": [
        {
          "sha": "85f58154662b90be9d89dcc45308c1d1d05762dc",
          "filename": "GameManipulator.js",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "changes": 4,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/96dce7e887d9e6f712b4fdc342c45ae9918a65d0/GameManipulator.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/96dce7e887d9e6f712b4fdc342c45ae9918a65d0/GameManipulator.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/GameManipulator.js?ref=96dce7e887d9e6f712b4fdc342c45ae9918a65d0",
          "patch": "@@ -1,3 +1,7 @@\n+/*\n+\tDeveloped by Ivan Seidel [https://github.com/ivanseidel]\n+*/\n+\n var robot = require('./robotjs');\n \n var scanner = require ('./scanner');"
        },
        {
          "sha": "030967fd0e1b1b22d4e64ffea9569697f2cd487a",
          "filename": "LICENSE",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "changes": 21,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/96dce7e887d9e6f712b4fdc342c45ae9918a65d0/LICENSE",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/96dce7e887d9e6f712b4fdc342c45ae9918a65d0/LICENSE",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/LICENSE?ref=96dce7e887d9e6f712b4fdc342c45ae9918a65d0",
          "patch": "@@ -0,0 +1,21 @@\n+The MIT License (MIT)\n+\n+Copyright (c) 2016 ivanseidel\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy\n+of this software and associated documentation files (the \"Software\"), to deal\n+in the Software without restriction, including without limitation the rights\n+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+copies of the Software, and to permit persons to whom the Software is\n+furnished to do so, subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in all\n+copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+SOFTWARE.\n\\ No newline at end of file"
        },
        {
          "sha": "0f610a225c4b10ab6726f3331b5a7e49563f4ddf",
          "filename": "Learner.js",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "changes": 4,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/96dce7e887d9e6f712b4fdc342c45ae9918a65d0/Learner.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/96dce7e887d9e6f712b4fdc342c45ae9918a65d0/Learner.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/Learner.js?ref=96dce7e887d9e6f712b4fdc342c45ae9918a65d0",
          "patch": "@@ -1,3 +1,7 @@\n+/*\n+\tDeveloped by Ivan Seidel [https://github.com/ivanseidel]\n+*/\n+\n var _ = require('lodash');\n var async = require('async');\n var synaptic = require('synaptic');"
        },
        {
          "sha": "f7a57f26b402e93cacb400d5e07f2e91f825195a",
          "filename": "README.md",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "changes": 5,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/96dce7e887d9e6f712b4fdc342c45ae9918a65d0/README.md",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/96dce7e887d9e6f712b4fdc342c45ae9918a65d0/README.md",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/README.md?ref=96dce7e887d9e6f712b4fdc342c45ae9918a65d0",
          "patch": "@@ -77,5 +77,6 @@ There are a few files in the project:\n \n ## Credits\n \n-- [Tony Ngan](https://github.com/tngan) **The idea came from him**\n-- [JoÃ£o Pedro](https://github.com/joaopedrovbs)\n\\ No newline at end of file\n+- [Ivan Seidel](https://github.com/ivanseidel)\n+- [JoÃ£o Pedro](https://github.com/joaopedrovbs)\n+- [Tony Ngan](https://github.com/tngan) **The idea came from him**\n\\ No newline at end of file"
        },
        {
          "sha": "5ed6ca24fd95e158fa85079231a5944e6fec07d5",
          "filename": "UI.js",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "changes": 4,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/96dce7e887d9e6f712b4fdc342c45ae9918a65d0/UI.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/96dce7e887d9e6f712b4fdc342c45ae9918a65d0/UI.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/UI.js?ref=96dce7e887d9e6f712b4fdc342c45ae9918a65d0",
          "patch": "@@ -1,3 +1,7 @@\n+/*\n+\tDeveloped by Ivan Seidel [https://github.com/ivanseidel]\n+*/\n+\n var fs = require('fs');\n var blessed = require('blessed')\n var contrib = require('blessed-contrib')"
        },
        {
          "sha": "bd2c25c09142102880e36bb0365d351ca60a3012",
          "filename": "index.js",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "changes": 4,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/96dce7e887d9e6f712b4fdc342c45ae9918a65d0/index.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/96dce7e887d9e6f712b4fdc342c45ae9918a65d0/index.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/index.js?ref=96dce7e887d9e6f712b4fdc342c45ae9918a65d0",
          "patch": "@@ -1,3 +1,7 @@\n+/*\n+\tDeveloped by Ivan Seidel [https://github.com/ivanseidel]\n+*/\n+\n var UI = require('./UI');\n var robot = require('./robotjs');\n var Learner = require('./Learner');"
        },
        {
          "sha": "ffa67af36ca5aa8af17a1f064adb9c59bc704878",
          "filename": "package.json",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "changes": 6,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/96dce7e887d9e6f712b4fdc342c45ae9918a65d0/package.json",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/96dce7e887d9e6f712b4fdc342c45ae9918a65d0/package.json",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/package.json?ref=96dce7e887d9e6f712b4fdc342c45ae9918a65d0",
          "patch": "@@ -1,13 +1,13 @@\n {\n   \"name\": \"iamdinosaur\",\n   \"version\": \"1.0.0\",\n-  \"description\": \"\",\n+  \"description\": \"A simple artificial inteligence to teach Google's Dinosaur to jump cactus\",\n   \"main\": \"index.js\",\n   \"scripts\": {\n     \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n   },\n-  \"author\": \"\",\n-  \"license\": \"ISC\",\n+  \"author\": \"Ivan Seidel\",\n+  \"license\": \"MIT\",\n   \"dependencies\": {\n     \"async\": \"^1.5.0\",\n     \"blessed\": \"^0.1.81\","
        },
        {
          "sha": "7bdbf16188544eea16a9e7e90c482eb86a15523a",
          "filename": "scanner.js",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "changes": 4,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/96dce7e887d9e6f712b4fdc342c45ae9918a65d0/scanner.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/96dce7e887d9e6f712b4fdc342c45ae9918a65d0/scanner.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/scanner.js?ref=96dce7e887d9e6f712b4fdc342c45ae9918a65d0",
          "patch": "@@ -1,3 +1,7 @@\n+/*\n+\tDeveloped by Ivan Seidel [https://github.com/ivanseidel]\n+*/\n+\n // External Modules\n var robot = require('./robotjs');\n var screenSize = robot.getScreenSize();"
        }
      ]
    },
    "19dd61aed7ab0df67c880dbf0dd07e5a11614f2a": {
      "sha": "19dd61aed7ab0df67c880dbf0dd07e5a11614f2a",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6MTlkZDYxYWVkN2FiMGRmNjdjODgwZGJmMGRkMDdlNWExMTYxNGYyYQ==",
      "commit": {
        "author": {
          "name": "Ivan Seidel",
          "email": "ivanseidel@gmail.com",
          "date": "2015-12-27T21:20:03Z"
        },
        "committer": {
          "name": "Ivan Seidel",
          "email": "ivanseidel@gmail.com",
          "date": "2015-12-27T21:20:03Z"
        },
        "message": "typo fix",
        "tree": {
          "sha": "ac691229cb6323c5af379252fe1f39a4ce1e1bc1",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/ac691229cb6323c5af379252fe1f39a4ce1e1bc1"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/19dd61aed7ab0df67c880dbf0dd07e5a11614f2a",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/19dd61aed7ab0df67c880dbf0dd07e5a11614f2a",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/19dd61aed7ab0df67c880dbf0dd07e5a11614f2a",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/19dd61aed7ab0df67c880dbf0dd07e5a11614f2a/comments",
      "author": {
        "login": "ivanseidel",
        "id": 3102127,
        "node_id": "MDQ6VXNlcjMxMDIxMjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3102127?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ivanseidel",
        "html_url": "https://github.com/ivanseidel",
        "followers_url": "https://api.github.com/users/ivanseidel/followers",
        "following_url": "https://api.github.com/users/ivanseidel/following{/other_user}",
        "gists_url": "https://api.github.com/users/ivanseidel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ivanseidel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ivanseidel/subscriptions",
        "organizations_url": "https://api.github.com/users/ivanseidel/orgs",
        "repos_url": "https://api.github.com/users/ivanseidel/repos",
        "events_url": "https://api.github.com/users/ivanseidel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ivanseidel/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "ivanseidel",
        "id": 3102127,
        "node_id": "MDQ6VXNlcjMxMDIxMjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3102127?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ivanseidel",
        "html_url": "https://github.com/ivanseidel",
        "followers_url": "https://api.github.com/users/ivanseidel/followers",
        "following_url": "https://api.github.com/users/ivanseidel/following{/other_user}",
        "gists_url": "https://api.github.com/users/ivanseidel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ivanseidel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ivanseidel/subscriptions",
        "organizations_url": "https://api.github.com/users/ivanseidel/orgs",
        "repos_url": "https://api.github.com/users/ivanseidel/repos",
        "events_url": "https://api.github.com/users/ivanseidel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ivanseidel/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "2e74f810921f149de1738691d3d6fd3fe4cb7025",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/2e74f810921f149de1738691d3d6fd3fe4cb7025",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/2e74f810921f149de1738691d3d6fd3fe4cb7025"
        }
      ],
      "stats": { "total": 2, "additions": 1, "deletions": 1 },
      "files": [
        {
          "sha": "cd5efca2bc094195949922f53eded9e918d24c6a",
          "filename": "README.md",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "changes": 2,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/19dd61aed7ab0df67c880dbf0dd07e5a11614f2a/README.md",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/19dd61aed7ab0df67c880dbf0dd07e5a11614f2a/README.md",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/README.md?ref=19dd61aed7ab0df67c880dbf0dd07e5a11614f2a",
          "patch": "@@ -1,6 +1,6 @@\n # IAMDinosaur\n \n-An simpler artificial inteligence to teach Google Chrome's offline dinosaur to\n+A simple artificial inteligence to teach Google Chrome's offline dinosaur to\n jump cactus, using Neural Networks and a simple Genetic Algorithm.\n \n ## Instalation"
        }
      ]
    },
    "2e74f810921f149de1738691d3d6fd3fe4cb7025": {
      "sha": "2e74f810921f149de1738691d3d6fd3fe4cb7025",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6MmU3NGY4MTA5MjFmMTQ5ZGUxNzM4NjkxZDNkNmZkM2ZlNGNiNzAyNQ==",
      "commit": {
        "author": {
          "name": "Ivan Seidel",
          "email": "ivanseidel@gmail.com",
          "date": "2015-12-27T21:18:43Z"
        },
        "committer": {
          "name": "Ivan Seidel",
          "email": "ivanseidel@gmail.com",
          "date": "2015-12-27T21:18:43Z"
        },
        "message": "Initial release",
        "tree": {
          "sha": "bd9bb0c25d50ccb0af85d76f200a43e99d04afe3",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/bd9bb0c25d50ccb0af85d76f200a43e99d04afe3"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/2e74f810921f149de1738691d3d6fd3fe4cb7025",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/2e74f810921f149de1738691d3d6fd3fe4cb7025",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/2e74f810921f149de1738691d3d6fd3fe4cb7025",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/2e74f810921f149de1738691d3d6fd3fe4cb7025/comments",
      "author": {
        "login": "ivanseidel",
        "id": 3102127,
        "node_id": "MDQ6VXNlcjMxMDIxMjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3102127?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ivanseidel",
        "html_url": "https://github.com/ivanseidel",
        "followers_url": "https://api.github.com/users/ivanseidel/followers",
        "following_url": "https://api.github.com/users/ivanseidel/following{/other_user}",
        "gists_url": "https://api.github.com/users/ivanseidel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ivanseidel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ivanseidel/subscriptions",
        "organizations_url": "https://api.github.com/users/ivanseidel/orgs",
        "repos_url": "https://api.github.com/users/ivanseidel/repos",
        "events_url": "https://api.github.com/users/ivanseidel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ivanseidel/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "ivanseidel",
        "id": 3102127,
        "node_id": "MDQ6VXNlcjMxMDIxMjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3102127?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ivanseidel",
        "html_url": "https://github.com/ivanseidel",
        "followers_url": "https://api.github.com/users/ivanseidel/followers",
        "following_url": "https://api.github.com/users/ivanseidel/following{/other_user}",
        "gists_url": "https://api.github.com/users/ivanseidel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ivanseidel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ivanseidel/subscriptions",
        "organizations_url": "https://api.github.com/users/ivanseidel/orgs",
        "repos_url": "https://api.github.com/users/ivanseidel/repos",
        "events_url": "https://api.github.com/users/ivanseidel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ivanseidel/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [],
      "stats": { "total": 1270, "additions": 1270, "deletions": 0 },
      "files": [
        {
          "sha": "454b213c8c5504c08376f42e599e244c0df04176",
          "filename": ".gitignore",
          "status": "added",
          "additions": 11,
          "deletions": 0,
          "changes": 11,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/2e74f810921f149de1738691d3d6fd3fe4cb7025/.gitignore",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/2e74f810921f149de1738691d3d6fd3fe4cb7025/.gitignore",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/.gitignore?ref=2e74f810921f149de1738691d3d6fd3fe4cb7025",
          "patch": "@@ -0,0 +1,11 @@\n+# Logs\n+logs\n+*.log\n+\n+# Dependency directory\n+node_modules\n+robotjs\n+\n+# Saved files\n+genomes/*\n+!genomes/.gitkeep\n\\ No newline at end of file"
        },
        {
          "sha": "791f7f3fed2f4fceb2a44ebe65333d0c6bb07270",
          "filename": "GameManipulator.js",
          "status": "added",
          "additions": 452,
          "deletions": 0,
          "changes": 452,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/2e74f810921f149de1738691d3d6fd3fe4cb7025/GameManipulator.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/2e74f810921f149de1738691d3d6fd3fe4cb7025/GameManipulator.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/GameManipulator.js?ref=2e74f810921f149de1738691d3d6fd3fe4cb7025",
          "patch": "@@ -0,0 +1,452 @@\n+var robot = require('./robotjs');\n+\n+var scanner = require ('./scanner');\n+var screenSize = robot.getScreenSize();\n+\n+// \n+// Color definitions\n+// \n+\n+// This is the Dino's colour, also used by Obstacles.\n+var COLOR_DINOSAUR = \"535353\";\n+\n+var GameManipulator = {\n+\n+\t// Stores the game position (Globally)\n+\toffset: null,\n+\twidth: null,\n+\n+\t// Stores points (jumps)\n+\tpoints: 0,\n+\n+\t// Listners\n+\tonGameEnd: null,\n+\tonGameStart: null,\n+\tonSensorData: null,\n+\n+\t// Game State\t\n+\tgamestate: 'OVER',\n+\n+\t// GameOver Position\n+\tgameOverOffset: [190, -82],\n+\n+\t// \n+\t// Stores an array of \"sensors\" (Ray tracings)\n+\t// Positions are always relative to global \"offset\"\n+\t// \n+\tsensors: [\n+\t\t{\n+\t\t\tlastValue: 1,\n+\t\t\t\n+\t\t\tvalue: null,\n+\t\t\toffset: [84, -15], // 64,-15\n+\t\t\tstep: [4, 0],\n+\t\t\tlength: 0.3,\n+\n+\t\t\t// Speed\n+\t\t\tspeed: 0,\n+\t\t\tlastComputeSpeed: 0,\n+\n+\t\t\t// Computes size of the object\n+\t\t\tsize: 0,\n+\t\t\tcomputeSize: true,\n+\t\t},\n+\n+\t\t// {\n+\t\t// \tlastValue: 1,\n+\n+\t\t// \tvalue: null,\n+\t\t// \toffset: [66, -30],\n+\t\t// \tstep: [5, 0],\n+\t\t// \tlength: 0.5,\n+\t\t// }\n+\t]\n+};\n+\n+\n+// \n+// Find out dinosaur (fast)\n+// \n+GameManipulator.findGamePosition = function () {\n+\tvar pos, dinoPos, skipXFast = 15;\n+\n+\tfor(var x = 20; x < screenSize.width; x+= skipXFast){\n+\n+\t\tdinoPos = scanner.scanUntil(\n+\t\t\t// Start position\n+\t\t\t[x, 80],\n+\t\t\t// Skip pixels\n+\t\t\t[0, skipXFast],\n+\t\t\t// Searching Color\n+\t\t\tCOLOR_DINOSAUR,\n+\t\t\t// Normal mode (not inverse)\n+\t\t\tfalse,\n+\t\t\t// Iteration limit\n+\t\t\t500 / skipXFast);\n+\n+\t\tif(dinoPos)\n+\t\t\tbreak;\n+\t}\n+\n+\tif(!dinoPos)\n+\t\treturn null;\n+\n+\tfor(var x = dinoPos[0] - 50; x <= dinoPos[0]; x += 1){\n+\n+\t\tpos = scanner.scanUntil(\n+\t\t\t// Start position\n+\t\t\t[x, dinoPos[1] - 2],\n+\t\t\t// Skip pixels\n+\t\t\t[0, 1],\n+\t\t\t// Searching Color\n+\t\t\tCOLOR_DINOSAUR,\n+\t\t\t// Normal mode (not inverse)\n+\t\t\tfalse,\n+\t\t\t// Iteration limit\n+\t\t\t100);\n+\n+\t\tif(pos)\n+\t\t\tbreak;\n+\t}\n+\n+\t// Did actually found? If not, error!\n+\tif(!pos)\n+\t\treturn null;\n+\n+\n+\t// Find the end of the game\n+\tvar endPos = pos;\n+\n+\twhile(robot.getPixelColor(endPos[0] + 3, endPos[1]) == COLOR_DINOSAUR){\n+\t\t endPos = scanner.scanUntil(\n+\t\t\t\t// Start position\n+\t\t\t\t[endPos[0] + 2, endPos[1]],\n+\t\t\t\t// Skip pixels\n+\t\t\t\t[2, 0],\n+\t\t\t\t// Searching Color\n+\t\t\t\tCOLOR_DINOSAUR,\n+\t\t\t\t// Invert mode\n+\t\t\t\ttrue,\n+\t\t\t\t// Iteration limit\n+\t\t\t\t600);\n+\t}\n+\n+\t// Did actually found? If not, error!\n+\tif(!endPos)\n+\t\treturn null;\n+\n+\t// Save to allow global access\n+\tGameManipulator.offset = pos;\n+\tGameManipulator.width = 600;//endPos[0] - pos[0];\n+\n+\treturn pos;\n+};\n+\n+\n+// \n+// Read Game state\n+// (If game is ended or is playing)\n+// \n+GameManipulator.readGameState = function () {\n+\t// Read GameOver\n+\tvar found = scanner.scanUntil(\n+\t\t[\n+\t\t\tGameManipulator.offset[0] + GameManipulator.gameOverOffset[0],\n+\t\t\tGameManipulator.offset[1] + GameManipulator.gameOverOffset[1]\n+\t\t],\n+\n+\t\t[2, 0], COLOR_DINOSAUR, false, 20);\n+\n+\tif(found && GameManipulator.gamestate != 'OVER'){\n+\t\tGameManipulator.gamestate = 'OVER';\n+\n+\t\t// Clear keys\n+\t\tGameManipulator.setGameOutput(0.5);\n+\n+\t\t// Trigger callback and clear\n+\t\tGameManipulator.onGameEnd && GameManipulator.onGameEnd(GameManipulator.points);\n+\t\tGameManipulator.onGameEnd = null;\n+\t\t\n+\t\t// console.log('GAME OVER: '+GameManipulator.points);\n+\n+\t}else if(!found && GameManipulator.gamestate != 'PLAYING'){\n+\t\tGameManipulator.gamestate = 'PLAYING';\n+\n+\t\t// Clear points\n+\t\tGameManipulator.points = 0;\n+\t\tGameManipulator.lastScore = 0;\n+\n+\t\t// Clear keys\n+\t\tGameManipulator.setGameOutput(0.5);\n+\n+\t\t// Clear sensors\n+\t\tGameManipulator.sensors[0].lastComputeSpeed = 0;\n+\t\tGameManipulator.sensors[0].lastSpeeds = [];\n+\t\tGameManipulator.sensors[0].lastValue = 1;\n+\t\tGameManipulator.sensors[0].value = 1;\n+\t\tGameManipulator.sensors[0].speed = 0;\n+\t\tGameManipulator.sensors[0].size = 0;\n+\n+\t\t// Clar Output flags\n+\t\tGameManipulator.lastOutputSet = 'NONE';\n+\n+\t\t// Trigger callback and clear\n+\t\tGameManipulator.onGameStart && GameManipulator.onGameStart();\n+\t\tGameManipulator.onGameStart = null;\n+\n+\t\t// console.log('GAME RUNNING '+GameManipulator.points);\n+\t}\n+}\n+\n+\n+// \n+// Call this to start a fresh new game\n+// Will wait untill game has ended, \n+// and call the `next` callback\n+// \n+var _startKeyInterval;\n+GameManipulator.startNewGame = function (next) {\n+\t\n+\t// Refresh state\n+\tGameManipulator.readGameState();\n+\n+\t// If game is already over, press space\n+\tif(GameManipulator.gamestate == 'OVER'){\n+\t\tclearInterval(_startKeyInterval);\n+\n+\t\t// Set start callback\n+\t\tGameManipulator.onGameStart = function (argument) {\n+\t\t\tclearInterval(_startKeyInterval);\n+\t\t\tnext && next();\n+\t\t};\n+\n+\t\t// Press space to begin game (repetidelly)\n+\t\t_startKeyInterval = setInterval(function (){\n+\t\t\trobot.keyTap(' ');\n+\t\t}, 300);\n+\n+\t\t// Refresh state\n+\t\tGameManipulator.readGameState();\n+\n+\t}else{\n+\t\t// Wait die, and call recursive action\n+\t\tGameManipulator.onGameEnd = function () {\n+\t\t\tGameManipulator.startNewGame(next);\n+\t\t}\n+\t}\n+\n+\n+}\n+\n+\n+// \n+// Compute points based on sensors\n+// \n+// Basicaly, checks if an object has\n+// passed trough the sensor and the\n+// value is now higher than before\n+// \n+GameManipulator.computePoints = function () {\n+\tfor(var k in GameManipulator.sensors){\n+\t\tvar sensor = GameManipulator.sensors[k];\n+\n+\t\tif(sensor.value > 0.5 && sensor.lastValue < 0.3){\n+\t\t\tGameManipulator.points++;\n+\t\t\t// console.log('POINTS: '+GameManipulator.points);\n+\t\t}\n+\t}\n+}\n+\n+\n+// \n+// Read sensors\n+// \n+// Sensors are like ray-traces: \n+//   They have a starting point,\n+//   and a limit to search for.\n+// \n+// Each sensor can gatter data about\n+// the DISTANCE of the object, it's\n+// SIZE and it's speed\n+// \n+// Note: We currently only have a sensor.\n+// \n+GameManipulator.readSensors = function () {\n+\tvar offset = GameManipulator.offset;\n+\n+\tvar startTime = Date.now();\n+\n+\tfor(var k in GameManipulator.sensors){\n+\n+\t\tvar sensor = GameManipulator.sensors[k];\n+\n+\t\t// Calculate absolute position of ray tracing\n+\t\tvar start = [\n+\t\t\toffset[0] + sensor.offset[0],\n+\t\t\toffset[1] + sensor.offset[1],\n+\t\t];\n+\n+\t\t// Compute cursor forwarding\n+\t\tvar forward = sensor.value * GameManipulator.width * 0.8 * sensor.length;\n+\n+\t\tvar end = scanner.scanUntil(\n+\t\t\t// console.log(\n+\t\t\t\t// Start position\n+\t\t\t\t[start[0], start[1]],\n+\t\t\t\t// Skip pixels\n+\t\t\t\tsensor.step,\n+\t\t\t\t// Searching Color\n+\t\t\t\tCOLOR_DINOSAUR,\n+\t\t\t\t// Invert mode?\n+\t\t\t\tfalse,\n+\t\t\t\t// Iteration limit\n+\t\t\t\t(GameManipulator.width * sensor.length) / sensor.step[0]);\n+\n+\t\t// Save lastValue\n+\t\tsensor.lastValue = sensor.value;\n+\n+\t\t// Calculate the Sensor value\n+\t\tif(end){\n+\t\t\tsensor.value = (end[0] - start[0]) / (GameManipulator.width * sensor.length);\n+\n+\t\t\t// \n+\t\t\t// Calculate size of obstacle\n+\t\t\t// \n+\t\t\tvar endPoint = scanner.scanUntil(\n+\t\t\t\t[end[0] + 75, end[1]],\n+\t\t\t\t[-2, 0],\n+\t\t\t\tCOLOR_DINOSAUR,\n+\t\t\t\tfalse,\n+\t\t\t\t75 / 2\n+\t\t\t);\n+\n+\t\t\t// If no end point, set the start point as end\n+\t\t\tif(!endPoint)\n+\t\t\t\tendPoint = end;\n+\n+\t\t\tvar sizeTmp = (endPoint[0] - end[0]) / 100.0;\n+\t\t\tif(GameManipulator.points == sensor.lastScore){\n+\t\t\t\t// It's the same obstacle. Set size to \"max\" of both\n+\t\t\t\tsensor.size = Math.max(sensor.size, sizeTmp);\n+\t\t\t}else{\n+\t\t\t\tsensor.size = sizeTmp;\n+\t\t\t}\n+\n+\n+\t\t\t// We use the current score to check for object equality\n+\t\t\tsensor.lastScore = GameManipulator.points;\n+\n+\t\t\t// sensor.size = Math.max(sensor.size, endPoint[0] - end[0]);\n+\n+\t\t}else{\n+\t\t\tsensor.value = 1;\n+\t\t\tsensor.size = 0;\n+\t\t}\n+\n+\t\t// Compute speed\n+\t\tvar dt = (Date.now() - sensor.lastComputeSpeed) / 1000;\n+\t\tsensor.lastComputeSpeed = Date.now();\n+\n+\t\tif(sensor.value < sensor.lastValue){\n+\t\t\t// Compute speed\n+\t\t\tvar newSpeed = (sensor.lastValue - sensor.value) / dt;\n+\t\t\t\n+\t\t\tsensor.lastSpeeds.unshift(newSpeed);\n+\n+\t\t\twhile(sensor.lastSpeeds.length > 10)\n+\t\t\t\tsensor.lastSpeeds.pop();\n+\n+\t\t\t// Take Average\n+\t\t\tvar avgSpeed = 0;\n+\t\t\tfor(var k in sensor.lastSpeeds)\n+\t\t\t\tavgSpeed += sensor.lastSpeeds[k] / sensor.lastSpeeds.length;\n+\n+\t\t\tsensor.speed = Math.max(avgSpeed - 1.5, sensor.speed);\n+\t\t\t\n+\t\t}\n+\n+\t\tsensor.size = Math.min(sensor.size, 1.0);\n+\n+\t\t// if(GameManipulator.gamestate == 'PLAYING')\n+\t\t\t// console.log(\"S[\"+k+\"]: \", sensor.value, sensor.size, Date.now() - startTime);\n+\n+\t\tstartTime = Date.now();\n+\t}\n+\n+\t// Compute points\n+\tGameManipulator.computePoints();\n+\n+\t// Call sensor callback (to act)\n+\tGameManipulator.onSensorData && GameManipulator.onSensorData();\n+}\n+\n+\n+// \n+// Set action to game\n+// Values: \n+//  0.0 to  0.4: DOWN\n+//  0.4 to  0.6: NOTHING\n+//  0.6 to  1.0: UP (JUMP)\n+// \n+var PRESS = 'down';\n+var RELEASE = 'up';\n+GameManipulator.lastOutputSet = 'NONE';\n+GameManipulator.lastOutputSetTime = 0;\n+GameManipulator.setGameOutput = function (output){\n+\n+\tGameManipulator.gameOutput = output;\n+\tGameManipulator.gameOutputString = GameManipulator.getDiscreteState(output);\n+\n+\tif(GameManipulator.gameOutputString == 'DOWN'){\n+\t\t// Skew\n+\t\trobot.keyToggle('up', RELEASE);\n+\t\trobot.keyToggle('down', PRESS);\n+\t}else if(GameManipulator.gameOutputString == 'NORM'){\n+\t\t// DO Nothing\n+\t\trobot.keyToggle('up', RELEASE);\n+\t\trobot.keyToggle('down', RELEASE);\n+\t}else{\n+\n+\t\t// Filter JUMP\n+\t\tif(GameManipulator.lastOutputSet != 'JUMP')\n+\t\t\tGameManipulator.lastOutputSetTime = Date.now();\n+\n+\t\t// JUMP\n+\t\t// Check if hasn't jump for more than 3 continuous secconds\n+\t\tif(Date.now() - GameManipulator.lastOutputSetTime < 3000){\n+\t\t\trobot.keyToggle('up', PRESS);\n+\t\t\trobot.keyToggle('down', RELEASE);\n+\t\t}else{\n+\t\t\trobot.keyToggle('up', RELEASE);\n+\t\t\trobot.keyToggle('down', RELEASE);\n+\t\t}\n+\n+\t}\n+\n+\tGameManipulator.lastOutputSet = GameManipulator.gameOutputString;\n+}\n+\n+// \n+// Simply maps an real number to string actions\n+// \n+GameManipulator.getDiscreteState = function (value){\n+\tif(value < 0.45){\n+\t\treturn 'DOWN'\n+\t}else if(value > 0.55){\n+\t\treturn 'JUMP';\n+\t}\n+\t\n+\treturn 'NORM';\n+}\n+\n+\n+// \n+// Click on the Starting point\n+// to make sure game is focused\n+// \n+GameManipulator.focusGame = function (){\n+\trobot.moveMouse(GameManipulator.offset[0], GameManipulator.offset[1]);\n+\trobot.mouseClick(\"left\");\n+}\n+\n+module.exports = GameManipulator;\n\\ No newline at end of file"
        },
        {
          "sha": "78bbb23c095bfe81fc66c6a5aea034d1b3036b31",
          "filename": "Learner.js",
          "status": "added",
          "additions": 327,
          "deletions": 0,
          "changes": 327,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/2e74f810921f149de1738691d3d6fd3fe4cb7025/Learner.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/2e74f810921f149de1738691d3d6fd3fe4cb7025/Learner.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/Learner.js?ref=2e74f810921f149de1738691d3d6fd3fe4cb7025",
          "patch": "@@ -0,0 +1,327 @@\n+var _ = require('lodash');\n+var async = require('async');\n+var synaptic = require('synaptic');\n+\n+var Network = synaptic.Network;\n+var Architect = synaptic.Architect;\n+\n+var Learn = {\n+\t// \n+\t// Current Genomes\n+\t// In form of: {\n+\t// \t\tfitness: null,\n+\t// \t\tgenome: [...],\n+\t// \t\tnetwork: {NeuralNetworkObject}\n+\t// }\n+\t// \n+\tgenomes: [],\n+\n+\tstate: 'STOP',\n+\n+\t// \n+\t// Current genome tryout\n+\t// \n+\tgenome: 0,\n+\tgeneration: 0,\n+\n+\t// \n+\t// Set this, to verify genome action BEFORE running it\n+\t// \n+\tshouldCheckExperience: false,\n+\n+};\n+\n+\n+\n+// \n+// Initialize the Learner\n+// \n+Learn.init = function (gameManipulator, ui, genomeUnits, selection, mutationProb) {\n+\tLearn.gm = gameManipulator;\n+\tLearn.ui = ui;\n+\n+\tLearn.genome = 0;\n+\tLearn.generation = 0;\n+\n+\tLearn.genomeUnits = genomeUnits;\n+\tLearn.selection = selection;\n+\tLearn.mutationProb = mutationProb;\n+}\n+\n+// \n+// Build genomes before calling executeGeneration.\n+// \n+Learn.startLearning = function () {\n+\n+\t// Build genomes if needed\n+\twhile(Learn.genomes.length < Learn.genomeUnits){\n+\t\tLearn.genomes.push(Learn.buildGenome(3, 1));\n+\t}\n+\n+\tLearn.executeGeneration();\n+\t\n+}\n+\n+// \n+// Given the entire generation of genomes (An array),\n+// applyes method `executeGenome` for each element.\n+// After all elements have completed executing:\n+// \n+// 1) Select best genomes\n+// 2) Does cross over (except for 2 genomes)\n+// 3) Does Mutation-only on remaining genomes\n+// 4) Execute generation (recursivelly)\n+// \n+Learn.executeGeneration = function (){\n+\tif(Learn.state == 'STOP')\n+\t\treturn;\n+\n+\tLearn.generation++;\n+\tLearn.ui.logger.log('Executing generation '+Learn.generation);\n+\n+\tLearn.genome = 0;\n+\n+\tasync.mapSeries(Learn.genomes, Learn.executeGenome, function (argument) {\n+\n+\t\t// Kill worst genomes\n+\t\tLearn.genomes = Learn.selectBestGenomes(Learn.selection);\n+\n+\t\t// Copy best genomes\n+\t\tvar bestGenomes = _.clone(Learn.genomes);\n+\n+\t\t// Cross Over ()\n+\t\twhile(Learn.genomes.length < Learn.genomeUnits - 2){\n+\t\t\t// Get two random Genomes\n+\t\t\tvar genA = _.sample(bestGenomes).toJSON();\n+\t\t\tvar genB = _.sample(bestGenomes).toJSON();\n+\n+\t\t\t// Cross over and Mutate\n+\t\t\tvar newGenome = Learn.mutate(Learn.crossOver(genA, genB));\n+\n+\t\t\t// Add to generation\n+\t\t\tLearn.genomes.push(Network.fromJSON(newGenome));\n+\t\t}\n+\n+\t\t// Mutation-only\n+\t\twhile(Learn.genomes.length < Learn.genomeUnits){\n+\t\t\t// Get two random Genomes\n+\t\t\tvar gen = _.sample(bestGenomes).toJSON();\n+\n+\t\t\t// Cross over and Mutate\n+\t\t\tvar newGenome = Learn.mutate(gen);\n+\n+\t\t\t// Add to generation\n+\t\t\tLearn.genomes.push(Network.fromJSON(newGenome));\n+\t\t}\n+\n+\t\tLearn.ui.logger.log('Completed generation '+Learn.generation);\n+\n+\t\t// Execute next generation\n+\t\tLearn.executeGeneration();\n+\t})\n+}\n+\n+\n+// \n+// Sort all the genomes, and delete the worst one\n+// untill the genome list has selectN elements.\n+// \n+Learn.selectBestGenomes = function (selectN){\n+\tvar selected = _.sortBy(Learn.genomes, 'fitness').reverse();\n+\n+\twhile(selected.length > selectN){\n+\t\tselected.pop();\n+\t}\n+\n+\tLearn.ui.logger.log('Fitness: '+_.pluck(selected, 'fitness').join(','));\n+\n+\treturn selected;\n+}\n+\n+\n+// \n+// Waits the game to end, and start a new one, then:\n+// 1) Set's listener for sensorData\n+// 2) On data read, applyes the neural network, and\n+//    set it's output\n+// 3) When the game has ended and compute the fitness\n+// \n+Learn.executeGenome = function (genome, next){\n+\tif(Learn.state == 'STOP')\n+\t\treturn;\n+\n+\tLearn.genome = Learn.genomes.indexOf(genome) + 1;\n+\t// Learn.ui.logger.log('Executing genome '+Learn.genome);\n+\n+\t// Check if genome has AT LEAST some experience\n+\tif(Learn.shouldCheckExperience){\n+\t\tif(!Learn.checkExperience(genome)){\n+\t\t\tgenome.fitness = 0;\n+\t\t\t// Learn.ui.logger.log('Genome '+Learn.genome+' has no minimum experience');\n+\t\t\treturn next();\n+\t\t}\n+\t}\n+\n+\tLearn.gm.startNewGame(function (){\n+\n+\t\t// Reads sensor data, and apply network\n+\t\tLearn.gm.onSensorData = function (){\n+\t\t\tvar inputs = [\n+\t\t\t\tLearn.gm.sensors[0].value,\n+\t\t\t\tLearn.gm.sensors[0].size,\n+\t\t\t\tLearn.gm.sensors[0].speed,\n+\t\t\t];\n+\t\t\t// console.log(inputs);\n+\t\t\t// Apply to network\n+\t\t\tvar outputs = genome.activate(inputs);\n+\n+\t\t\tLearn.gm.setGameOutput(outputs[0]);\n+\t\t}\n+\n+\t\t// Wait game end, and compute fitness\n+\t\tLearn.gm.onGameEnd = function (points){\n+\t\t\tLearn.ui.logger.log('Genome '+Learn.genome+' ended. Fitness: '+points);\n+\n+\t\t\t// Save Genome fitness\n+\t\t\tgenome.fitness = points;\n+\n+\t\t\t// Go to next genome\n+\t\t\tnext();\n+\t\t}\n+\t});\n+\n+}\n+\n+// \n+// Validate if any acction occur uppon a given input (in this case, distance).\n+// If genome only keeps a single activation value for any given input,\n+// it will return false\n+// \n+Learn.checkExperience = function (genome) {\n+\t\n+\tvar step = 0.1, start = 0.0, stop = 1;\n+\n+\t// Inputs are default. We only want to test the first index\n+\tvar inputs = [0.0, 0.3, 0.2];\n+\tvar activation, state, outputs = {};\n+\n+\tfor(var k = start; k < stop; k += step){\n+\t\tinputs[0] = k;\n+\n+\t\tactivation = genome.activate(inputs);\n+\t\tstate = Learn.gm.getDiscreteState(activation);\n+\t\t\n+\t\toutputs[state] = true;\n+\t}\n+\n+\t// Count states, and return true if greater than 1\n+\treturn _.keys(outputs).length > 1;\n+}\n+\n+\n+// \n+// Load genomes saved from JSON file\n+// \n+Learn.loadGenomes = function (genomes, deleteOthers){\n+\tif(deleteOthers)\n+\t\tLearn.genomes = [];\n+\n+\tvar loaded = 0;\n+\tfor(var k in genomes){\n+\t\tLearn.genomes.push(Network.fromJSON(genomes[k]));\n+\t\tloaded++;\n+\t}\n+\n+\tLearn.ui.logger.log('Loaded '+loaded+' genomes!');\n+}\n+\n+\n+// \n+// Builds a new genome based on the \n+// expected number of inputs and outputs\n+// \n+Learn.buildGenome = function (inputs, outputs) {\n+\tLearn.ui.logger.log('Build genome '+(Learn.genomes.length+1));\n+\tvar network = new Architect.Perceptron(inputs, 4, 4, outputs);\n+\treturn network;\n+\t// console.log(JSON.stringify(network.toJSON()));\n+\t// process.exit();\n+}\n+\n+\n+// \n+// SPECIFIC to Neural Network.\n+// Those two methods convert from JSON to Array, and from Array to JSON\n+// \n+Learn.crossOver = function (netA, netB) {\n+\t// Swap (50% prob.)\n+\tif(Math.random() > 0.5){\n+\t\tvar tmp = netA;\n+\t\tnetA = netB;\n+\t\tnetB = tmp;\n+\t}\n+\n+\t// Clone network\n+\tnetA = _.cloneDeep(netA);\n+\tnetB = _.cloneDeep(netB);\n+\n+\t// Cross over data keys\n+\tLearn.crossOverDataKey(netA.neurons, netB.neurons, 'bias');\n+\t// Learn.crossOverDataKey(netA.connections, netB.connections, 'weight');\n+\n+\treturn netA;\n+}\n+\n+// \n+// Does random mutations across all\n+// the biases and weights of the Networks\n+// (This must be done in the JSON to\n+// prevent modifying the current one)\n+// \n+Learn.mutate = function (net){\n+\t// Mutate\n+\tLearn.mutateDataKeys(net.neurons, 'bias', Learn.mutationProb);\n+\t\n+\tLearn.mutateDataKeys(net.connections, 'weight', Learn.mutationProb);\n+\n+\treturn net;\n+}\n+\n+// \n+// Given an Object A and an object B, both Arrays\n+// of Objects:\n+// \n+// 1) Select a cross over point (cutLocation)\n+//    randomly (going from 0 to A.length)\n+// 2) Swap values from `key` one to another,\n+//    starting by cutLocation\n+// \n+Learn.crossOverDataKey = function (a, b, key) {\n+\tvar cutLocation = Math.round(a.length * Math.random());\n+\n+\tvar tmp;\n+\tfor(var k = cutLocation; k < a.length; k++){\n+\t\t// Swap\n+\t\ttmp = a[k][key];\n+\t\ta[k][key] = b[k][key];\n+\t\tb[k][key] = tmp;\n+\t}\n+}\n+\n+// \n+// Given an Array of objects with key `key`,\n+// and also a `mutationRate`, randomly Mutate\n+// the value of each key, if random value is\n+// lower than mutationRate for each element.\n+// \n+Learn.mutateDataKeys = function (a, key, mutationRate){\n+\tfor(var k = 0; k < a.length; k++){\n+\t\t// Should mutate?\n+\t\tif(Math.random() > mutationRate)\n+\t\t\tcontinue;\n+\n+\t\ta[k][key] += a[k][key] * (Math.random() - 0.5) * 3 + (Math.random() - 0.5);\n+\t}\n+}\n+\n+module.exports = Learn;\n\\ No newline at end of file"
        },
        {
          "sha": "7d9dddbbd341d863a24d7767af91dd1ee9b7f27d",
          "filename": "README.md",
          "status": "added",
          "additions": 81,
          "deletions": 0,
          "changes": 81,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/2e74f810921f149de1738691d3d6fd3fe4cb7025/README.md",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/2e74f810921f149de1738691d3d6fd3fe4cb7025/README.md",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/README.md?ref=2e74f810921f149de1738691d3d6fd3fe4cb7025",
          "patch": "@@ -0,0 +1,81 @@\n+# IAMDinosaur\n+\n+An simpler artificial inteligence to teach Google Chrome's offline dinosaur to\n+jump cactus, using Neural Networks and a simple Genetic Algorithm.\n+\n+## Instalation\n+\n+1. Install `Node.js` on your computer.\n+\n+2. Clone/download this folder to your computer.\n+\n+3. run `npm install` within this folder\n+\n+4. Open Chrome's dinosaur game and put aside the terminal (It MUST be on the same screen)\n+   **(Tip: go to developer tools, and under network, set to offline )**\n+\n+5. run `node index` within this folder. If the game was located, it will move the cursor\n+   of the mouse to the origin of the `floor` of the dino. Press `s` key in the terminal to \n+   start learning. \n+\n+\n+## How does it work\n+\n+We have 3 different inputs read from the pixels of the screen:\n+\n+1. Distance from the next cactus\n+2. Length of the next cactus\n+3. Speed of the current cactus\n+\n+We have also, one output with 3 possible states:\n+\n+1. output < 0.45: Press DOWN key\n+2. output > 0.55: Press UP key\n+2. default: Release both keys\n+\n+## Genetic Algorithm\n+\n+Each Generation consists of 12 neural networks (Genomes). \n+\n+Each genome is tested with the game, by constantly mapping the read \n+inputs from  the game to the inputs of the neural network, and by getting\n+the output/activation from the network and applying to the keys of the\n+keyboard.\n+\n+While testing each genome, we keep track of it's \"fitness\" by counting\n+jumped cactus in the game.\n+\n+When an entire generation is completed, we remove the worst genomes until\n+achieving `N` genomes. With those `N` genomes, we then select two randomly,\n+and cross-over their values/configurations. After that, we apply random mutations\n+in the values/configurations of the Neural Network, creating a new genome.\n+\n+We do the cross-over/mutation until we get 12 genomes again, and repeat it constantly.\n+\n+\n+## Inplementation\n+\n+All the implementation was done using Node.js, with Synaptic (Neural Network library),\n+and RobotJs (a library to read pixels and simulate key presses).\n+\n+There are a few files in the project:\n+\n+- `index.js`: It tight all things together.\n+\n+- `scanner.js`: Basic abstraction layer above RobotJs library that reads the screen like\n+  ray tracing. Also have some utilities functions.\n+\n+- `UI.js`: Global scope for the UI management. It initializes and also updates the screen\n+  on changes.\n+\n+- `GameManipulator.js`: Has all the necessary code to read sensors, and apply outputs\n+  to the game. Is also responsible for computing points, getting the game state and\n+  triggering callbacks/listeners to real implementation.\n+\n+- `Learner.js`: It is the core implementation of the Genetic Algorithm. This is where\n+  \"magic\" happens, by running generations, doing \"natural\" selection, cross-over, mutation...\n+\n+## Credits\n+\n+- [Tony Ngan](https://github.com/tngan) **The idea came from him**\n+- [JoÃ£o Pedro](https://github.com/joaopedrovbs)\n\\ No newline at end of file"
        },
        {
          "sha": "705ade59e94418266702c9ccde86d80c83edbad3",
          "filename": "UI.js",
          "status": "added",
          "additions": 215,
          "deletions": 0,
          "changes": 215,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/2e74f810921f149de1738691d3d6fd3fe4cb7025/UI.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/2e74f810921f149de1738691d3d6fd3fe4cb7025/UI.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/UI.js?ref=2e74f810921f149de1738691d3d6fd3fe4cb7025",
          "patch": "@@ -0,0 +1,215 @@\n+var fs = require('fs');\n+var blessed = require('blessed')\n+var contrib = require('blessed-contrib')\n+var screen = blessed.screen()\n+\n+var UI = {};\n+\n+\n+// \n+// Initialize UI objects\n+// \n+UI.init = function (gameManipulator, learner) {\n+\tUI.gm = gameManipulator;\n+\tUI.learner = learner;\n+\n+\tUI.grid = new contrib.grid({\n+\t\trows: 12,\n+\t\tcols: 6,\n+\t\tscreen: screen\n+\t});\n+\n+\t// \n+\t// Build Sensor inputs\n+\t// \n+\tUI.uiSensors = UI.grid.set(0, 0, 3, 6, contrib.bar, {\n+\t\tlabel: 'Network Inputs',\n+\t\t// bg: 'white',\n+\t\tbarWidth: 12,\n+\t\tbarSpacing: 1,\n+\t\txOffset: 0,\n+\t\tmaxHeight: 100,\n+\t});\n+\n+\t// \n+\t// Build Log box\n+\t// \n+\tUI.logger = UI.grid.set(3, 0, 3, 6, contrib.log, {\n+\t\tfg: 'green',\n+\t\tselectedFg: 'green',\n+\t\tlabel: 'Logs'\n+\t});\n+\n+\t// \n+\t// Current score/time view\n+\t// \n+\tUI.uiScore = UI.grid.set(6, 0, 3, 3, blessed.Text, {\n+\t\tlabel: 'Game Stats',\n+\t\t// bg: 'green',\n+\t\tfg: 'white',\n+\t\tcontent: 'Loading...',\n+\t\talign: 'center',\n+\t});\n+\n+\t// \n+\t// Current Genomes stats\n+\t// \n+\tUI.uiGenomes = UI.grid.set(6, 3, 3, 3, blessed.Text, {\n+\t\tlabel: 'Genome Stats',\n+\t\t// bg: 'green',\n+\t\tfg: 'white',\n+\t\tcontent: 'Hey!',\n+\t\talign: 'center',\n+\t});\n+\n+\n+\t// \n+\t// Load Tree\n+\t// \n+\tUI.savesTree = UI.grid.set(9, 0, 3, 3, contrib.tree, {\n+\t\tlabel: 'Saved Genomes',\n+\t});\n+\n+\tUI.savesTree.on('click', UI.savesTree.focus.bind(UI.savesTree));\n+\tUI.savesTree.on('select', function (item){\n+\n+\t\tif(item.isFile){\n+\t\t\tvar fileName = item.name;\n+\n+\t\t\tUI.logger.log('Loading genomes from file:');\n+\t\t\tUI.logger.log(fileName);\n+\n+\t\t\tvar genomes = require('./genomes/'+fileName);\n+\n+\t\t\tUI.learner.loadGenomes(genomes);\n+\t\t}else{\n+\t\t\tUI.refreshFiles();\n+\t\t}\n+\t});\n+\n+\tUI.refreshFiles();\n+\n+\t// \n+\t// Save Btn\n+\t// \n+\tUI.btnSave = UI.grid.set(9, 3, 3, 3, blessed.box, {\n+\t\tlabel: 'Save to File',\n+\t\tbg: 'green',\n+\t\tfg: 'red',\n+\t\tcontent: '\\n\\n\\n\\nSave Genomes',\n+\t\talign: 'center',\n+\t});\n+\n+\tUI.btnSave.on('click', function (){\n+\n+\t\tvar jsonGenomes = [];\n+\t\tfor(var k in UI.learner.genomes){\n+\t\t\tjsonGenomes.push(UI.learner.genomes[k].toJSON());\n+\t\t}\n+\n+\t\tUI.logger.log('Saving '+jsonGenomes.length+' genomes...');\n+\n+\t\tvar fileName = './genomes.gen_'+UI.learner.generation+'_'+Date.now()+'.json';\n+\t\tfs.writeFile(fileName, JSON.stringify(jsonGenomes), function (err){\n+\t\t\tif(err)\n+\t\t\t\tUI.logger.log('Failed to save! '+err);\n+\t\t\telse\n+\t\t\t\tUI.logger.log('Saved to '+fileName);\n+\n+\t\t\tUI.refreshFiles();\n+\t\t});\n+\n+\t});\n+\n+\tscreen.key(['escape', 'q', 'C-c'], function(ch, key) {\n+\t return process.exit(0);\n+\t});\n+\n+\tscreen.key(['s'], function (ch, key){\n+\t\tif(learner.state == 'STOP'){\n+\t\t\tlearner.state = 'LEARNING';\n+\t\t\tgameManipulator.focusGame();\n+\t\t\tlearner.startLearning();\n+\t\t}else{\n+\t\t\tlearner.state = 'STOP';\n+\t\t}\n+\t});\n+\n+\n+\tscreen.render()\n+\n+};\n+\n+\n+// \n+// Read entire folder and select files that match a .json file\n+// \n+UI.refreshFiles = function (){\n+\tvar files = [];\n+\tvar fileData = \n+\t{\n+\t\tname: 'Saved Files',\n+\t\textended: true,\n+\t\tchildren: [{\n+\t\t\tname: 'Refresh Folders'\n+\t\t}]\n+\t};\n+\n+\t// Populate tree\n+\tUI.logger.log('Reading genomes dir...')\n+\tvar files = fs.readdirSync('./genomes');\n+\tfor(var k in files){\n+\t\tif(files[k].indexOf('.json') >= 0){\n+\t\t\tfileData.children.push({\n+\t\t\t\tname: files[k],\n+\t\t\t\tisFile: true,\n+\t\t\t});\n+\t\t}\n+\t}\n+\n+\tUI.savesTree.setData(fileData);\n+}\n+\n+// \n+// Updates data on the screen and render it\n+// \n+UI.render = function () {\n+\n+\t// \n+\t// Update data\n+\t// \n+\tUI.uiSensors.setData({\n+\t\ttitles: ['Distance', 'Size', 'Speed', 'Activation'],\n+\t\tdata: [\n+\t\t\tMath.round(UI.gm.sensors[0].value * 100),\n+\t\t\tMath.round(UI.gm.sensors[0].size * 100),\n+\t\t\tMath.round(UI.gm.sensors[0].speed * 100),\n+\t\t\tMath.round(UI.gm.gameOutput * 100),\n+\t\t]\n+\t})\n+\n+\t// \n+\t// Set Genome stats and score\n+\t// \n+\tvar learn = UI.learner;\n+\tvar uiStats = 'Status: '+learn.state+'\\n';\n+\tuiStats += 'Fitness: '+UI.gm.points+'\\nGameStatus: '+UI.gm.gamestate + '\\n';\n+\tuiStats += 'Generation: '+learn.generation+' : '+learn.genome+'/'+learn.genomes.length;\n+\tUI.uiScore.setText(uiStats);\n+\n+\tif(UI.gm.gameOutput){\n+\t\tvar str = 'Action: '+UI.gm.gameOutputString+'\\nActivation: '+UI.gm.gameOutput;\n+\t\tUI.uiGenomes.setText(str);\n+\t}else{\n+\t\tUI.uiGenomes.setText('Loading...');\n+\t}\n+\n+\t// \n+\t// Render screen\n+\t// \n+\tscreen.render();\n+}\n+\n+setInterval(UI.render, 25);\n+\n+module.exports = UI;\n\\ No newline at end of file"
        },
        {
          "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
          "filename": "genomes/.gitkeep",
          "status": "added",
          "additions": 0,
          "deletions": 0,
          "changes": 0,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/2e74f810921f149de1738691d3d6fd3fe4cb7025/genomes/.gitkeep",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/2e74f810921f149de1738691d3d6fd3fe4cb7025/genomes/.gitkeep",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/genomes/.gitkeep?ref=2e74f810921f149de1738691d3d6fd3fe4cb7025"
        },
        {
          "sha": "5da132d8eabd10876e0ab8f630fe5e9e3358d684",
          "filename": "index.js",
          "status": "added",
          "additions": 72,
          "deletions": 0,
          "changes": 72,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/2e74f810921f149de1738691d3d6fd3fe4cb7025/index.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/2e74f810921f149de1738691d3d6fd3fe4cb7025/index.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/index.js?ref=2e74f810921f149de1738691d3d6fd3fe4cb7025",
          "patch": "@@ -0,0 +1,72 @@\n+var UI = require('./UI');\n+var robot = require('./robotjs');\n+var Learner = require('./Learner');\n+var scanner = require('./scanner');\n+var GameManipulator = require('./GameManipulator');\n+\n+// \n+// Configure Robotjs\n+// \n+robot.setMouseDelay(1);\n+\n+\n+// \n+// Initialize Game\n+// \n+GameManipulator.findGamePosition();\n+\n+\n+// \n+// Check for found game\n+// \n+if(GameManipulator.offset){\n+\t// Uncomment this line to debug the\n+\t// starting point (Check if it's detecting it correcly)\n+\t\n+\t// robot.moveMouse(GameManipulator.offset[0]+GameManipulator.sensors[0].offset[0],\n+\t// \t\tGameManipulator.offset[1] + GameManipulator.sensors[0].offset[1]);\n+\n+\trobot.moveMouse(GameManipulator.offset[0], GameManipulator.offset[1]);\n+}else{\n+\tconsole.error('FAILED TO FIND GAME!');\n+\tprocess.exit();\n+}\n+\n+\n+// \n+// Initialize UI\n+// \n+UI.init(GameManipulator, Learner);\n+\n+// \n+// Init Learner\n+// \n+Learner.init(GameManipulator, UI, 12, 4, 0.2);\n+\n+\n+// \n+// Start reading game state and sensors\n+// \n+setInterval(GameManipulator.readSensors, 40);\n+setInterval(GameManipulator.readGameState, 200);\n+\n+\n+// \n+// Start game (Example of API usage)\n+// \n+/*\n+function startGame () {\n+\tvar game = Math.round(Math.random() * 100);\n+\n+\tUI.logger.log('Queuing start... ', game);\n+\n+\tGameManipulator.startNewGame(function() {\n+\t\tUI.logger.log('Game HAS started!', game);\n+\t\tGameManipulator.onGameEnd = function () {\n+\t\t\tUI.logger.log('Game HAS ended!', game);\n+\n+\t\t\tstartGame();\n+\t\t}\n+\t});\t\n+}\n+*/\n\\ No newline at end of file"
        },
        {
          "sha": "0d09ae98f9521f07cae31ae638c9325481ee1219",
          "filename": "package.json",
          "status": "added",
          "additions": 19,
          "deletions": 0,
          "changes": 19,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/2e74f810921f149de1738691d3d6fd3fe4cb7025/package.json",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/2e74f810921f149de1738691d3d6fd3fe4cb7025/package.json",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/package.json?ref=2e74f810921f149de1738691d3d6fd3fe4cb7025",
          "patch": "@@ -0,0 +1,19 @@\n+{\n+  \"name\": \"iamdinosaur\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"\",\n+  \"main\": \"index.js\",\n+  \"scripts\": {\n+    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n+  },\n+  \"author\": \"\",\n+  \"license\": \"ISC\",\n+  \"dependencies\": {\n+    \"async\": \"^1.5.0\",\n+    \"blessed\": \"^0.1.81\",\n+    \"blessed-contrib\": \"^2.5.2\",\n+    \"lodash\": \"^3.10.1\",\n+    \"robotjs\": \"file:robotjs\",\n+    \"synaptic\": \"^1.0.2\"\n+  }\n+}"
        },
        {
          "sha": "85f7f68ccc3db4b43d399bef690e6fc88e23e113",
          "filename": "scanner.js",
          "status": "added",
          "additions": 93,
          "deletions": 0,
          "changes": 93,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/2e74f810921f149de1738691d3d6fd3fe4cb7025/scanner.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/2e74f810921f149de1738691d3d6fd3fe4cb7025/scanner.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/scanner.js?ref=2e74f810921f149de1738691d3d6fd3fe4cb7025",
          "patch": "@@ -0,0 +1,93 @@\n+// External Modules\n+var robot = require('./robotjs');\n+var screenSize = robot.getScreenSize();\n+\n+// Indexes\n+var X = 0;\n+var Y = 1;\n+\n+// Create the \"class\" wrapper\n+var scanner = {};\n+\n+// \n+// Check if the given position is outside the Screen\n+// \n+scanner.isOutOfBound = function (pos) {\n+\tif( pos[X] < 0 || pos[Y] < 0 ||\n+\t\tpos[X] >= screenSize.width ||\n+\t\tpos[Y] >= screenSize.height)\n+\t\treturn true;\n+\n+\treturn false;\t\t\n+}\n+\n+// \n+// Limits the x/y values of position to fit the screen\n+// \n+scanner.makeInBounds = function (pos) {\n+\t\n+\tif(pos[X] < 0)\n+\t\tpos[X] = 0;\n+\n+\tif(pos[X] >= screenSize.width)\n+\t\tpos[X] = screenSize.width - 1;\n+\t\n+\tif(pos[Y] < 0)\n+\t\tpos[Y] = 0;\n+\n+\tif(pos[Y] >= screenSize.height)\n+\t\tpos[Y] = screenSize.height - 1;\n+\n+\treturn pos;\n+}\n+\n+/*\n+\tGiven start [X, Y], and a DELTA [dX, dY],\n+\tmaps from \"start\", adding \"delta\" to position,\n+\tuntil \"matchinColor\" is found OR isOutOfBounds.\n+\t\n+\tIf iterations reach > iterLimit:\n+\t\treturns null;\n+\n+\tif isOutOfBounds: \n+\t\treturns null\n+\n+\totherwise:\n+\t\treturn that point\n+\n+\tExample: (X direction)\n+\t\tscanUntil([0,0], [1, 0], \"000000\");\n+*/\n+scanner.scanUntil = function (start, delta, matchingColor, invertMatch, iterLimit) {\n+\tvar color, current, iterations = 0;\n+\n+\t// (CLONE instead of using the real one)\n+\tcurrent = scanner.makeInBounds([start[X], start[Y]]);\n+\n+\tif(delta[X] == 0 && delta[Y] == 0)\n+\t\treturn null;\n+\n+\n+\twhile(!scanner.isOutOfBound(current)){\n+\t\t// Check current pixel\n+\t\tcolor = robot.getPixelColor(current[X], current[Y]);\n+\n+\t\tif(!invertMatch && color.toString() == matchingColor)\n+\t\t\treturn current;\n+\t\t\n+\t\tif(invertMatch && color.toString() != matchingColor)\n+\t\t\treturn current;\n+\n+\t\tcurrent[X] += delta[X];\n+\t\tcurrent[Y] += delta[Y];\n+\t\titerations++;\n+\n+\t\tif(iterations > iterLimit)\n+\t\t\treturn null;\n+\t}\n+\n+\treturn null;\n+};\n+\n+// Export the module\n+module.exports = scanner;\n\\ No newline at end of file"
        }
      ]
    },
    "977be983f9ea2d412d28ae0844dc9996a196589d": {
      "sha": "977be983f9ea2d412d28ae0844dc9996a196589d",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6OTc3YmU5ODNmOWVhMmQ0MTJkMjhhZTA4NDRkYzk5OTZhMTk2NTg5ZA==",
      "commit": {
        "author": {
          "name": "Jason Stallings",
          "email": "octalmage@gmail.com",
          "date": "2015-12-28T07:11:33Z"
        },
        "committer": {
          "name": "Jason Stallings",
          "email": "octalmage@gmail.com",
          "date": "2015-12-28T07:11:33Z"
        },
        "message": "Corrected spelling of intelligence.",
        "tree": {
          "sha": "2b5b2f8e5ff5244e8c83562572494393459bd825",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/2b5b2f8e5ff5244e8c83562572494393459bd825"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/977be983f9ea2d412d28ae0844dc9996a196589d",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/977be983f9ea2d412d28ae0844dc9996a196589d",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/977be983f9ea2d412d28ae0844dc9996a196589d",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/977be983f9ea2d412d28ae0844dc9996a196589d/comments",
      "author": {
        "login": "octalmage",
        "id": 142006,
        "node_id": "MDQ6VXNlcjE0MjAwNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/142006?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/octalmage",
        "html_url": "https://github.com/octalmage",
        "followers_url": "https://api.github.com/users/octalmage/followers",
        "following_url": "https://api.github.com/users/octalmage/following{/other_user}",
        "gists_url": "https://api.github.com/users/octalmage/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/octalmage/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/octalmage/subscriptions",
        "organizations_url": "https://api.github.com/users/octalmage/orgs",
        "repos_url": "https://api.github.com/users/octalmage/repos",
        "events_url": "https://api.github.com/users/octalmage/events{/privacy}",
        "received_events_url": "https://api.github.com/users/octalmage/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "octalmage",
        "id": 142006,
        "node_id": "MDQ6VXNlcjE0MjAwNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/142006?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/octalmage",
        "html_url": "https://github.com/octalmage",
        "followers_url": "https://api.github.com/users/octalmage/followers",
        "following_url": "https://api.github.com/users/octalmage/following{/other_user}",
        "gists_url": "https://api.github.com/users/octalmage/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/octalmage/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/octalmage/subscriptions",
        "organizations_url": "https://api.github.com/users/octalmage/orgs",
        "repos_url": "https://api.github.com/users/octalmage/repos",
        "events_url": "https://api.github.com/users/octalmage/events{/privacy}",
        "received_events_url": "https://api.github.com/users/octalmage/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "826383dadc1f00a96d2d2e04e099218087f4cf16",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/826383dadc1f00a96d2d2e04e099218087f4cf16",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/826383dadc1f00a96d2d2e04e099218087f4cf16"
        }
      ],
      "stats": { "total": 4, "additions": 2, "deletions": 2 },
      "files": [
        {
          "sha": "d54b3f9f44c5869935ec416bfd1b77703493222e",
          "filename": "README.md",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "changes": 4,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/977be983f9ea2d412d28ae0844dc9996a196589d/README.md",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/977be983f9ea2d412d28ae0844dc9996a196589d/README.md",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/README.md?ref=977be983f9ea2d412d28ae0844dc9996a196589d",
          "patch": "@@ -1,6 +1,6 @@\n # IAMDinosaur\n \n-A simple artificial inteligence to teach Google Chrome's offline dinosaur to\n+A simple artificial intelligence to teach Google Chrome's offline dinosaur to\n jump cactus, using Neural Networks and a simple Genetic Algorithm.\n \n ## Instalation\n@@ -79,4 +79,4 @@ There are a few files in the project:\n \n - [Ivan Seidel](https://github.com/ivanseidel)\n - [JoÃ£o Pedro](https://github.com/joaopedrovbs)\n-- [Tony Ngan](https://github.com/tngan) **The idea came from him**\n\\ No newline at end of file\n+- [Tony Ngan](https://github.com/tngan) **The idea came from him**"
        }
      ]
    },
    "929c411ca499bbdd9e00c9a6c213d803f6c820b6": {
      "sha": "929c411ca499bbdd9e00c9a6c213d803f6c820b6",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6OTI5YzQxMWNhNDk5YmJkZDllMDBjOWE2YzIxM2Q4MDNmNmM4MjBiNg==",
      "commit": {
        "author": {
          "name": "Rodrigo Alviani",
          "email": "rodrigoalviani@gmail.com",
          "date": "2015-12-28T11:18:21Z"
        },
        "committer": {
          "name": "Rodrigo Alviani",
          "email": "rodrigoalviani@gmail.com",
          "date": "2015-12-28T11:18:21Z"
        },
        "message": "Fix robotjs require path",
        "tree": {
          "sha": "fc61abc7136515002e82858e353f60b1df73eb63",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/fc61abc7136515002e82858e353f60b1df73eb63"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/929c411ca499bbdd9e00c9a6c213d803f6c820b6",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/929c411ca499bbdd9e00c9a6c213d803f6c820b6",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/929c411ca499bbdd9e00c9a6c213d803f6c820b6",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/929c411ca499bbdd9e00c9a6c213d803f6c820b6/comments",
      "author": {
        "login": "rodrigoalviani",
        "id": 5366090,
        "node_id": "MDQ6VXNlcjUzNjYwOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5366090?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rodrigoalviani",
        "html_url": "https://github.com/rodrigoalviani",
        "followers_url": "https://api.github.com/users/rodrigoalviani/followers",
        "following_url": "https://api.github.com/users/rodrigoalviani/following{/other_user}",
        "gists_url": "https://api.github.com/users/rodrigoalviani/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rodrigoalviani/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rodrigoalviani/subscriptions",
        "organizations_url": "https://api.github.com/users/rodrigoalviani/orgs",
        "repos_url": "https://api.github.com/users/rodrigoalviani/repos",
        "events_url": "https://api.github.com/users/rodrigoalviani/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rodrigoalviani/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "rodrigoalviani",
        "id": 5366090,
        "node_id": "MDQ6VXNlcjUzNjYwOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5366090?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rodrigoalviani",
        "html_url": "https://github.com/rodrigoalviani",
        "followers_url": "https://api.github.com/users/rodrigoalviani/followers",
        "following_url": "https://api.github.com/users/rodrigoalviani/following{/other_user}",
        "gists_url": "https://api.github.com/users/rodrigoalviani/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rodrigoalviani/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rodrigoalviani/subscriptions",
        "organizations_url": "https://api.github.com/users/rodrigoalviani/orgs",
        "repos_url": "https://api.github.com/users/rodrigoalviani/repos",
        "events_url": "https://api.github.com/users/rodrigoalviani/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rodrigoalviani/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "838c2fd9a5fc2820340e01e009acae4d7018ba71",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/838c2fd9a5fc2820340e01e009acae4d7018ba71",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/838c2fd9a5fc2820340e01e009acae4d7018ba71"
        }
      ],
      "stats": { "total": 130, "additions": 65, "deletions": 65 },
      "files": [
        {
          "sha": "902cd5a2aa0a6af463f6ac76b97a4fcc327b69bd",
          "filename": "GameManipulator.js",
          "status": "modified",
          "additions": 37,
          "deletions": 37,
          "changes": 74,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/929c411ca499bbdd9e00c9a6c213d803f6c820b6/GameManipulator.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/929c411ca499bbdd9e00c9a6c213d803f6c820b6/GameManipulator.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/GameManipulator.js?ref=929c411ca499bbdd9e00c9a6c213d803f6c820b6",
          "patch": "@@ -2,14 +2,14 @@\n \tDeveloped by Ivan Seidel [https://github.com/ivanseidel]\n */\n \n-var robot = require('./robotjs');\n+var robot = require('robotjs');\n \n var scanner = require ('./scanner');\n var screenSize = robot.getScreenSize();\n \n-// \n+//\n // Color definitions\n-// \n+//\n \n // This is the Dino's colour, also used by Obstacles.\n var COLOR_DINOSAUR = \"535353\";\n@@ -28,20 +28,20 @@ var GameManipulator = {\n \tonGameStart: null,\n \tonSensorData: null,\n \n-\t// Game State\t\n+\t// Game State\n \tgamestate: 'OVER',\n \n \t// GameOver Position\n \tgameOverOffset: [190, -82],\n \n-\t// \n+\t//\n \t// Stores an array of \"sensors\" (Ray tracings)\n \t// Positions are always relative to global \"offset\"\n-\t// \n+\t//\n \tsensors: [\n \t\t{\n \t\t\tlastValue: 1,\n-\t\t\t\n+\n \t\t\tvalue: null,\n \t\t\toffset: [84, -15], // 64,-15\n \t\t\tstep: [4, 0],\n@@ -68,9 +68,9 @@ var GameManipulator = {\n };\n \n \n-// \n+//\n // Find out dinosaur (fast)\n-// \n+//\n GameManipulator.findGamePosition = function () {\n \tvar pos, dinoPos, skipXFast = 15;\n \n@@ -147,10 +147,10 @@ GameManipulator.findGamePosition = function () {\n };\n \n \n-// \n+//\n // Read Game state\n // (If game is ended or is playing)\n-// \n+//\n GameManipulator.readGameState = function () {\n \t// Read GameOver\n \tvar found = scanner.scanUntil(\n@@ -170,7 +170,7 @@ GameManipulator.readGameState = function () {\n \t\t// Trigger callback and clear\n \t\tGameManipulator.onGameEnd && GameManipulator.onGameEnd(GameManipulator.points);\n \t\tGameManipulator.onGameEnd = null;\n-\t\t\n+\n \t\t// console.log('GAME OVER: '+GameManipulator.points);\n \n \t}else if(!found && GameManipulator.gamestate != 'PLAYING'){\n@@ -203,14 +203,14 @@ GameManipulator.readGameState = function () {\n }\n \n \n-// \n+//\n // Call this to start a fresh new game\n-// Will wait untill game has ended, \n+// Will wait untill game has ended,\n // and call the `next` callback\n-// \n+//\n var _startKeyInterval;\n GameManipulator.startNewGame = function (next) {\n-\t\n+\n \t// Refresh state\n \tGameManipulator.readGameState();\n \n@@ -243,13 +243,13 @@ GameManipulator.startNewGame = function (next) {\n }\n \n \n-// \n+//\n // Compute points based on sensors\n-// \n+//\n // Basicaly, checks if an object has\n // passed trough the sensor and the\n // value is now higher than before\n-// \n+//\n GameManipulator.computePoints = function () {\n \tfor(var k in GameManipulator.sensors){\n \t\tvar sensor = GameManipulator.sensors[k];\n@@ -262,19 +262,19 @@ GameManipulator.computePoints = function () {\n }\n \n \n-// \n+//\n // Read sensors\n-// \n-// Sensors are like ray-traces: \n+//\n+// Sensors are like ray-traces:\n //   They have a starting point,\n //   and a limit to search for.\n-// \n+//\n // Each sensor can gatter data about\n // the DISTANCE of the object, it's\n // SIZE and it's speed\n-// \n+//\n // Note: We currently only have a sensor.\n-// \n+//\n GameManipulator.readSensors = function () {\n \tvar offset = GameManipulator.offset;\n \n@@ -313,9 +313,9 @@ GameManipulator.readSensors = function () {\n \t\tif(end){\n \t\t\tsensor.value = (end[0] - start[0]) / (GameManipulator.width * sensor.length);\n \n-\t\t\t// \n+\t\t\t//\n \t\t\t// Calculate size of obstacle\n-\t\t\t// \n+\t\t\t//\n \t\t\tvar endPoint = scanner.scanUntil(\n \t\t\t\t[end[0] + 75, end[1]],\n \t\t\t\t[-2, 0],\n@@ -354,7 +354,7 @@ GameManipulator.readSensors = function () {\n \t\tif(sensor.value < sensor.lastValue){\n \t\t\t// Compute speed\n \t\t\tvar newSpeed = (sensor.lastValue - sensor.value) / dt;\n-\t\t\t\n+\n \t\t\tsensor.lastSpeeds.unshift(newSpeed);\n \n \t\t\twhile(sensor.lastSpeeds.length > 10)\n@@ -366,7 +366,7 @@ GameManipulator.readSensors = function () {\n \t\t\t\tavgSpeed += sensor.lastSpeeds[k] / sensor.lastSpeeds.length;\n \n \t\t\tsensor.speed = Math.max(avgSpeed - 1.5, sensor.speed);\n-\t\t\t\n+\n \t\t}\n \n \t\tsensor.size = Math.min(sensor.size, 1.0);\n@@ -385,13 +385,13 @@ GameManipulator.readSensors = function () {\n }\n \n \n-// \n+//\n // Set action to game\n-// Values: \n+// Values:\n //  0.0 to  0.4: DOWN\n //  0.4 to  0.6: NOTHING\n //  0.6 to  1.0: UP (JUMP)\n-// \n+//\n var PRESS = 'down';\n var RELEASE = 'up';\n GameManipulator.lastOutputSet = 'NONE';\n@@ -430,24 +430,24 @@ GameManipulator.setGameOutput = function (output){\n \tGameManipulator.lastOutputSet = GameManipulator.gameOutputString;\n }\n \n-// \n+//\n // Simply maps an real number to string actions\n-// \n+//\n GameManipulator.getDiscreteState = function (value){\n \tif(value < 0.45){\n \t\treturn 'DOWN'\n \t}else if(value > 0.55){\n \t\treturn 'JUMP';\n \t}\n-\t\n+\n \treturn 'NORM';\n }\n \n \n-// \n+//\n // Click on the Starting point\n // to make sure game is focused\n-// \n+//\n GameManipulator.focusGame = function (){\n \trobot.moveMouse(GameManipulator.offset[0], GameManipulator.offset[1]);\n \trobot.mouseClick(\"left\");"
        },
        {
          "sha": "8250059f74bfb6f8227a68d3014864d6f6561a05",
          "filename": "index.js",
          "status": "modified",
          "additions": 17,
          "deletions": 17,
          "changes": 34,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/929c411ca499bbdd9e00c9a6c213d803f6c820b6/index.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/929c411ca499bbdd9e00c9a6c213d803f6c820b6/index.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/index.js?ref=929c411ca499bbdd9e00c9a6c213d803f6c820b6",
          "patch": "@@ -3,30 +3,30 @@\n */\n \n var UI = require('./UI');\n-var robot = require('./robotjs');\n+var robot = require('robotjs');\n var Learner = require('./Learner');\n var scanner = require('./scanner');\n var GameManipulator = require('./GameManipulator');\n \n-// \n+//\n // Configure Robotjs\n-// \n+//\n robot.setMouseDelay(1);\n \n \n-// \n+//\n // Initialize Game\n-// \n+//\n GameManipulator.findGamePosition();\n \n \n-// \n+//\n // Check for found game\n-// \n+//\n if(GameManipulator.offset){\n \t// Uncomment this line to debug the\n \t// starting point (Check if it's detecting it correcly)\n-\t\n+\n \t// robot.moveMouse(GameManipulator.offset[0]+GameManipulator.sensors[0].offset[0],\n \t// \t\tGameManipulator.offset[1] + GameManipulator.sensors[0].offset[1]);\n \n@@ -37,27 +37,27 @@ if(GameManipulator.offset){\n }\n \n \n-// \n+//\n // Initialize UI\n-// \n+//\n UI.init(GameManipulator, Learner);\n \n-// \n+//\n // Init Learner\n-// \n+//\n Learner.init(GameManipulator, UI, 12, 4, 0.2);\n \n \n-// \n+//\n // Start reading game state and sensors\n-// \n+//\n setInterval(GameManipulator.readSensors, 40);\n setInterval(GameManipulator.readGameState, 200);\n \n \n-// \n+//\n // Start game (Example of API usage)\n-// \n+//\n /*\n function startGame () {\n \tvar game = Math.round(Math.random() * 100);\n@@ -71,6 +71,6 @@ function startGame () {\n \n \t\t\tstartGame();\n \t\t}\n-\t});\t\n+\t});\n }\n */\n\\ No newline at end of file"
        },
        {
          "sha": "e1ae1ccfe6ab676a30e32e089df6b48b231cf738",
          "filename": "scanner.js",
          "status": "modified",
          "additions": 11,
          "deletions": 11,
          "changes": 22,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/929c411ca499bbdd9e00c9a6c213d803f6c820b6/scanner.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/929c411ca499bbdd9e00c9a6c213d803f6c820b6/scanner.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/scanner.js?ref=929c411ca499bbdd9e00c9a6c213d803f6c820b6",
          "patch": "@@ -3,7 +3,7 @@\n */\n \n // External Modules\n-var robot = require('./robotjs');\n+var robot = require('robotjs');\n var screenSize = robot.getScreenSize();\n \n // Indexes\n@@ -13,29 +13,29 @@ var Y = 1;\n // Create the \"class\" wrapper\n var scanner = {};\n \n-// \n+//\n // Check if the given position is outside the Screen\n-// \n+//\n scanner.isOutOfBound = function (pos) {\n \tif( pos[X] < 0 || pos[Y] < 0 ||\n \t\tpos[X] >= screenSize.width ||\n \t\tpos[Y] >= screenSize.height)\n \t\treturn true;\n \n-\treturn false;\t\t\n+\treturn false;\n }\n \n-// \n+//\n // Limits the x/y values of position to fit the screen\n-// \n+//\n scanner.makeInBounds = function (pos) {\n-\t\n+\n \tif(pos[X] < 0)\n \t\tpos[X] = 0;\n \n \tif(pos[X] >= screenSize.width)\n \t\tpos[X] = screenSize.width - 1;\n-\t\n+\n \tif(pos[Y] < 0)\n \t\tpos[Y] = 0;\n \n@@ -49,11 +49,11 @@ scanner.makeInBounds = function (pos) {\n \tGiven start [X, Y], and a DELTA [dX, dY],\n \tmaps from \"start\", adding \"delta\" to position,\n \tuntil \"matchinColor\" is found OR isOutOfBounds.\n-\t\n+\n \tIf iterations reach > iterLimit:\n \t\treturns null;\n \n-\tif isOutOfBounds: \n+\tif isOutOfBounds:\n \t\treturns null\n \n \totherwise:\n@@ -78,7 +78,7 @@ scanner.scanUntil = function (start, delta, matchingColor, invertMatch, iterLimi\n \n \t\tif(!invertMatch && color.toString() == matchingColor)\n \t\t\treturn current;\n-\t\t\n+\n \t\tif(invertMatch && color.toString() != matchingColor)\n \t\t\treturn current;\n "
        }
      ]
    },
    "838c2fd9a5fc2820340e01e009acae4d7018ba71": {
      "sha": "838c2fd9a5fc2820340e01e009acae4d7018ba71",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6ODM4YzJmZDlhNWZjMjgyMDM0MGUwMWUwMDlhY2FlNGQ3MDE4YmE3MQ==",
      "commit": {
        "author": {
          "name": "Rodrigo Alviani",
          "email": "rodrigoalviani@gmail.com",
          "date": "2015-12-28T11:16:29Z"
        },
        "committer": {
          "name": "Rodrigo Alviani",
          "email": "rodrigoalviani@gmail.com",
          "date": "2015-12-28T11:16:29Z"
        },
        "message": "Add robotjs actual stable version",
        "tree": {
          "sha": "68107d66cad90e05bf773dc1c096fbff9ff2dc68",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/68107d66cad90e05bf773dc1c096fbff9ff2dc68"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/838c2fd9a5fc2820340e01e009acae4d7018ba71",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/838c2fd9a5fc2820340e01e009acae4d7018ba71",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/838c2fd9a5fc2820340e01e009acae4d7018ba71",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/838c2fd9a5fc2820340e01e009acae4d7018ba71/comments",
      "author": {
        "login": "rodrigoalviani",
        "id": 5366090,
        "node_id": "MDQ6VXNlcjUzNjYwOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5366090?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rodrigoalviani",
        "html_url": "https://github.com/rodrigoalviani",
        "followers_url": "https://api.github.com/users/rodrigoalviani/followers",
        "following_url": "https://api.github.com/users/rodrigoalviani/following{/other_user}",
        "gists_url": "https://api.github.com/users/rodrigoalviani/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rodrigoalviani/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rodrigoalviani/subscriptions",
        "organizations_url": "https://api.github.com/users/rodrigoalviani/orgs",
        "repos_url": "https://api.github.com/users/rodrigoalviani/repos",
        "events_url": "https://api.github.com/users/rodrigoalviani/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rodrigoalviani/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "rodrigoalviani",
        "id": 5366090,
        "node_id": "MDQ6VXNlcjUzNjYwOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5366090?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rodrigoalviani",
        "html_url": "https://github.com/rodrigoalviani",
        "followers_url": "https://api.github.com/users/rodrigoalviani/followers",
        "following_url": "https://api.github.com/users/rodrigoalviani/following{/other_user}",
        "gists_url": "https://api.github.com/users/rodrigoalviani/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rodrigoalviani/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rodrigoalviani/subscriptions",
        "organizations_url": "https://api.github.com/users/rodrigoalviani/orgs",
        "repos_url": "https://api.github.com/users/rodrigoalviani/repos",
        "events_url": "https://api.github.com/users/rodrigoalviani/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rodrigoalviani/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "f15d690a64d0107b753e7560b5cc5f6c020e30f5",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/f15d690a64d0107b753e7560b5cc5f6c020e30f5",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/f15d690a64d0107b753e7560b5cc5f6c020e30f5"
        }
      ],
      "stats": { "total": 2, "additions": 1, "deletions": 1 },
      "files": [
        {
          "sha": "238abcd0506bc19ca2df1f1de4c2be149ce28c14",
          "filename": "package.json",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "changes": 2,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/838c2fd9a5fc2820340e01e009acae4d7018ba71/package.json",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/838c2fd9a5fc2820340e01e009acae4d7018ba71/package.json",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/package.json?ref=838c2fd9a5fc2820340e01e009acae4d7018ba71",
          "patch": "@@ -13,7 +13,7 @@\n     \"blessed\": \"^0.1.81\",\n     \"blessed-contrib\": \"^2.5.2\",\n     \"lodash\": \"^3.10.1\",\n-    \"robotjs\": \"latest\",\n+    \"robotjs\": \"^0.3.6\",\n     \"synaptic\": \"^1.0.2\"\n   }\n }"
        }
      ]
    },
    "f15d690a64d0107b753e7560b5cc5f6c020e30f5": {
      "sha": "f15d690a64d0107b753e7560b5cc5f6c020e30f5",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6ZjE1ZDY5MGE2NGQwMTA3Yjc1M2U3NTYwYjVjYzVmNmMwMjBlMzBmNQ==",
      "commit": {
        "author": {
          "name": "Rodrigo Alviani",
          "email": "rodrigoalviani@gmail.com",
          "date": "2015-12-28T11:15:17Z"
        },
        "committer": {
          "name": "Rodrigo Alviani",
          "email": "rodrigoalviani@gmail.com",
          "date": "2015-12-28T11:15:17Z"
        },
        "message": "Fix robotjs installation (from npm)",
        "tree": {
          "sha": "d99a012bcaed61bd6ece842f25b50c07688cc365",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/d99a012bcaed61bd6ece842f25b50c07688cc365"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/f15d690a64d0107b753e7560b5cc5f6c020e30f5",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/f15d690a64d0107b753e7560b5cc5f6c020e30f5",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/f15d690a64d0107b753e7560b5cc5f6c020e30f5",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/f15d690a64d0107b753e7560b5cc5f6c020e30f5/comments",
      "author": {
        "login": "rodrigoalviani",
        "id": 5366090,
        "node_id": "MDQ6VXNlcjUzNjYwOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5366090?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rodrigoalviani",
        "html_url": "https://github.com/rodrigoalviani",
        "followers_url": "https://api.github.com/users/rodrigoalviani/followers",
        "following_url": "https://api.github.com/users/rodrigoalviani/following{/other_user}",
        "gists_url": "https://api.github.com/users/rodrigoalviani/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rodrigoalviani/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rodrigoalviani/subscriptions",
        "organizations_url": "https://api.github.com/users/rodrigoalviani/orgs",
        "repos_url": "https://api.github.com/users/rodrigoalviani/repos",
        "events_url": "https://api.github.com/users/rodrigoalviani/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rodrigoalviani/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "rodrigoalviani",
        "id": 5366090,
        "node_id": "MDQ6VXNlcjUzNjYwOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5366090?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rodrigoalviani",
        "html_url": "https://github.com/rodrigoalviani",
        "followers_url": "https://api.github.com/users/rodrigoalviani/followers",
        "following_url": "https://api.github.com/users/rodrigoalviani/following{/other_user}",
        "gists_url": "https://api.github.com/users/rodrigoalviani/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rodrigoalviani/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rodrigoalviani/subscriptions",
        "organizations_url": "https://api.github.com/users/rodrigoalviani/orgs",
        "repos_url": "https://api.github.com/users/rodrigoalviani/repos",
        "events_url": "https://api.github.com/users/rodrigoalviani/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rodrigoalviani/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "c003c1d87ed84784d2875441c7a3ba3b601395d5",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/c003c1d87ed84784d2875441c7a3ba3b601395d5",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/c003c1d87ed84784d2875441c7a3ba3b601395d5"
        }
      ],
      "stats": { "total": 2, "additions": 1, "deletions": 1 },
      "files": [
        {
          "sha": "0d24bd4841992b6c794e05e8977d8cbd611d668d",
          "filename": "package.json",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "changes": 2,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/f15d690a64d0107b753e7560b5cc5f6c020e30f5/package.json",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/f15d690a64d0107b753e7560b5cc5f6c020e30f5/package.json",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/package.json?ref=f15d690a64d0107b753e7560b5cc5f6c020e30f5",
          "patch": "@@ -13,7 +13,7 @@\n     \"blessed\": \"^0.1.81\",\n     \"blessed-contrib\": \"^2.5.2\",\n     \"lodash\": \"^3.10.1\",\n-    \"robotjs\": \"file:robotjs\",\n+    \"robotjs\": \"latest\",\n     \"synaptic\": \"^1.0.2\"\n   }\n }"
        }
      ]
    },
    "1d4a508207377b770775e3407cbd0e129752163d": {
      "sha": "1d4a508207377b770775e3407cbd0e129752163d",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6MWQ0YTUwODIwNzM3N2I3NzA3NzVlMzQwN2NiZDBlMTI5NzUyMTYzZA==",
      "commit": {
        "author": {
          "name": "Rodrigo Alviani",
          "email": "rodrigoalviani@gmail.com",
          "date": "2015-12-28T11:32:57Z"
        },
        "committer": {
          "name": "Rodrigo Alviani",
          "email": "rodrigoalviani@gmail.com",
          "date": "2015-12-28T11:32:57Z"
        },
        "message": "Fix genome data save path + code linting",
        "tree": {
          "sha": "e852298473dea1b5a4581eb9463344977efb81f7",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/e852298473dea1b5a4581eb9463344977efb81f7"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/1d4a508207377b770775e3407cbd0e129752163d",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/1d4a508207377b770775e3407cbd0e129752163d",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/1d4a508207377b770775e3407cbd0e129752163d",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/1d4a508207377b770775e3407cbd0e129752163d/comments",
      "author": {
        "login": "rodrigoalviani",
        "id": 5366090,
        "node_id": "MDQ6VXNlcjUzNjYwOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5366090?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rodrigoalviani",
        "html_url": "https://github.com/rodrigoalviani",
        "followers_url": "https://api.github.com/users/rodrigoalviani/followers",
        "following_url": "https://api.github.com/users/rodrigoalviani/following{/other_user}",
        "gists_url": "https://api.github.com/users/rodrigoalviani/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rodrigoalviani/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rodrigoalviani/subscriptions",
        "organizations_url": "https://api.github.com/users/rodrigoalviani/orgs",
        "repos_url": "https://api.github.com/users/rodrigoalviani/repos",
        "events_url": "https://api.github.com/users/rodrigoalviani/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rodrigoalviani/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "rodrigoalviani",
        "id": 5366090,
        "node_id": "MDQ6VXNlcjUzNjYwOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5366090?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rodrigoalviani",
        "html_url": "https://github.com/rodrigoalviani",
        "followers_url": "https://api.github.com/users/rodrigoalviani/followers",
        "following_url": "https://api.github.com/users/rodrigoalviani/following{/other_user}",
        "gists_url": "https://api.github.com/users/rodrigoalviani/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rodrigoalviani/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rodrigoalviani/subscriptions",
        "organizations_url": "https://api.github.com/users/rodrigoalviani/orgs",
        "repos_url": "https://api.github.com/users/rodrigoalviani/repos",
        "events_url": "https://api.github.com/users/rodrigoalviani/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rodrigoalviani/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "929c411ca499bbdd9e00c9a6c213d803f6c820b6",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/929c411ca499bbdd9e00c9a6c213d803f6c820b6",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/929c411ca499bbdd9e00c9a6c213d803f6c820b6"
        }
      ],
      "stats": { "total": 52, "additions": 26, "deletions": 26 },
      "files": [
        {
          "sha": "8f4dd5add49c8f19eada03d0b643caf62241a1e4",
          "filename": "UI.js",
          "status": "modified",
          "additions": 26,
          "deletions": 26,
          "changes": 52,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/1d4a508207377b770775e3407cbd0e129752163d/UI.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/1d4a508207377b770775e3407cbd0e129752163d/UI.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/UI.js?ref=1d4a508207377b770775e3407cbd0e129752163d",
          "patch": "@@ -10,9 +10,9 @@ var screen = blessed.screen()\n var UI = {};\n \n \n-// \n+//\n // Initialize UI objects\n-// \n+//\n UI.init = function (gameManipulator, learner) {\n \tUI.gm = gameManipulator;\n \tUI.learner = learner;\n@@ -23,9 +23,9 @@ UI.init = function (gameManipulator, learner) {\n \t\tscreen: screen\n \t});\n \n-\t// \n+\t//\n \t// Build Sensor inputs\n-\t// \n+\t//\n \tUI.uiSensors = UI.grid.set(0, 0, 3, 6, contrib.bar, {\n \t\tlabel: 'Network Inputs',\n \t\t// bg: 'white',\n@@ -35,18 +35,18 @@ UI.init = function (gameManipulator, learner) {\n \t\tmaxHeight: 100,\n \t});\n \n-\t// \n+\t//\n \t// Build Log box\n-\t// \n+\t//\n \tUI.logger = UI.grid.set(3, 0, 3, 6, contrib.log, {\n \t\tfg: 'green',\n \t\tselectedFg: 'green',\n \t\tlabel: 'Logs'\n \t});\n \n-\t// \n+\t//\n \t// Current score/time view\n-\t// \n+\t//\n \tUI.uiScore = UI.grid.set(6, 0, 3, 3, blessed.Text, {\n \t\tlabel: 'Game Stats',\n \t\t// bg: 'green',\n@@ -55,9 +55,9 @@ UI.init = function (gameManipulator, learner) {\n \t\talign: 'center',\n \t});\n \n-\t// \n+\t//\n \t// Current Genomes stats\n-\t// \n+\t//\n \tUI.uiGenomes = UI.grid.set(6, 3, 3, 3, blessed.Text, {\n \t\tlabel: 'Genome Stats',\n \t\t// bg: 'green',\n@@ -67,9 +67,9 @@ UI.init = function (gameManipulator, learner) {\n \t});\n \n \n-\t// \n+\t//\n \t// Load Tree\n-\t// \n+\t//\n \tUI.savesTree = UI.grid.set(9, 0, 3, 3, contrib.tree, {\n \t\tlabel: 'Saved Genomes',\n \t});\n@@ -93,9 +93,9 @@ UI.init = function (gameManipulator, learner) {\n \n \tUI.refreshFiles();\n \n-\t// \n+\t//\n \t// Save Btn\n-\t// \n+\t//\n \tUI.btnSave = UI.grid.set(9, 3, 3, 3, blessed.box, {\n \t\tlabel: 'Save to File',\n \t\tbg: 'green',\n@@ -113,7 +113,7 @@ UI.init = function (gameManipulator, learner) {\n \n \t\tUI.logger.log('Saving '+jsonGenomes.length+' genomes...');\n \n-\t\tvar fileName = './genomes.gen_'+UI.learner.generation+'_'+Date.now()+'.json';\n+\t\tvar fileName = './genomes/gen_'+UI.learner.generation+'_'+Date.now()+'.json';\n \t\tfs.writeFile(fileName, JSON.stringify(jsonGenomes), function (err){\n \t\t\tif(err)\n \t\t\t\tUI.logger.log('Failed to save! '+err);\n@@ -145,12 +145,12 @@ UI.init = function (gameManipulator, learner) {\n };\n \n \n-// \n+//\n // Read entire folder and select files that match a .json file\n-// \n+//\n UI.refreshFiles = function (){\n \tvar files = [];\n-\tvar fileData = \n+\tvar fileData =\n \t{\n \t\tname: 'Saved Files',\n \t\textended: true,\n@@ -174,14 +174,14 @@ UI.refreshFiles = function (){\n \tUI.savesTree.setData(fileData);\n }\n \n-// \n+//\n // Updates data on the screen and render it\n-// \n+//\n UI.render = function () {\n \n-\t// \n+\t//\n \t// Update data\n-\t// \n+\t//\n \tUI.uiSensors.setData({\n \t\ttitles: ['Distance', 'Size', 'Speed', 'Activation'],\n \t\tdata: [\n@@ -192,9 +192,9 @@ UI.render = function () {\n \t\t]\n \t})\n \n-\t// \n+\t//\n \t// Set Genome stats and score\n-\t// \n+\t//\n \tvar learn = UI.learner;\n \tvar uiStats = 'Status: '+learn.state+'\\n';\n \tuiStats += 'Fitness: '+UI.gm.points+'\\nGameStatus: '+UI.gm.gamestate + '\\n';\n@@ -208,9 +208,9 @@ UI.render = function () {\n \t\tUI.uiGenomes.setText('Loading...');\n \t}\n \n-\t// \n+\t//\n \t// Render screen\n-\t// \n+\t//\n \tscreen.render();\n }\n "
        }
      ]
    },
    "b31eb151d6dce516137693bc6cf0263c40ee5bd6": {
      "sha": "b31eb151d6dce516137693bc6cf0263c40ee5bd6",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6YjMxZWIxNTFkNmRjZTUxNjEzNzY5M2JjNmNmMDI2M2M0MGVlNWJkNg==",
      "commit": {
        "author": {
          "name": "tngan",
          "email": "tonynwk919@gmail.com",
          "date": "2015-12-29T13:24:25Z"
        },
        "committer": {
          "name": "tngan",
          "email": "tonynwk919@gmail.com",
          "date": "2015-12-29T13:24:25Z"
        },
        "message": "Fix typo in README.md",
        "tree": {
          "sha": "690c887ba251f48a6fee9d76289de48ca4479e44",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/690c887ba251f48a6fee9d76289de48ca4479e44"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/b31eb151d6dce516137693bc6cf0263c40ee5bd6",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/b31eb151d6dce516137693bc6cf0263c40ee5bd6",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/b31eb151d6dce516137693bc6cf0263c40ee5bd6",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/b31eb151d6dce516137693bc6cf0263c40ee5bd6/comments",
      "author": {
        "login": "tngan",
        "id": 10245912,
        "node_id": "MDQ6VXNlcjEwMjQ1OTEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/10245912?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tngan",
        "html_url": "https://github.com/tngan",
        "followers_url": "https://api.github.com/users/tngan/followers",
        "following_url": "https://api.github.com/users/tngan/following{/other_user}",
        "gists_url": "https://api.github.com/users/tngan/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tngan/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tngan/subscriptions",
        "organizations_url": "https://api.github.com/users/tngan/orgs",
        "repos_url": "https://api.github.com/users/tngan/repos",
        "events_url": "https://api.github.com/users/tngan/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tngan/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "tngan",
        "id": 10245912,
        "node_id": "MDQ6VXNlcjEwMjQ1OTEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/10245912?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tngan",
        "html_url": "https://github.com/tngan",
        "followers_url": "https://api.github.com/users/tngan/followers",
        "following_url": "https://api.github.com/users/tngan/following{/other_user}",
        "gists_url": "https://api.github.com/users/tngan/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tngan/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tngan/subscriptions",
        "organizations_url": "https://api.github.com/users/tngan/orgs",
        "repos_url": "https://api.github.com/users/tngan/repos",
        "events_url": "https://api.github.com/users/tngan/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tngan/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "c6a36b68a4abd2e125658b7020f0ab6946029d02",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/c6a36b68a4abd2e125658b7020f0ab6946029d02",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/c6a36b68a4abd2e125658b7020f0ab6946029d02"
        }
      ],
      "stats": { "total": 4, "additions": 2, "deletions": 2 },
      "files": [
        {
          "sha": "ac86acb7938cbfe57b34fed7fad77e562792db8d",
          "filename": "README.md",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "changes": 4,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/b31eb151d6dce516137693bc6cf0263c40ee5bd6/README.md",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/b31eb151d6dce516137693bc6cf0263c40ee5bd6/README.md",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/README.md?ref=b31eb151d6dce516137693bc6cf0263c40ee5bd6",
          "patch": "@@ -7,7 +7,7 @@ jump cactus, using Neural Networks and a simple Genetic Algorithm.\n \n **Watch** this video to see it in action, and learn how it works: [Artificial Inteligence with Google's Dinosaur](https://youtu.be/P7XHzqZjXQs)\n \n-## Instalation\n+## Installation\n \n 1. Install `Node.js` on your computer.\n \n@@ -57,7 +57,7 @@ in the values/configurations of the Neural Network, creating a new genome.\n We do the cross-over/mutation until we get 12 genomes again, and repeat it constantly.\n \n \n-## Inplementation\n+## Implementation\n \n All the implementation was done using Node.js, with Synaptic (Neural Network library),\n and RobotJs (a library to read pixels and simulate key presses)."
        }
      ]
    },
    "ae3bef1d4d4ecc594a0a48d1983fa89b1609c3f5": {
      "sha": "ae3bef1d4d4ecc594a0a48d1983fa89b1609c3f5",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6YWUzYmVmMWQ0ZDRlY2M1OTRhMGE0OGQxOTgzZmE4OWIxNjA5YzNmNQ==",
      "commit": {
        "author": {
          "name": "John Mora",
          "email": "johmora12@engineer.com",
          "date": "2016-07-08T19:56:36Z"
        },
        "committer": {
          "name": "John Mora",
          "email": "johmora12@engineer.com",
          "date": "2016-07-08T19:56:36Z"
        },
        "message": "fixed package.json",
        "tree": {
          "sha": "4901bdd0fd61ce3356818d84aa81a2a81e0816ca",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/4901bdd0fd61ce3356818d84aa81a2a81e0816ca"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/ae3bef1d4d4ecc594a0a48d1983fa89b1609c3f5",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/ae3bef1d4d4ecc594a0a48d1983fa89b1609c3f5",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/ae3bef1d4d4ecc594a0a48d1983fa89b1609c3f5",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/ae3bef1d4d4ecc594a0a48d1983fa89b1609c3f5/comments",
      "author": null,
      "committer": null,
      "parents": [
        {
          "sha": "15067c9f5a2e2f91292ba53e8fcc4cc2d80c8624",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/15067c9f5a2e2f91292ba53e8fcc4cc2d80c8624",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/15067c9f5a2e2f91292ba53e8fcc4cc2d80c8624"
        }
      ],
      "stats": { "total": 6, "additions": 5, "deletions": 1 },
      "files": [
        {
          "sha": "38ffa4071e568218444450dfbafb51e25ffdceaa",
          "filename": "package.json",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "changes": 6,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/ae3bef1d4d4ecc594a0a48d1983fa89b1609c3f5/package.json",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/ae3bef1d4d4ecc594a0a48d1983fa89b1609c3f5/package.json",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/package.json?ref=ae3bef1d4d4ecc594a0a48d1983fa89b1609c3f5",
          "patch": "@@ -14,6 +14,10 @@\n     \"blessed-contrib\": \"^2.5.2\",\n     \"lodash\": \"^3.10.1\",\n     \"robotjs\": \"^0.3.6\",\n-    \"synaptic\": \"^1.0.2\"\n+    \"synaptic\": \"^1.0.5\"\n+  },\n+  \"repository\": {\n+    \"type\": \"git\",\n+    \"url\": \"git://github.com/ivanseidel/IAMDinosaur.git\"\n   }\n }"
        }
      ]
    },
    "8263db554465fd943fff0d90915073dd533a02d6": {
      "sha": "8263db554465fd943fff0d90915073dd533a02d6",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6ODI2M2RiNTU0NDY1ZmQ5NDNmZmYwZDkwOTE1MDczZGQ1MzNhMDJkNg==",
      "commit": {
        "author": {
          "name": "John Mora",
          "email": "johmora12@engineer.com",
          "date": "2016-09-10T05:44:01Z"
        },
        "committer": {
          "name": "John Mora",
          "email": "johmora12@engineer.com",
          "date": "2016-09-10T05:44:01Z"
        },
        "message": "Fixed Save, hotkey-only -> hotkey+UI\n\nMoved save procedure to variable so it could be called by the UI and\nthe hotkey (O).",
        "tree": {
          "sha": "07e7e7ddd00ed728652d6a35f6e287a28bf11ca5",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/07e7e7ddd00ed728652d6a35f6e287a28bf11ca5"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/8263db554465fd943fff0d90915073dd533a02d6",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/8263db554465fd943fff0d90915073dd533a02d6",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/8263db554465fd943fff0d90915073dd533a02d6",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/8263db554465fd943fff0d90915073dd533a02d6/comments",
      "author": null,
      "committer": null,
      "parents": [
        {
          "sha": "526c2ab571624c87c69426f7b70515d764762b77",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/526c2ab571624c87c69426f7b70515d764762b77",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/526c2ab571624c87c69426f7b70515d764762b77"
        }
      ],
      "stats": { "total": 45, "additions": 23, "deletions": 22 },
      "files": [
        {
          "sha": "5637e56eaaeaab1b7c5b946b3b816f34f57c1554",
          "filename": "UI.js",
          "status": "modified",
          "additions": 23,
          "deletions": 22,
          "changes": 45,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/8263db554465fd943fff0d90915073dd533a02d6/UI.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/8263db554465fd943fff0d90915073dd533a02d6/UI.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/UI.js?ref=8263db554465fd943fff0d90915073dd533a02d6",
          "patch": "@@ -5,6 +5,27 @@ var fs = require('fs');\n var screen = blessed.screen()\n \n var UI = {};\n+var savegame = function(){\n+  var jsonGenomes = [];\n+  for (var k in UI.learner.genomes) {\n+    jsonGenomes.push(UI.learner.genomes[k].toJSON());\n+  }\n+\n+  UI.logger.log('Saving '+jsonGenomes.length+' genomes...');\n+\n+  var dir = './genomes';\n+  var fileName = dir + '/gen_'+UI.learner.generation+'_'+Date.now()+'.json';\n+  fs.writeFile(fileName, JSON.stringify(jsonGenomes), function (err){\n+    if (err) {\n+      UI.logger.log('Failed to save! '+err);\n+    } else {\n+      UI.logger.log('Saved to '+fileName);\n+    }\n+\n+    UI.refreshFiles();\n+  });\n+\n+};\n \n \n // Initialize UI objects\n@@ -95,28 +116,8 @@ UI.init = function (gameManipulator, learner) {\n     align: 'center',\n   });\n \n-  //UI.btnSave.on('click', function (){\n-  screen.key(['o','O'], function(){\n-    var jsonGenomes = [];\n-    for (var k in UI.learner.genomes) {\n-      jsonGenomes.push(UI.learner.genomes[k].toJSON());\n-    }\n-\n-    UI.logger.log('Saving '+jsonGenomes.length+' genomes...');\n-\n-    var dir = './genomes';\n-    var fileName = dir + '/gen_'+UI.learner.generation+'_'+Date.now()+'.json';\n-    fs.writeFile(fileName, JSON.stringify(jsonGenomes), function (err){\n-      if (err) {\n-        UI.logger.log('Failed to save! '+err);\n-      } else {\n-        UI.logger.log('Saved to '+fileName);\n-      }\n-\n-      UI.refreshFiles();\n-    });\n-\n-  });\n+  UI.btnSave.on('click', savegame())\n+  screen.key(['o','O'], savegame());\n \n   screen.key(['escape', 'q', 'C-c'], function(ch, key) {\n     return process.exit(0);"
        }
      ]
    },
    "526c2ab571624c87c69426f7b70515d764762b77": {
      "sha": "526c2ab571624c87c69426f7b70515d764762b77",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6NTI2YzJhYjU3MTYyNGM4N2M2OTQyNmY3YjcwNTE1ZDc2NDc2MmI3Nw==",
      "commit": {
        "author": {
          "name": "John Mora",
          "email": "johmora12@engineer.com",
          "date": "2016-09-10T05:31:21Z"
        },
        "committer": {
          "name": "John Mora",
          "email": "johmora12@engineer.com",
          "date": "2016-09-10T05:31:21Z"
        },
        "message": "reverted code.",
        "tree": {
          "sha": "c306f307da8ca501a90aee40ddea027b9b452b0a",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/c306f307da8ca501a90aee40ddea027b9b452b0a"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/526c2ab571624c87c69426f7b70515d764762b77",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/526c2ab571624c87c69426f7b70515d764762b77",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/526c2ab571624c87c69426f7b70515d764762b77",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/526c2ab571624c87c69426f7b70515d764762b77/comments",
      "author": null,
      "committer": null,
      "parents": [
        {
          "sha": "fa40a6f4042e7b6640cdd73c4d51aeab4bdb2aad",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/fa40a6f4042e7b6640cdd73c4d51aeab4bdb2aad",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/fa40a6f4042e7b6640cdd73c4d51aeab4bdb2aad"
        }
      ],
      "stats": { "total": 1496, "additions": 836, "deletions": 660 },
      "files": [
        {
          "sha": "80f5dfdf22db3bcbe3a7d79082c3a0a3feb359df",
          "filename": "GameManipulator.js",
          "status": "modified",
          "additions": 363,
          "deletions": 267,
          "changes": 630,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/526c2ab571624c87c69426f7b70515d764762b77/GameManipulator.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/526c2ab571624c87c69426f7b70515d764762b77/GameManipulator.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/GameManipulator.js?ref=526c2ab571624c87c69426f7b70515d764762b77",
          "patch": "@@ -1,341 +1,437 @@\n-'use strict';\n+var robot = require('robotjs');\n \n-var robot = require('robotjs'),\n-  scanner = require ('./scanner'),\n-  screenSize = robot.getScreenSize(),\n-  COLOR_DINOSAUR = \"535353\"; // This is the Dino's colour, also used by Obstacles.\n+// Cache screen size\n+var screenSize = robot.getScreenSize();\n+\n+var Scanner = require ('./Scanner');\n+\n+// COLOR DEFINITIONS\n+// This is the Dino's colour, also used by Obstacles.\n+var COLOR_DINOSAUR = '535353';\n+var DARK_COLOR_DINO = 'ACACAC';\n \n var GameManipulator = {\n-\toffset: null,                // Stores the game position (Globally)\n-\twidth: null,                 // Stores the game position (Globally)\n-\tpoints: 0,                   // Stores points (jumps)\n-\tonGameEnd: null,             // Listners\n-\tonGameStart: null,           // Listners\n-\tonSensorData: null,          // Listners\n-\tgamestate: 'OVER',           // Game State\n-\tgameOverOffset: [190, -82],  // GameOver Position\n-\n-\t// Stores an array of \"sensors\" (Ray tracings)\n-\t// Positions are always relative to global \"offset\"\n-\tsensors: [\n+\n+  // Stores the game position (Globally)\n+  offset: null,\n+  width: null,\n+\n+  // Stores points (jumps)\n+  points: 0,\n+\n+  // Listners\n+  onGameEnd: null,\n+  onGameStart: null,\n+  onSensorData: null,\n+\n+  // Game State\n+  gamestate: 'OVER',\n+\n+  // GameOver Position\n+  gameOverOffset: [190, -82],\n+\n+  // Stores an array of \"sensors\" (Ray tracings)\n+  // Positions are always relative to global \"offset\"\n+  sensors: [\n     {\n-\t\t\tlastValue: 1,\n-\t\t\tvalue: null,\n-\t\t\toffset: [84, -15], // 64,-15\n-\t\t\tstep: [4, 0],\n-\t\t\tlength: 0.3,\n-\t\t\tspeed: 0,            // Speed\n-\t\t\tlastComputeSpeed: 0, // Speed\n-\t\t\tsize: 0,             // Computes size of the object\n-\t\t\tcomputeSize: true,   // Computes size of the object\n-\t\t},\n-\t\t// {\n-\t\t// \tlastValue: 1,\n-\t\t// \tvalue: null,\n-\t\t// \toffset: [66, -30],\n-\t\t// \tstep: [5, 0],\n-\t\t// \tlength: 0.5,\n-\t\t// }\n-\t]\n+      lastValue: 1,\n+\n+      value: null,\n+      offset: [84, -15], // 64,-15\n+      step: [4, 0],\n+      length: 0.3,\n+\n+      // Speed\n+      speed: 0,\n+      lastComputeSpeed: 0,\n+\n+      // Computes size of the object\n+      size: 0,\n+      computeSize: true,\n+    },\n+  ]\n };\n \n+\n // Find out dinosaur (fast)\n GameManipulator.findGamePosition = function () {\n-\tvar pos,\n-    dinoPos,\n-    skipXFast = 15;\n+  var pos, dinoPos, skipXFast = 15;\n+\n+  for (var x = 20; x < screenSize.width; x+= skipXFast) {\n+    dinoPos = Scanner.scanUntil(\n+      // Start position\n+      [x, 80],\n+      // Skip pixels\n+      [0, skipXFast],\n+      // Searching Color\n+      COLOR_DINOSAUR,\n+      // Normal mode (not inverse)\n+      false,\n+      // Iteration limit\n+      500 / skipXFast);\n+\n+    if (dinoPos) {\n+      break;\n+    }\n+  }\n \n-\tfor (var x = 20; x < screenSize.width; x += skipXFast) {\n-\t\tdinoPos = scanner.scanUntil([x, 80], [0, skipXFast], COLOR_DINOSAUR, false, 500 / skipXFast);\n+  if (!dinoPos) {\n+    return null;\n+  }\n \n-\t\tif (dinoPos) break;\n-\t}\n+  for (var x = dinoPos[0] - 50; x <= dinoPos[0]; x += 1) {\n+    pos = Scanner.scanUntil(\n+      // Start position\n+      [x, dinoPos[1] - 2],\n+      // Skip pixels\n+      [0, 1],\n+      // Searching Color\n+      COLOR_DINOSAUR,\n+      // Normal mode (not inverse)\n+      false,\n+      // Iteration limit\n+      100);\n+\n+    if (pos) {\n+      break;\n+    }\n+  }\n \n-\tif (!dinoPos) return null;\n+  // Did actually found? If not, error!\n+  if (!pos) {\n+    return null;\n+  }\n \n-\tfor (var x = dinoPos[0] - 50; x <= dinoPos[0]; x += 1) {\n-\t\tpos = scanner.scanUntil([x, dinoPos[1] - 2], [0, 1], COLOR_DINOSAUR, false, 100);\n+  // Find the end of the game\n+  var endPos = pos;\n+\n+  while (robot.getPixelColor(endPos[0] + 3, endPos[1]) == COLOR_DINOSAUR) {\n+     endPos = Scanner.scanUntil(\n+        // Start position\n+        [endPos[0] + 2, endPos[1]],\n+        // Skip pixels\n+        [2, 0],\n+        // Searching Color\n+        COLOR_DINOSAUR,\n+        // Invert mode\n+        true,\n+        // Iteration limit\n+        600);\n+  }\n \n-\t\tif (pos) break;\n+  // Did actually found? If not, error!\n+  if (!endPos) {\n+    return null;\n   }\n \n-\t// Did actually found? If not, error!\n-\tif (!pos) return null;\n+  // Save to allow global access\n+  GameManipulator.offset = pos;\n+  GameManipulator.width = 600;//endPos[0] - pos[0];\n \n-\t// Find the end of the game\n-\tvar endPos = pos;\n+  return pos;\n+};\n \n-\twhile (robot.getPixelColor(endPos[0] + 3, endPos[1]) == COLOR_DINOSAUR) {\n-    endPos = scanner.scanUntil([endPos[0] + 2, endPos[1]], [2, 0], COLOR_DINOSAUR, true, 600);\n-\t}\n \n-\t// Did actually found? If not, error!\n-\tif (!endPos) return null;\n+// Read Game state\n+// (If game is ended or is playing)\n+GameManipulator.readGameState = function () {\n+  // Read GameOver\n+  var found = Scanner.scanUntil(\n+    [\n+      GameManipulator.offset[0] + GameManipulator.gameOverOffset[0],\n+      GameManipulator.offset[1] + GameManipulator.gameOverOffset[1]\n+    ],\n \n-\t// Save to allow global access\n-\tGameManipulator.offset = pos;\n-\tGameManipulator.width = 600; //endPos[0] - pos[0];\n+    [2, 0], COLOR_DINOSAUR, false, 20);\n \n-\treturn pos;\n-};\n+  if (found && GameManipulator.gamestate != 'OVER') {\n+    GameManipulator.gamestate = 'OVER';\n \n-// Read Game state (If game is ended or is playing)\n-GameManipulator.readGameState = function () {\n-\t// Read GameOver\n-\tvar found = scanner.scanUntil(\n-\t\t[\n-\t\t\tGameManipulator.offset[0] + GameManipulator.gameOverOffset[0],\n-\t\t\tGameManipulator.offset[1] + GameManipulator.gameOverOffset[1]\n-\t\t],\n-\t\t[2, 0], COLOR_DINOSAUR, false, 20\n-  );\n-\n-\tif (found && GameManipulator.gamestate != 'OVER') {\n-\t\tGameManipulator.gamestate = 'OVER';\n-\n-\t\t// Clear keys\n-\t\tGameManipulator.setGameOutput(0.5);\n-\n-\t\t// Trigger callback and clear\n-\t\tGameManipulator.onGameEnd && GameManipulator.onGameEnd(GameManipulator.points);\n-\t\tGameManipulator.onGameEnd = null;\n-\n-\t\t// console.log('GAME OVER: '+GameManipulator.points);\n-\t} else if (!found && GameManipulator.gamestate != 'PLAYING') {\n-\t\tGameManipulator.gamestate = 'PLAYING';\n-\n-\t\t// Clear points\n-\t\tGameManipulator.points = 0;\n-\t\tGameManipulator.lastScore = 0;\n-\n-\t\t// Clear keys\n-\t\tGameManipulator.setGameOutput(0.5);\n-\n-\t\t// Clear sensors\n-\t\tGameManipulator.sensors[0].lastComputeSpeed = 0;\n-\t\tGameManipulator.sensors[0].lastSpeeds = [];\n-\t\tGameManipulator.sensors[0].lastValue = 1;\n-\t\tGameManipulator.sensors[0].value = 1;\n-\t\tGameManipulator.sensors[0].speed = 0;\n-\t\tGameManipulator.sensors[0].size = 0;\n-\n-\t\t// Clar Output flags\n-\t\tGameManipulator.lastOutputSet = 'NONE';\n-\n-\t\t// Trigger callback and clear\n-\t\tGameManipulator.onGameStart && GameManipulator.onGameStart();\n-\t\tGameManipulator.onGameStart = null;\n-\n-\t\t// console.log('GAME RUNNING '+GameManipulator.points);\n-\t}\n-};\n+    // Clear keys\n+    GameManipulator.setGameOutput(0.5);\n+\n+    // Trigger callback and clear\n+    GameManipulator.onGameEnd && GameManipulator.onGameEnd(GameManipulator.points);\n+    GameManipulator.onGameEnd = null;\n+\n+    // console.log('GAME OVER: '+GameManipulator.points);\n+\n+  } else if (!found && GameManipulator.gamestate != 'PLAYING') {\n+    GameManipulator.gamestate = 'PLAYING';\n+\n+    // Clear points\n+    GameManipulator.points = 0;\n+    GameManipulator.lastScore = 0;\n+\n+    // Clear keys\n+    GameManipulator.setGameOutput(0.5);\n+\n+    // Clear sensors\n+    GameManipulator.sensors[0].lastComputeSpeed = 0;\n+    GameManipulator.sensors[0].lastSpeeds = [];\n+    GameManipulator.sensors[0].lastValue = 1;\n+    GameManipulator.sensors[0].value = 1;\n+    GameManipulator.sensors[0].speed = 0;\n+    GameManipulator.sensors[0].size = 0;\n+\n+    // Clar Output flags\n+    GameManipulator.lastOutputSet = 'NONE';\n \n-// Call this to start a fresh new game. Will wait until game has ended, and call the `next` callback\n+    // Trigger callback and clear\n+    GameManipulator.onGameStart && GameManipulator.onGameStart();\n+    GameManipulator.onGameStart = null;\n+\n+    // console.log('GAME RUNNING '+GameManipulator.points);\n+  }\n+}\n+\n+\n+// Call this to start a fresh new game\n+// Will wait untill game has ended,\n+// and call the `next` callback\n var _startKeyInterval;\n GameManipulator.startNewGame = function (next) {\n \n-\t// Refresh state\n-\tGameManipulator.readGameState();\n+  // Refresh state\n+  GameManipulator.readGameState();\n \n-\t// If game is already over, press space\n-\tif (GameManipulator.gamestate == 'OVER') {\n-\t\tclearInterval(_startKeyInterval);\n+  // If game is already over, press space\n+  if (GameManipulator.gamestate == 'OVER') {\n+    clearInterval(_startKeyInterval);\n \n-\t\t// Set start callback\n-\t\tGameManipulator.onGameStart = function (argument) {\n-\t\t\tclearInterval(_startKeyInterval);\n-\t\t\tnext && next();\n-\t\t};\n+    // Set start callback\n+    GameManipulator.onGameStart = function (argument) {\n+      clearInterval(_startKeyInterval);\n+      next && next();\n+    };\n \n-\t\t// Press space to begin game (repetidelly)\n-\t\t_startKeyInterval = setInterval(function () {\n-      // Due to dino slowly gliding over the screen after multiple restarts, its better to just reload the page.\n+    // Press space to begin game (repetidelly)\n+    _startKeyInterval = setInterval(function (){\n+      // Due to dino slowly gliding over the screen after multiple restarts, its better to just reload the page\n       robot.keyTap('r','command');\n       setTimeout(function() {\n-          // Once reloaded we wait 0.5sec for it to let us start the game by tapping space.\n+        // Once reloaded we wait 0.5sec for it to let us start the game with a space.\n           robot.keyTap(' ');\n       }, 500);\n-\t\t}, 300);\n-\n-\t\t// Refresh state\n-\t\tGameManipulator.readGameState();\n-\t} else {\n-\t\t// Wait die, and call recursive action\n-\t\tGameManipulator.onGameEnd = function () {\n-\t\t\tGameManipulator.startNewGame(next);\n-\t\t};\n-\t}\n-};\n+    }, 300);\n+\n+    // Refresh state\n+    GameManipulator.readGameState();\n+\n+  } else {\n+    // Wait die, and call recursive action\n+    GameManipulator.onGameEnd = function () {\n+      GameManipulator.startNewGame(next);\n+    }\n+  }\n+\n+\n+}\n+\n \n // Compute points based on sensors\n-// Basicaly, checks if an object has passed trough the sensor and the value is now higher than before\n+//\n+// Basicaly, checks if an object has\n+// passed trough the sensor and the\n+// value is now higher than before\n GameManipulator.computePoints = function () {\n-\tfor (var k in GameManipulator.sensors) {\n-\t\tvar sensor = GameManipulator.sensors[k];\n-\n-\t\tif (sensor.value > 0.5 && sensor.lastValue < 0.3) {\n-\t\t\tGameManipulator.points++;\n-\t\t\t// console.log('POINTS: '+GameManipulator.points);\n-\t\t}\n-\t}\n-};\n+  for (var k in GameManipulator.sensors) {\n+    var sensor = GameManipulator.sensors[k];\n+\n+    if (sensor.value > 0.5 && sensor.lastValue < 0.3) {\n+      GameManipulator.points++;\n+      // console.log('POINTS: '+GameManipulator.points);\n+    }\n+  }\n+}\n+\n \n // Read sensors\n //\n // Sensors are like ray-traces:\n-//   They have a starting point, and a limit to search for.\n-// Each sensor can gatter data about the DISTANCE of the object, it's SIZE and it's speed\n+//   They have a starting point,\n+//   and a limit to search for.\n+//\n+// Each sensor can gatter data about\n+// the DISTANCE of the object, it's\n+// SIZE and it's speed\n+//\n // Note: We currently only have a sensor.\n GameManipulator.readSensors = function () {\n-\tvar offset = GameManipulator.offset,\n-    startTime = Date.now();\n+  var offset = GameManipulator.offset;\n \n-\tfor (var k in GameManipulator.sensors) {\n-\t\tvar sensor = GameManipulator.sensors[k];\n+  var startTime = Date.now();\n \n-\t\t// Calculate absolute position of ray tracing\n-\t\tvar start = [\n-\t\t\toffset[0] + sensor.offset[0],\n-\t\t\toffset[1] + sensor.offset[1],\n-\t\t];\n+  for (var k in GameManipulator.sensors) {\n \n-\t\t// Compute cursor forwarding\n-\t\tvar forward = sensor.value * GameManipulator.width * 0.8 * sensor.length;\n+    var sensor = GameManipulator.sensors[k];\n \n-\t\tvar end = scanner.scanUntil(\n-\t\t\t\t[start[0], start[1]],\n-\t\t\t\tsensor.step,\n-\t\t\t\tCOLOR_DINOSAUR,\n-\t\t\t\tfalse,\n-\t\t\t\t(GameManipulator.width * sensor.length) / sensor.step[0]);\n+    // Calculate absolute position of ray tracing\n+    var start = [\n+      offset[0] + sensor.offset[0],\n+      offset[1] + sensor.offset[1],\n+    ];\n \n-\t\t// Save lastValue\n-\t\tsensor.lastValue = sensor.value;\n+    // Compute cursor forwarding\n+    var forward = sensor.value * GameManipulator.width * 0.8 * sensor.length;\n \n-\t\t// Calculate the Sensor value\n-\t\tif (end) {\n-\t\t\tsensor.value = (end[0] - start[0]) / (GameManipulator.width * sensor.length);\n+    var end = Scanner.scanUntil(\n+      // console.log(\n+        // Start position\n+        [start[0], start[1]],\n+        // Skip pixels\n+        sensor.step,\n+        // Searching Color\n+        COLOR_DINOSAUR,\n+        // Invert mode?\n+        false,\n+        // Iteration limit\n+        (GameManipulator.width * sensor.length) / sensor.step[0]);\n \n-\t\t\t// Calculate size of obstacle\n-\t\t\tvar endPoint = scanner.scanUntil(\n-\t\t\t\t[end[0] + 75, end[1]],\n-\t\t\t\t[-2, 0],\n-\t\t\t\tCOLOR_DINOSAUR,\n-\t\t\t\tfalse,\n-\t\t\t\t75 / 2\n-\t\t\t);\n+    // Save lastValue\n+    sensor.lastValue = sensor.value;\n \n-\t\t\t// If no end point, set the start point as end\n-\t\t\tif (!endPoint) endPoint = end;\n+    // Calculate the Sensor value\n+    if (end) {\n+      sensor.value = (end[0] - start[0]) / (GameManipulator.width * sensor.length);\n \n-\t\t\tvar sizeTmp = (endPoint[0] - end[0]) / 100.0;\n+      // Calculate size of obstacle\n+      var endPoint = Scanner.scanUntil(\n+        [end[0] + 75, end[1]],\n+        [-2, 0],\n+        COLOR_DINOSAUR,\n+        false,\n+        75 / 2\n+      );\n \n-\t\t\tif (GameManipulator.points == sensor.lastScore) {\n-\t\t\t\t// It's the same obstacle. Set size to \"max\" of both\n-\t\t\t\tsensor.size = Math.max(sensor.size, sizeTmp);\n-\t\t\t} else {\n-\t\t\t\tsensor.size = sizeTmp;\n-\t\t\t}\n+      // If no end point, set the start point as end\n+      if (!endPoint) {\n+        endPoint = end;\n+      }\n \n-\t\t\t// We use the current score to check for object equality\n-\t\t\tsensor.lastScore = GameManipulator.points;\n+      var sizeTmp = (endPoint[0] - end[0]) / 100.0;\n+      if (GameManipulator.points == sensor.lastScore) {\n+        // It's the same obstacle. Set size to \"max\" of both\n+        sensor.size = Math.max(sensor.size, sizeTmp);\n+      } else {\n+        sensor.size = sizeTmp;\n+      }\n \n-\t\t\t// sensor.size = Math.max(sensor.size, endPoint[0] - end[0]);\n-\t\t} else {\n-\t\t\tsensor.value = 1;\n-\t\t\tsensor.size = 0;\n-\t\t}\n \n-\t\t// Compute speed\n-\t\tvar dt = (Date.now() - sensor.lastComputeSpeed) / 1000;\n-\t\tsensor.lastComputeSpeed = Date.now();\n+      // We use the current score to check for object equality\n+      sensor.lastScore = GameManipulator.points;\n \n-\t\tif (sensor.value < sensor.lastValue) {\n-\t\t\t// Compute speed\n-\t\t\tvar newSpeed = (sensor.lastValue - sensor.value) / dt;\n-\t\t\tsensor.lastSpeeds.unshift(newSpeed);\n+      // sensor.size = Math.max(sensor.size, endPoint[0] - end[0]);\n \n-\t\t\twhile (sensor.lastSpeeds.length > 10)\n-\t\t\t\tsensor.lastSpeeds.pop();\n+    } else {\n+      sensor.value = 1;\n+      sensor.size = 0;\n+    }\n \n-\t\t\t// Take Average\n-\t\t\tvar avgSpeed = 0;\n-\t\t\tfor (var k in sensor.lastSpeeds)\n-\t\t\t\tavgSpeed += sensor.lastSpeeds[k] / sensor.lastSpeeds.length;\n+    // Compute speed\n+    var dt = (Date.now() - sensor.lastComputeSpeed) / 1000;\n+    sensor.lastComputeSpeed = Date.now();\n \n-\t\t\tsensor.speed = Math.max(avgSpeed - 1.5, sensor.speed);\n-\t\t}\n+    if (sensor.value < sensor.lastValue) {\n+      // Compute speed\n+      var newSpeed = (sensor.lastValue - sensor.value) / dt;\n \n-\t\tsensor.size = Math.min(sensor.size, 1.0);\n+      sensor.lastSpeeds.unshift(newSpeed);\n \n-\t\t// if(GameManipulator.gamestate == 'PLAYING') console.log(\"S[\"+k+\"]: \", sensor.value, sensor.size, Date.now() - startTime);\n+      while (sensor.lastSpeeds.length > 10) {\n+        sensor.lastSpeeds.pop();\n+      }\n \n-\t\tstartTime = Date.now();\n-\t}\n+      // Take Average\n+      var avgSpeed = 0;\n+      for (var k in sensor.lastSpeeds) {\n+        avgSpeed += sensor.lastSpeeds[k] / sensor.lastSpeeds.length;\n+      }\n \n-\t// Compute points\n-\tGameManipulator.computePoints();\n+      sensor.speed = Math.max(avgSpeed - 1.5, sensor.speed);\n+\n+    }\n+\n+    // Save length/size of sensor value\n+    sensor.size = Math.min(sensor.size, 1.0);\n+\n+    startTime = Date.now();\n+  }\n+\n+  // Compute points\n+  GameManipulator.computePoints();\n+\n+  // Call sensor callback (to act)\n+  GameManipulator.onSensorData && GameManipulator.onSensorData();\n+}\n \n-\t// Call sensor callback (to act)\n-\tGameManipulator.onSensorData && GameManipulator.onSensorData();\n-};\n \n // Set action to game\n // Values:\n-//  0.0 to  0.4: DOWN\n-//  0.4 to  0.6: NOTHING\n-//  0.6 to  1.0: UP (JUMP)\n-//\n-var PRESS = 'down',\n-  RELEASE = 'up';\n+//  0.00 to  0.45: DOWN\n+//  0.45 to  0.55: NOTHING\n+//  0.55 to  1.00: UP (JUMP)\n+var PRESS = 'down';\n+var RELEASE = 'up';\n+\n GameManipulator.lastOutputSet = 'NONE';\n GameManipulator.lastOutputSetTime = 0;\n \n-GameManipulator.setGameOutput = function (output) {\n-\tGameManipulator.gameOutput = output;\n-\tGameManipulator.gameOutputString = GameManipulator.getDiscreteState(output);\n-\n-\tif (GameManipulator.gameOutputString == 'DOWN') {\n-\t\t// Skew\n-\t\trobot.keyToggle('up', RELEASE);\n-\t\trobot.keyToggle('down', PRESS);\n-\t} else if (GameManipulator.gameOutputString == 'NORM') {\n-\t\t// DO Nothing\n-\t\trobot.keyToggle('up', RELEASE);\n-\t\trobot.keyToggle('down', RELEASE);\n-\t} else {\n-\t\t// Filter JUMP\n-\t\tif (GameManipulator.lastOutputSet != 'JUMP') GameManipulator.lastOutputSetTime = Date.now();\n-\n-\t\t// JUMP\n-\t\t// Check if hasn't jump for more than 3 continuous secconds\n-\t\tif (Date.now() - GameManipulator.lastOutputSetTime < 3000) {\n-\t\t\trobot.keyToggle('up', PRESS);\n-\t\t\trobot.keyToggle('down', RELEASE);\n-\t\t} else {\n-\t\t\trobot.keyToggle('up', RELEASE);\n-\t\t\trobot.keyToggle('down', RELEASE);\n-\t\t}\n-\t}\n-\n-\tGameManipulator.lastOutputSet = GameManipulator.gameOutputString;\n-};\n+GameManipulator.setGameOutput = function (output){\n+\n+  GameManipulator.gameOutput = output;\n+  GameManipulator.gameOutputString = GameManipulator.getDiscreteState(output);\n+\n+  if (GameManipulator.gameOutputString == 'DOWN') {\n+    // Skew\n+    robot.keyToggle('up', RELEASE);\n+    robot.keyToggle('down', PRESS);\n+  } else if (GameManipulator.gameOutputString == 'NORM') {\n+    // DO Nothing\n+    robot.keyToggle('up', RELEASE);\n+    robot.keyToggle('down', RELEASE);\n+  } else {\n+\n+    // Filter JUMP\n+    if (GameManipulator.lastOutputSet != 'JUMP') {\n+      GameManipulator.lastOutputSetTime = Date.now();\n+    }\n+\n+    // JUMP\n+    // Check if hasn't jump for more than 3 continuous secconds\n+    if (Date.now() - GameManipulator.lastOutputSetTime < 3000) {\n+      robot.keyToggle('up', PRESS);\n+      robot.keyToggle('down', RELEASE);\n+    } else {\n+      robot.keyToggle('up', RELEASE);\n+      robot.keyToggle('down', RELEASE);\n+    }\n+\n+  }\n+\n+  GameManipulator.lastOutputSet = GameManipulator.gameOutputString;\n+}\n \n+\n+//\n // Simply maps an real number to string actions\n-GameManipulator.getDiscreteState = function (value) {\n-\tif (value < 0.45) {\n-\t\treturn 'DOWN';\n-\t}else if(value > 0.55){\n-\t\treturn 'JUMP';\n-\t}\n-\n-\treturn 'NORM';\n-};\n+//\n+GameManipulator.getDiscreteState = function (value){\n+  if (value < 0.45) {\n+    return 'DOWN'\n+  } else if(value > 0.55) {\n+    return 'JUMP';\n+  }\n \n-// Click on the Starting point to make sure game is focused\n-GameManipulator.focusGame = function () {\n-\trobot.moveMouse(GameManipulator.offset[0], GameManipulator.offset[1]);\n-\trobot.mouseClick(\"left\");\n-};\n+  return 'NORM';\n+}\n+\n+\n+// Click on the Starting point\n+// to make sure game is focused\n+GameManipulator.focusGame = function (){\n+  robot.moveMouse(GameManipulator.offset[0], GameManipulator.offset[1]);\n+  robot.mouseClick('left');\n+}\n \n module.exports = GameManipulator;"
        },
        {
          "sha": "fffb14f0ebe7e7f1a151705a63b6bd6d3873e1df",
          "filename": "Learner.js",
          "status": "modified",
          "additions": 250,
          "deletions": 198,
          "changes": 448,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/526c2ab571624c87c69426f7b70515d764762b77/Learner.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/526c2ab571624c87c69426f7b70515d764762b77/Learner.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/Learner.js?ref=526c2ab571624c87c69426f7b70515d764762b77",
          "patch": "@@ -1,253 +1,305 @@\n-'use strict';\n+var synaptic = require('synaptic');\n+var async = require('async');\n+var _ = require('lodash');\n+\n+var Architect = synaptic.Architect;\n+var Network = synaptic.Network;\n \n-var _ = require('lodash'),\n-  async = require('async'),\n-  synaptic = require('synaptic'),\n-  Network = synaptic.Network,\n-  Architect = synaptic.Architect;\n \n var Learn = {\n-\t// Current Genomes\n-\t// In form of: {\n-\t// \t\tfitness: null,\n-\t// \t\tgenome: [...],\n-\t// \t\tnetwork: {NeuralNetworkObject}\n-\t// }\n-\tgenomes: [],\n-\tstate: 'STOP',\n-\tgenome: 0,                     // Current genome tryout\n-\tgeneration: 0,\n-\tshouldCheckExperience: false,  // Set this, to verify genome action BEFORE running it\n+\n+  // Array of networks for current Genomes\n+  // (Genomes will be added the key `fitness`)\n+  genomes: [],\n+\n+  // Current state of learning [STOP, LEARNING]\n+  state: 'STOP',\n+\n+  // Current genome/generation tryout\n+  genome: 0,\n+  generation: 0,\n+\n+  // Set this, to verify genome experience BEFORE running it\n+  shouldCheckExperience: false,\n+\n };\n \n+\n // Initialize the Learner\n-Learn.init = function (gameManipulator, ui, genomeUnits, selection, mutationProb) {\n-\tLearn.gm = gameManipulator;\n-\tLearn.ui = ui;\n+Learn.init = function (gameManip, ui, genomeUnits, selection, mutationProb) {\n+  Learn.gm = gameManip;\n+  Learn.ui = ui;\n \n-\tLearn.genome = 0;\n-\tLearn.generation = 0;\n+  Learn.genome = 0;\n+  Learn.generation = 0;\n+\n+  Learn.genomeUnits = genomeUnits;\n+  Learn.selection = selection;\n+  Learn.mutationProb = mutationProb;\n+}\n \n-\tLearn.genomeUnits = genomeUnits;\n-\tLearn.selection = selection;\n-\tLearn.mutationProb = mutationProb;\n-};\n \n // Build genomes before calling executeGeneration.\n Learn.startLearning = function () {\n-\t// Build genomes if needed\n-\twhile (Learn.genomes.length < Learn.genomeUnits) {\n-\t\tLearn.genomes.push(Learn.buildGenome(3, 1));\n-\t}\n \n-\tLearn.executeGeneration();\n-};\n+  // Build genomes if needed\n+  while (Learn.genomes.length < Learn.genomeUnits) {\n+    Learn.genomes.push(Learn.buildGenome(3, 1));\n+  }\n \n-// Given the entire generation of genomes (An array), applies method `executeGenome` for each element.\n+  Learn.executeGeneration();\n+  \n+}\n+\n+\n+// Given the entire generation of genomes (An array),\n+// applyes method `executeGenome` for each element.\n // After all elements have completed executing:\n+// \n // 1) Select best genomes\n // 2) Does cross over (except for 2 genomes)\n // 3) Does Mutation-only on remaining genomes\n // 4) Execute generation (recursivelly)\n-Learn.executeGeneration = function () {\n-\tif (Learn.state == 'STOP') return;\n+Learn.executeGeneration = function (){\n+  if (Learn.state == 'STOP') {\n+    return;\n+  }\n \n-\tLearn.generation++;\n-\tLearn.ui.logger.log('Executing generation ' + Learn.generation);\n+  Learn.generation++;\n+  Learn.ui.logger.log('Executing generation '+Learn.generation);\n \n-\tLearn.genome = 0;\n+  Learn.genome = 0;\n \n-\tasync.mapSeries(Learn.genomes, Learn.executeGenome, function (argument) {\n-\t\t// Kill worst genomes\n-\t\tLearn.genomes = Learn.selectBestGenomes(Learn.selection);\n+  async.mapSeries(Learn.genomes, Learn.executeGenome, function (argument) {\n \n-\t\t// Copy best genomes\n-\t\tvar bestGenomes = _.clone(Learn.genomes);\n+    // Kill worst genomes\n+    Learn.genomes = Learn.selectBestGenomes(Learn.selection);\n \n-\t\t// Cross Over ()\n-\t\twhile (Learn.genomes.length < Learn.genomeUnits - 2) {\n-\t\t\t// Get two random Genomes\n-\t\t\tvar genA = _.sample(bestGenomes).toJSON(),\n-        genB = _.sample(bestGenomes).toJSON(),\n-        newGenome = Learn.mutate(Learn.crossOver(genA, genB));  // Cross over and Mutate\n+    // Copy best genomes\n+    var bestGenomes = _.clone(Learn.genomes);\n \n-\t\t\t// Add to generation\n-\t\t\tLearn.genomes.push(Network.fromJSON(newGenome));\n-\t\t}\n+    // Cross Over ()\n+    while (Learn.genomes.length < Learn.genomeUnits - 2) {\n+      // Get two random Genomes\n+      var genA = _.sample(bestGenomes).toJSON();\n+      var genB = _.sample(bestGenomes).toJSON();\n \n-\t\t// Mutation-only\n-\t\twhile (Learn.genomes.length < Learn.genomeUnits) {\n-\t\t\tvar gen = _.sample(bestGenomes).toJSON(), // Get random Genome\n-        newGenome = Learn.mutate(gen);// Cross over and Mutate\n+      // Cross over and Mutate\n+      var newGenome = Learn.mutate(Learn.crossOver(genA, genB));\n \n-\t\t\t// Add to generation\n-\t\t\tLearn.genomes.push(Network.fromJSON(newGenome));\n-\t\t}\n+      // Add to generation\n+      Learn.genomes.push(Network.fromJSON(newGenome));\n+    }\n \n-\t\tLearn.ui.logger.log('Completed generation ' + Learn.generation);\n+    // Mutation-only\n+    while (Learn.genomes.length < Learn.genomeUnits) {\n+      // Get two random Genomes\n+      var gen = _.sample(bestGenomes).toJSON();\n \n-\t\t// Execute next generation\n-\t\tLearn.executeGeneration();\n-\t});\n-};\n+      // Cross over and Mutate\n+      var newGenome = Learn.mutate(gen);\n \n-// Sort all the genomes, and delete the worst one until the genome list has selectN elements.\n-Learn.selectBestGenomes = function (selectN) {\n-\tvar selected = _.sortBy(Learn.genomes, 'fitness').reverse();\n+      // Add to generation\n+      Learn.genomes.push(Network.fromJSON(newGenome));\n+    }\n \n-\twhile (selected.length > selectN) {\n-\t\tselected.pop();\n-\t}\n+    Learn.ui.logger.log('Completed generation '+Learn.generation);\n \n-\tLearn.ui.logger.log('Fitness: ' + _.pluck(selected, 'fitness').join(','));\n+    // Execute next generation\n+    Learn.executeGeneration();\n+  })\n+}\n+\n+\n+// Sort all the genomes, and delete the worst one\n+// untill the genome list has selectN elements.\n+Learn.selectBestGenomes = function (selectN){\n+  var selected = _.sortBy(Learn.genomes, 'fitness').reverse();\n+\n+  while (selected.length > selectN) {\n+    selected.pop();\n+  }\n+\n+  Learn.ui.logger.log('Fitness: '+_.pluck(selected, 'fitness').join(','));\n+\n+  return selected;\n+}\n \n-\treturn selected;\n-};\n \n // Waits the game to end, and start a new one, then:\n // 1) Set's listener for sensorData\n-// 2) On data read, applyes the neural network, and set it's output\n+// 2) On data read, applyes the neural network, and\n+//    set it's output\n // 3) When the game has ended and compute the fitness\n-Learn.executeGenome = function (genome, next) {\n-\tif (Learn.state == 'STOP') return;\n-\n-\tLearn.genome = Learn.genomes.indexOf(genome) + 1;\n-\t// Learn.ui.logger.log('Executing genome '+Learn.genome);\n-\n-\t// Check if genome has AT LEAST some experience\n-\tif (Learn.shouldCheckExperience) {\n-\t\tif (!Learn.checkExperience(genome)) {\n-\t\t\tgenome.fitness = 0;\n-\t\t\t// Learn.ui.logger.log('Genome '+Learn.genome+' has no minimum experience');\n-\t\t\treturn next();\n-\t\t}\n-\t}\n-\n-\tLearn.gm.startNewGame(function () {\n-\t\t// Reads sensor data, and apply network\n-\t\tLearn.gm.onSensorData = function () {\n-\t\t\tvar inputs = [\n-\t\t\t\tLearn.gm.sensors[0].value,\n-\t\t\t\tLearn.gm.sensors[0].size,\n-\t\t\t\tLearn.gm.sensors[0].speed,\n-\t\t\t];\n-\t\t\t// console.log(inputs);\n-\t\t\t// Apply to network\n-\t\t\tvar outputs = genome.activate(inputs);\n-\n-\t\t\tLearn.gm.setGameOutput(outputs[0]);\n-\t\t};\n-\n-\t\t// Wait game end, and compute fitness\n-\t\tLearn.gm.onGameEnd = function (points) {\n-\t\t\tLearn.ui.logger.log('Genome ' + Learn.genome + ' ended. Fitness: ' + points);\n-\n-\t\t\t// Save Genome fitness\n-\t\t\tgenome.fitness = points;\n-\n-\t\t\t// Go to next genome\n-\t\t\tnext();\n-\t\t};\n-\t});\n-};\n+Learn.executeGenome = function (genome, next){\n+  if (Learn.state == 'STOP') {\n+    return;\n+  }\n+\n+  Learn.genome = Learn.genomes.indexOf(genome) + 1;\n+  // Learn.ui.logger.log('Executing genome '+Learn.genome);\n+\n+  // Check if genome has AT LEAST some experience\n+  if (Learn.shouldCheckExperience) {\n+    if (!Learn.checkExperience(genome)) {\n+      genome.fitness = 0;\n+      // Learn.ui.logger.log('Genome '+Learn.genome+' has no min. experience');\n+      return next();\n+    }\n+  }\n+\n+  Learn.gm.startNewGame(function (){\n+\n+    // Reads sensor data, and apply network\n+    Learn.gm.onSensorData = function (){\n+      var inputs = [\n+        Learn.gm.sensors[0].value,\n+        Learn.gm.sensors[0].size,\n+        Learn.gm.sensors[0].speed,\n+      ];\n+      // console.log(inputs);\n+      // Apply to network\n+      var outputs = genome.activate(inputs);\n+\n+      Learn.gm.setGameOutput(outputs[0]);\n+    }\n+\n+    // Wait game end, and compute fitness\n+    Learn.gm.onGameEnd = function (points){\n+      Learn.ui.logger.log('Genome '+Learn.genome+' ended. Fitness: '+points);\n+\n+      // Save Genome fitness\n+      genome.fitness = points;\n+\n+      // Go to next genome\n+      next();\n+    }\n+  });\n+\n+}\n+\n \n // Validate if any acction occur uppon a given input (in this case, distance).\n-// If genome only keeps a single activation value for any given input, it will return false\n+// If genome only keeps a single activation value for any given input,\n+// it will return false\n Learn.checkExperience = function (genome) {\n-\tvar step = 0.1, start = 0.0, stop = 1;\n+  \n+  var step = 0.1, start = 0.0, stop = 1;\n \n-\t// Inputs are default. We only want to test the first index\n-\tvar inputs = [0.0, 0.3, 0.2];\n-\tvar activation, state, outputs = {};\n+  // Inputs are default. We only want to test the first index\n+  var inputs = [0.0, 0.3, 0.2];\n+  var activation, state, outputs = {};\n \n-\tfor (var k = start; k < stop; k += step) {\n-\t\tinputs[0] = k;\n+  for (var k = start; k < stop; k += step) {\n+    inputs[0] = k;\n \n-\t\tactivation = genome.activate(inputs);\n-\t\tstate = Learn.gm.getDiscreteState(activation);\n+    activation = genome.activate(inputs);\n+    state = Learn.gm.getDiscreteState(activation);\n+    \n+    outputs[state] = true;\n+  }\n \n-\t\toutputs[state] = true;\n-\t}\n+  // Count states, and return true if greater than 1\n+  return _.keys(outputs).length > 1;\n+}\n \n-\t// Count states, and return true if greater than 1\n-\treturn _.keys(outputs).length > 1;\n-};\n \n // Load genomes saved from JSON file\n-Learn.loadGenomes = function (genomes, deleteOthers) {\n-\tif (deleteOthers) Learn.genomes = [];\n+Learn.loadGenomes = function (genomes, deleteOthers){\n+  if (deleteOthers) {\n+    Learn.genomes = [];\n+  }\n \n-\tvar loaded = 0;\n-\tfor (var k in genomes) {\n-\t\tLearn.genomes.push(Network.fromJSON(genomes[k]));\n-\t\tloaded++;\n-\t}\n+  var loaded = 0;\n+  for (var k in genomes) {\n+    Learn.genomes.push(Network.fromJSON(genomes[k]));\n+    loaded++;\n+  }\n+\n+  Learn.ui.logger.log('Loaded '+loaded+' genomes!');\n+}\n \n-\tLearn.ui.logger.log('Loaded ' + loaded + ' genomes!');\n-};\n \n-// Builds a new genome based on the expected number of inputs and outputs\n+// Builds a new genome based on the \n+// expected number of inputs and outputs\n Learn.buildGenome = function (inputs, outputs) {\n-\tLearn.ui.logger.log('Build genome ' + (Learn.genomes.length + 1));\n-\tvar network = new Architect.Perceptron(inputs, 4, 4, outputs);\n-\treturn network;\n-\t// console.log(JSON.stringify(network.toJSON()));\n-\t// process.exit();\n-};\n+  Learn.ui.logger.log('Build genome '+(Learn.genomes.length+1));\n \n-// SPECIFIC to Neural Network.\n-// Those two methods convert from JSON to Array, and from Array to JSON\n-Learn.crossOver = function (netA, netB) {\n-\t// Swap (50% prob.)\n-\tif (Math.random() > 0.5) {\n-\t\tvar tmp = netA;\n-\t\tnetA = netB;\n-\t\tnetB = tmp;\n-\t}\n-\n-\t// Clone network\n-\tnetA = _.cloneDeep(netA);\n-\tnetB = _.cloneDeep(netB);\n-\n-\t// Cross over data keys\n-\tLearn.crossOverDataKey(netA.neurons, netB.neurons, 'bias');\n-\t// Learn.crossOverDataKey(netA.connections, netB.connections, 'weight');\n-\n-\treturn netA;\n-};\n+  var network = new Architect.Perceptron(inputs, 4, 4, outputs);\n \n-// Does random mutations across all the biases and weights of the Networks\n-// (This must be done in the JSON to prevent modifying the current one)\n-Learn.mutate = function (net) {\n-\t// Mutate\n-\tLearn.mutateDataKeys(net.neurons, 'bias', Learn.mutationProb);\n-\tLearn.mutateDataKeys(net.connections, 'weight', Learn.mutationProb);\n+  return network;\n+}\n \n-\treturn net;\n-};\n \n-// Given an Object A and an object B, both Arrays of Objects:\n-// 1) Select a cross over point (cutLocation) randomly (going from 0 to A.length)\n-// 2) Swap values from `key` one to another, starting by cutLocation\n+// SPECIFIC to Neural Network.\n+// Those two methods convert from JSON to Array, and from Array to JSON\n+Learn.crossOver = function (netA, netB) {\n+  // Swap (50% prob.)\n+  if (Math.random() > 0.5) {\n+    var tmp = netA;\n+    netA = netB;\n+    netB = tmp;\n+  }\n+\n+  // Clone network\n+  netA = _.cloneDeep(netA);\n+  netB = _.cloneDeep(netB);\n+\n+  // Cross over data keys\n+  Learn.crossOverDataKey(netA.neurons, netB.neurons, 'bias');\n+\n+  return netA;\n+}\n+\n+\n+// Does random mutations across all\n+// the biases and weights of the Networks\n+// (This must be done in the JSON to\n+// prevent modifying the current one)\n+Learn.mutate = function (net){\n+  // Mutate\n+  Learn.mutateDataKeys(net.neurons, 'bias', Learn.mutationProb);\n+  \n+  Learn.mutateDataKeys(net.connections, 'weight', Learn.mutationProb);\n+\n+  return net;\n+}\n+\n+\n+// Given an Object A and an object B, both Arrays\n+// of Objects:\n+// \n+// 1) Select a cross over point (cutLocation)\n+//    randomly (going from 0 to A.length)\n+// 2) Swap values from `key` one to another,\n+//    starting by cutLocation\n Learn.crossOverDataKey = function (a, b, key) {\n-\tvar cutLocation = Math.round(a.length * Math.random());\n-\tvar tmp;\n-\n-\tfor (var k = cutLocation; k < a.length; k++) {\n-\t\t// Swap\n-\t\ttmp = a[k][key];\n-\t\ta[k][key] = b[k][key];\n-\t\tb[k][key] = tmp;\n-\t}\n-};\n-\n-// Given an Array of objects with key `key`, and also a `mutationRate`, randomly Mutate the value of each key, if random value is lower than mutationRate for each element.\n-Learn.mutateDataKeys = function (a, key, mutationRate) {\n-\tfor (var k = 0; k < a.length; k++) {\n-\t\t// Should mutate?\n-\t\tif (Math.random() > mutationRate) continue;\n-\t\ta[k][key] += a[k][key] * (Math.random() - 0.5) * 3 + (Math.random() - 0.5);\n-\t}\n-};\n-\n-module.exports = Learn;\n+  var cutLocation = Math.round(a.length * Math.random());\n+\n+  var tmp;\n+  for (var k = cutLocation; k < a.length; k++) {\n+    // Swap\n+    tmp = a[k][key];\n+    a[k][key] = b[k][key];\n+    b[k][key] = tmp;\n+  }\n+}\n+\n+\n+// Given an Array of objects with key `key`,\n+// and also a `mutationRate`, randomly Mutate\n+// the value of each key, if random value is\n+// lower than mutationRate for each element.\n+Learn.mutateDataKeys = function (a, key, mutationRate){\n+  for (var k = 0; k < a.length; k++) {\n+    // Should mutate?\n+    if (Math.random() > mutationRate) {\n+      continue;\n+    }\n+\n+    a[k][key] += a[k][key] * (Math.random() - 0.5) * 3 + (Math.random() - 0.5);\n+  }\n+}\n+\n+\n+module.exports = Learn;\n\\ No newline at end of file"
        },
        {
          "sha": "0dd058680293dfb38f18210a08536ffa79748f4a",
          "filename": "UI.js",
          "status": "modified",
          "additions": 193,
          "deletions": 175,
          "changes": 368,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/526c2ab571624c87c69426f7b70515d764762b77/UI.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/526c2ab571624c87c69426f7b70515d764762b77/UI.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/UI.js?ref=526c2ab571624c87c69426f7b70515d764762b77",
          "patch": "@@ -1,190 +1,208 @@\n-'use strict';\n-\n-var fs = require('fs'),\n-blessed = require('blessed'),\n-  contrib = require('blessed-contrib'),\n-  screen = blessed.screen(),\n-  UI = {},\n-\n-  // Function used to save game data, we call it twice (on click or by pressing O).\n-  savegame = function () {\n-\t\tvar jsonGenomes = [];\n-\t\tfor (var k in UI.learner.genomes) {\n-\t\t\tjsonGenomes.push(UI.learner.genomes[k].toJSON());\n-\t\t}\n-\n-\t\tUI.logger.log('Saving ' + jsonGenomes.length + ' genomes...');\n-\n-\t\tvar fileName = './genomes/gen_' + UI.learner.generation + '_' + Date.now() + '.json';\n-\t\tfs.writeFile(fileName, JSON.stringify(jsonGenomes), function (err) {\n-\t\t\tif (err) {\n-        UI.logger.log('Failed to save! ' + err);\n-\t\t\t} else {\n-\t\t\t\tUI.logger.log('Saved to ' + fileName);\n-      }\n+var contrib = require('blessed-contrib')\n+var blessed = require('blessed')\n+var fs = require('fs');\n+\n+var screen = blessed.screen()\n+\n+var UI = {};\n \n-\t\t\tUI.refreshFiles();\n-\t\t});\n-\t};\n \n // Initialize UI objects\n UI.init = function (gameManipulator, learner) {\n-\tUI.gm = gameManipulator;\n-\tUI.learner = learner;\n-\n-\tUI.grid = new contrib.grid({\n-\t\trows: 12,\n-\t\tcols: 6,\n-\t\tscreen: screen\n-\t});\n-\n-\t// Build Sensor inputs\n-\tUI.uiSensors = UI.grid.set(0, 0, 3, 6, contrib.bar, {\n-\t\tlabel: 'Network Inputs',\n-\t\t// bg: 'white',\n-\t\tbarWidth: 12,\n-\t\tbarSpacing: 1,\n-\t\txOffset: 0,\n-\t\tmaxHeight: 100,\n-\t});\n-\n-\t// Build Log box\n-\tUI.logger = UI.grid.set(3, 0, 3, 6, contrib.log, {\n-\t\tfg: 'green',\n-\t\tselectedFg: 'green',\n-\t\tlabel: 'Logs'\n-\t});\n-\n-\t// Current score/time view\n-\tUI.uiScore = UI.grid.set(6, 0, 3, 3, blessed.Text, {\n-\t\tlabel: 'Game Stats',\n-\t\t// bg: 'green',\n-\t\tfg: 'white',\n-\t\tcontent: 'Loading...',\n-\t\talign: 'center',\n-\t});\n-\n-\t// Current Genomes stats\n-\tUI.uiGenomes = UI.grid.set(6, 3, 3, 3, blessed.Text, {\n-\t\tlabel: 'Genome Stats',\n-\t\t// bg: 'green',\n-\t\tfg: 'white',\n-\t\tcontent: 'Hey!',\n-\t\talign: 'center',\n-\t});\n-\n-\t// Load Tree\n-\tUI.savesTree = UI.grid.set(9, 0, 3, 3, contrib.tree, {\n-\t\tlabel: 'Saved Genomes  Press [L]',\n-\t});\n-\n-  //Pressing L now selects load panel (compatibility with older Terminal).\n+  UI.gm = gameManipulator;\n+  UI.learner = learner;\n+\n+  UI.grid = new contrib.grid({\n+    rows: 12,\n+    cols: 6,\n+    screen: screen\n+  });\n+\n+\n+  // Build Sensor inputs\n+  UI.uiSensors = UI.grid.set(0, 0, 3, 6, contrib.bar, {\n+    label: 'Network Inputs',\n+    // bg: 'white',\n+    barWidth: 12,\n+    barSpacing: 1,\n+    xOffset: 0,\n+    maxHeight: 100,\n+  });\n+\n+\n+  // Build Log box\n+  UI.logger = UI.grid.set(3, 0, 3, 6, contrib.log, {\n+    fg: 'green',\n+    selectedFg: 'green',\n+    label: 'Logs'\n+  });\n+\n+\n+  // Current score/time view\n+  UI.uiScore = UI.grid.set(6, 0, 3, 3, blessed.Text, {\n+    label: 'Game Stats',\n+    // bg: 'green',\n+    fg: 'white',\n+    content: 'Loading...',\n+    align: 'center',\n+  });\n+\n+\n+  // Current Genomes stats\n+  UI.uiGenomes = UI.grid.set(6, 3, 3, 3, blessed.Text, {\n+    label: 'Genome Stats',\n+    // bg: 'green',\n+    fg: 'white',\n+    content: 'Hey!',\n+    align: 'center',\n+  });\n+\n+\n+  // Load Tree\n+  UI.savesTree = UI.grid.set(9, 0, 3, 3, contrib.tree, {\n+    label: 'Saved Genomes',\n+  });\n+\n+\n+  // Callback for Loading genomes and focusing tree\n   screen.key(['l','L'], UI.savesTree.focus.bind(UI.savesTree));\n-\tUI.savesTree.on('click', UI.savesTree.focus.bind(UI.savesTree));\n-\tUI.savesTree.on('select', function (item) {\n-\t\tif (item.isFile) {\n-\t\t\tvar fileName = item.name;\n-\n-\t\t\tUI.logger.log('Loading genomes from file:');\n-\t\t\tUI.logger.log(fileName);\n-\n-\t\t\tvar genomes = require('./genomes/' + fileName);\n-\n-\t\t\tUI.learner.loadGenomes(genomes);\n-\t\t} else {\n-\t\t\tUI.refreshFiles();\n-\t\t}\n-\t});\n-\n-\tUI.refreshFiles();\n-\n-\t// Save Btn\n-\tUI.btnSave = UI.grid.set(9, 3, 3, 3, blessed.box, {\n-\t\tlabel: 'Save to File',\n-\t\tbg: 'green',\n-\t\tfg: 'red',\n-\t\tcontent: '\\n\\n\\n\\nSave Genomes\\nPress [o]',\n-\t\talign: 'center',\n-\t});\n-\n-  //Pressing O now outputs game data to a save file\n-  screen.key(['o','O'], savegame());\n-\tUI.btnSave.on('click', savegame());\n-\n-\tscreen.key(['escape', 'q', 'C-c'], function (ch, key) {\n-\t return process.exit(0);\n-\t});\n-\n-\tscreen.key(['s'], function (ch, key) {\n-\t\tif (learner.state == 'STOP') {\n-\t\t\tlearner.state = 'LEARNING';\n-\t\t\tgameManipulator.focusGame();\n-\t\t\tlearner.startLearning();\n-\t\t} else {\n-\t\t\tlearner.state = 'STOP';\n-\t\t}\n-\t});\n-\n-\tscreen.render();\n+  UI.savesTree.on('click', UI.savesTree.focus.bind(UI.savesTree));\n+  UI.savesTree.on('select', function (item){\n+\n+    if (item.isFile) {\n+      var fileName = item.name;\n+\n+      UI.logger.log('Loading genomes from file:');\n+      UI.logger.log(fileName);\n+\n+      var genomes = require('./genomes/'+fileName);\n+\n+      UI.learner.loadGenomes(genomes);\n+    } else {\n+      UI.refreshFiles();\n+    }\n+  });\n+\n+  UI.refreshFiles();\n+\n+\n+  // Save Btn\n+  UI.btnSave = UI.grid.set(9, 3, 3, 3, blessed.box, {\n+    label: 'Save to File',\n+    bg: 'green',\n+    fg: 'red',\n+    content: '\\n\\n\\n\\nSave Genomes',\n+    align: 'center',\n+  });\n+\n+  //UI.btnSave.on('click', function (){\n+  screen.key(['o','O'], function(){\n+    var jsonGenomes = [];\n+    for (var k in UI.learner.genomes) {\n+      jsonGenomes.push(UI.learner.genomes[k].toJSON());\n+    }\n+\n+    UI.logger.log('Saving '+jsonGenomes.length+' genomes...');\n+\n+    var dir = './genomes';\n+    var fileName = dir + '/gen_'+UI.learner.generation+'_'+Date.now()+'.json';\n+    fs.writeFile(fileName, JSON.stringify(jsonGenomes), function (err){\n+      if (err) {\n+        UI.logger.log('Failed to save! '+err);\n+      } else {\n+        UI.logger.log('Saved to '+fileName);\n+      }\n+\n+      UI.refreshFiles();\n+    });\n+\n+  });\n+\n+  screen.key(['escape', 'q', 'C-c'], function(ch, key) {\n+    return process.exit(0);\n+  });\n+\n+  screen.key(['s'], function (ch, key){\n+    if (learner.state == 'STOP') {\n+      learner.state = 'LEARNING';\n+      gameManipulator.focusGame();\n+      learner.startLearning();\n+    } else {\n+      learner.state = 'STOP';\n+    }\n+  });\n+\n+  screen.render()\n };\n \n+\n // Read entire folder and select files that match a .json file\n-UI.refreshFiles = function () {\n-\tvar files = [];\n-\tvar fileData = {\n-\t\tname: 'Saved Files',\n-\t\textended: true,\n-\t\tchildren: [{\n-\t\t\tname: 'Refresh Folders'\n-\t\t}]\n-\t};\n-\n-\t// Populate tree\n-\tUI.logger.log('Reading genomes dir...');\n-\tvar files = fs.readdirSync('./genomes');\n-\tfor (var k in files) {\n-\t\tif (files[k].indexOf('.json') >= 0) {\n-\t\t\tfileData.children.push({\n-\t\t\t\tname: files[k],\n-\t\t\t\tisFile: true,\n-\t\t\t});\n-\t\t}\n-\t}\n-\n-\tUI.savesTree.setData(fileData);\n-};\n+UI.refreshFiles = function (){\n+  var files = [];\n+  var fileData = {\n+    name: 'Saved Files',\n+    extended: true,\n+    children: [{\n+      name: 'Refresh Folders'\n+    }]\n+  };\n+\n+  // Populate tree\n+  UI.logger.log('Reading genomes dir...')\n+  var files = fs.readdirSync('./genomes');\n+  for (var k in files) {\n+    if (files[k].indexOf('.json') >= 0) {\n+\n+      fileData.children.push({\n+        name: files[k],\n+        isFile: true,\n+      });\n+\n+    }\n+  }\n+\n+  UI.savesTree.setData(fileData);\n+}\n+\n \n // Updates data on the screen and render it\n UI.render = function () {\n-\t// Update data\n-\tUI.uiSensors.setData({\n-\t\ttitles: ['Distance', 'Size', 'Speed', 'Activation'],\n-\t\tdata: [\n-\t\t\tMath.round(UI.gm.sensors[0].value * 100),\n-\t\t\tMath.round(UI.gm.sensors[0].size * 100),\n-\t\t\tMath.round(UI.gm.sensors[0].speed * 100),\n-\t\t\tMath.round(UI.gm.gameOutput * 100),\n-\t\t]\n-\t});\n-\n-\t// Set Genome stats and score\n-\tvar learn = UI.learner;\n-\tvar uiStats = 'Status: ' + learn.state + '\\n';\n-\tuiStats += 'Fitness: ' + UI.gm.points + '\\nGameStatus: ' + UI.gm.gamestate + '\\n';\n-\tuiStats += 'Generation: ' + learn.generation + ' : ' + learn.genome + '/' + learn.genomes.length;\n-\tUI.uiScore.setText(uiStats);\n-\n-\tif (UI.gm.gameOutput) {\n-\t\tvar str = 'Action: ' + UI.gm.gameOutputString + '\\nActivation: ' + UI.gm.gameOutput;\n-\t\tUI.uiGenomes.setText(str);\n-\t} else {\n-\t\tUI.uiGenomes.setText('Loading...');\n-\t}\n-\n-\t// Render screen\n-\tscreen.render();\n-};\n \n+  // Update data\n+  UI.uiSensors.setData({\n+    titles: ['Distance', 'Size', 'Speed', 'Activation'],\n+    data: [\n+      Math.round(UI.gm.sensors[0].value * 100),\n+      Math.round(UI.gm.sensors[0].size * 100),\n+      Math.round(UI.gm.sensors[0].speed * 100),\n+      Math.round(UI.gm.gameOutput * 100),\n+    ]\n+  })\n+\n+  // Set Genome stats and score\n+  var learn = UI.learner;\n+  var uiStats = '';\n+  uiStats += 'Status: ' + learn.state + '\\n';\n+  uiStats += 'Fitness: ' + UI.gm.points + '\\n';\n+  uiStats += 'GameStatus: ' + UI.gm.gamestate + '\\n';\n+  uiStats += 'Generation: ' + learn.generation;\n+  uiStats += ' : ' + learn.genome + '/' + learn.genomes.length;\n+  UI.uiScore.setText(uiStats);\n+\n+  if (UI.gm.gameOutput) {\n+    var str = '';\n+    str += 'Action: ' + UI.gm.gameOutputString + '\\n'\n+    str += 'Activation: ' + UI.gm.gameOutput;\n+    UI.uiGenomes.setText(str);\n+  } else {\n+    UI.uiGenomes.setText('Loading...');\n+  }\n+\n+  // Render screen\n+  screen.render();\n+}\n+\n+// Continuously render screen\n setInterval(UI.render, 25);\n \n module.exports = UI;"
        },
        {
          "sha": "a7fc5c646dd2ee4023d403914a291d3800ddf935",
          "filename": "index.js",
          "status": "modified",
          "additions": 30,
          "deletions": 20,
          "changes": 50,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/526c2ab571624c87c69426f7b70515d764762b77/index.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/526c2ab571624c87c69426f7b70515d764762b77/index.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/index.js?ref=526c2ab571624c87c69426f7b70515d764762b77",
          "patch": "@@ -1,51 +1,61 @@\n-'use strict';\n+var robot = require('robotjs');\n+\n+var GameManipulator = require('./GameManipulator');\n+var Learner = require('./Learner');\n+var Scanner = require('./Scanner');\n+var UI = require('./UI');\n \n-var UI = require('./UI'),\n-  robot = require('robotjs'),\n-  Learner = require('./Learner'),\n-  scanner = require('./Scanner'),\n-  GameManipulator = require('./GameManipulator');\n \n // Configure Robotjs\n robot.setMouseDelay(1);\n \n+\n // Initialize Game\n GameManipulator.findGamePosition();\n \n+\n // Check for found game\n if (GameManipulator.offset) {\n-\t// Uncomment this line to debug the starting point (Check if it's detecting it correcly)\n-\t// robot.moveMouse(GameManipulator.offset[0]+GameManipulator.sensors[0].offset[0], GameManipulator.offset[1] + GameManipulator.sensors[0].offset[1]);\n-\trobot.moveMouse(GameManipulator.offset[0], GameManipulator.offset[1]);\n+  // Uncomment this line to debug the\n+  // starting point of sensor (Check if it's detecting it correcly)\n+\n+  // robot.moveMouse(GameManipulator.offset[0]+GameManipulator.sensors[0].offset[0],\n+  //    GameManipulator.offset[1] + GameManipulator.sensors[0].offset[1]);\n+\n+  robot.moveMouse(GameManipulator.offset[0], GameManipulator.offset[1]);\n } else {\n-\tconsole.error('FAILED TO FIND GAME!');\n-\tprocess.exit();\n+  console.error('FAILED TO FIND GAME!');\n+  process.exit();\n }\n \n+\n // Initialize UI\n UI.init(GameManipulator, Learner);\n \n+\n // Init Learner\n Learner.init(GameManipulator, UI, 12, 4, 0.2);\n \n+\n // Start reading game state and sensors\n setInterval(GameManipulator.readSensors, 40);\n setInterval(GameManipulator.readGameState, 200);\n \n+\n // Start game (Example of API usage)\n /*\n function startGame () {\n   var game = Math.round(Math.random() * 100);\n \n-\tUI.logger.log('Queuing start... ', game);\n+  UI.logger.log('Queuing start... ', game);\n \n-\tGameManipulator.startNewGame(function () {\n-\t\tUI.logger.log('Game HAS started!', game);\n-\t\tGameManipulator.onGameEnd = function () {\n-\t\t\tUI.logger.log('Game HAS ended!', game);\n+  GameManipulator.startNewGame(function() {\n+    UI.logger.log('Game HAS started!', game);\n+    GameManipulator.onGameEnd = function () {\n+      UI.logger.log('Game HAS ended!', game);\n \n-\t\t\tstartGame();\n-\t\t}\n-\t});\n+      startGame();\n+    }\n+  });\n }\n-*/\n+*/\n\\ No newline at end of file"
        }
      ]
    },
    "fa40a6f4042e7b6640cdd73c4d51aeab4bdb2aad": {
      "sha": "fa40a6f4042e7b6640cdd73c4d51aeab4bdb2aad",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6ZmE0MGE2ZjQwNDJlN2I2NjQwY2RkNzNjNGQ1MWFlYWI0YmRiMmFhZA==",
      "commit": {
        "author": {
          "name": "John Mora",
          "email": "johmora12@engineer.com",
          "date": "2016-08-10T16:24:27Z"
        },
        "committer": {
          "name": "John Mora",
          "email": "johmora12@engineer.com",
          "date": "2016-08-10T16:24:27Z"
        },
        "message": "nvm, I saw you kept it.",
        "tree": {
          "sha": "025f8bf6a94fe1733ac357ab119b129850e3272d",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/025f8bf6a94fe1733ac357ab119b129850e3272d"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/fa40a6f4042e7b6640cdd73c4d51aeab4bdb2aad",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/fa40a6f4042e7b6640cdd73c4d51aeab4bdb2aad",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/fa40a6f4042e7b6640cdd73c4d51aeab4bdb2aad",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/fa40a6f4042e7b6640cdd73c4d51aeab4bdb2aad/comments",
      "author": null,
      "committer": null,
      "parents": [
        {
          "sha": "43927205cdfe4feb97c977a9dfcbb510c23c4f8b",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/43927205cdfe4feb97c977a9dfcbb510c23c4f8b",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/43927205cdfe4feb97c977a9dfcbb510c23c4f8b"
        }
      ],
      "stats": { "total": 6, "additions": 5, "deletions": 1 },
      "files": [
        {
          "sha": "38ffa4071e568218444450dfbafb51e25ffdceaa",
          "filename": "package.json",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "changes": 6,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/fa40a6f4042e7b6640cdd73c4d51aeab4bdb2aad/package.json",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/fa40a6f4042e7b6640cdd73c4d51aeab4bdb2aad/package.json",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/package.json?ref=fa40a6f4042e7b6640cdd73c4d51aeab4bdb2aad",
          "patch": "@@ -14,6 +14,10 @@\n     \"blessed-contrib\": \"^2.5.2\",\n     \"lodash\": \"^3.10.1\",\n     \"robotjs\": \"^0.3.6\",\n-    \"synaptic\": \"^1.0.2\"\n+    \"synaptic\": \"^1.0.5\"\n+  },\n+  \"repository\": {\n+    \"type\": \"git\",\n+    \"url\": \"git://github.com/ivanseidel/IAMDinosaur.git\"\n   }\n }"
        }
      ]
    },
    "43927205cdfe4feb97c977a9dfcbb510c23c4f8b": {
      "sha": "43927205cdfe4feb97c977a9dfcbb510c23c4f8b",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6NDM5MjcyMDVjZGZlNGZlYjk3Yzk3N2E5ZGZjYmI1MTBjMjNjNGY4Yg==",
      "commit": {
        "author": {
          "name": "John Mora",
          "email": "johmora12@engineer.com",
          "date": "2016-08-10T16:19:14Z"
        },
        "committer": {
          "name": "John Mora",
          "email": "johmora12@engineer.com",
          "date": "2016-08-10T16:19:14Z"
        },
        "message": "Reverted \"Fixed package.json\" :(\n\nsync with master source",
        "tree": {
          "sha": "61ec603b31eb3d500d9fa18f497974f854cd2a65",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/61ec603b31eb3d500d9fa18f497974f854cd2a65"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/43927205cdfe4feb97c977a9dfcbb510c23c4f8b",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/43927205cdfe4feb97c977a9dfcbb510c23c4f8b",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/43927205cdfe4feb97c977a9dfcbb510c23c4f8b",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/43927205cdfe4feb97c977a9dfcbb510c23c4f8b/comments",
      "author": null,
      "committer": null,
      "parents": [
        {
          "sha": "dd23c8233b1e6979830554bccc6baba6783a2bcc",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/dd23c8233b1e6979830554bccc6baba6783a2bcc",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/dd23c8233b1e6979830554bccc6baba6783a2bcc"
        }
      ],
      "stats": { "total": 6, "additions": 1, "deletions": 5 },
      "files": [
        {
          "sha": "238abcd0506bc19ca2df1f1de4c2be149ce28c14",
          "filename": "package.json",
          "status": "modified",
          "additions": 1,
          "deletions": 5,
          "changes": 6,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/43927205cdfe4feb97c977a9dfcbb510c23c4f8b/package.json",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/43927205cdfe4feb97c977a9dfcbb510c23c4f8b/package.json",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/package.json?ref=43927205cdfe4feb97c977a9dfcbb510c23c4f8b",
          "patch": "@@ -14,10 +14,6 @@\n     \"blessed-contrib\": \"^2.5.2\",\n     \"lodash\": \"^3.10.1\",\n     \"robotjs\": \"^0.3.6\",\n-    \"synaptic\": \"^1.0.5\"\n-  },\n-  \"repository\": {\n-    \"type\": \"git\",\n-    \"url\": \"git://github.com/ivanseidel/IAMDinosaur.git\"\n+    \"synaptic\": \"^1.0.2\"\n   }\n }"
        }
      ]
    },
    "dd23c8233b1e6979830554bccc6baba6783a2bcc": {
      "sha": "dd23c8233b1e6979830554bccc6baba6783a2bcc",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6ZGQyM2M4MjMzYjFlNjk3OTgzMDU1NGJjY2M2YmFiYTY3ODNhMmJjYw==",
      "commit": {
        "author": {
          "name": "John Mora",
          "email": "johmora12@engineer.com",
          "date": "2016-08-10T16:15:36Z"
        },
        "committer": {
          "name": "John Mora",
          "email": "johmora12@engineer.com",
          "date": "2016-08-10T16:15:36Z"
        },
        "message": "Code lint, added keyboard shortcuts to load/save panes for compatibility\n\nCode lint (follow AirBnB JS Style Guide\nhttps://github.com/airbnb/javascript) taken from @rodrigoalviani \\'s PR.\n\nAdded (case insensitive) shortcuts. \"L\" selects load genomes pane, \"O\"\nsaves current genomes.",
        "tree": {
          "sha": "025f8bf6a94fe1733ac357ab119b129850e3272d",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/025f8bf6a94fe1733ac357ab119b129850e3272d"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/dd23c8233b1e6979830554bccc6baba6783a2bcc",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/dd23c8233b1e6979830554bccc6baba6783a2bcc",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/dd23c8233b1e6979830554bccc6baba6783a2bcc",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/dd23c8233b1e6979830554bccc6baba6783a2bcc/comments",
      "author": null,
      "committer": null,
      "parents": [
        {
          "sha": "6a43619554b5638636fa3f3b39de0780b3435fd4",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/6a43619554b5638636fa3f3b39de0780b3435fd4",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/6a43619554b5638636fa3f3b39de0780b3435fd4"
        }
      ],
      "stats": { "total": 1496, "additions": 660, "deletions": 836 },
      "files": [
        {
          "sha": "3c01d70dfd2bb8e510af5a40b142d2ff5ae2f7b6",
          "filename": "GameManipulator.js",
          "status": "modified",
          "additions": 267,
          "deletions": 363,
          "changes": 630,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/dd23c8233b1e6979830554bccc6baba6783a2bcc/GameManipulator.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/dd23c8233b1e6979830554bccc6baba6783a2bcc/GameManipulator.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/GameManipulator.js?ref=dd23c8233b1e6979830554bccc6baba6783a2bcc",
          "patch": "@@ -1,437 +1,341 @@\n-var robot = require('robotjs');\n+'use strict';\n \n-// Cache screen size\n-var screenSize = robot.getScreenSize();\n-\n-var Scanner = require ('./Scanner');\n-\n-// COLOR DEFINITIONS\n-// This is the Dino's colour, also used by Obstacles.\n-var COLOR_DINOSAUR = '535353';\n-var DARK_COLOR_DINO = 'ACACAC';\n+var robot = require('robotjs'),\n+  scanner = require ('./scanner'),\n+  screenSize = robot.getScreenSize(),\n+  COLOR_DINOSAUR = \"535353\"; // This is the Dino's colour, also used by Obstacles.\n \n var GameManipulator = {\n-\n-  // Stores the game position (Globally)\n-  offset: null,\n-  width: null,\n-\n-  // Stores points (jumps)\n-  points: 0,\n-\n-  // Listners\n-  onGameEnd: null,\n-  onGameStart: null,\n-  onSensorData: null,\n-\n-  // Game State\n-  gamestate: 'OVER',\n-\n-  // GameOver Position\n-  gameOverOffset: [190, -82],\n-\n-  // Stores an array of \"sensors\" (Ray tracings)\n-  // Positions are always relative to global \"offset\"\n-  sensors: [\n+\toffset: null,                // Stores the game position (Globally)\n+\twidth: null,                 // Stores the game position (Globally)\n+\tpoints: 0,                   // Stores points (jumps)\n+\tonGameEnd: null,             // Listners\n+\tonGameStart: null,           // Listners\n+\tonSensorData: null,          // Listners\n+\tgamestate: 'OVER',           // Game State\n+\tgameOverOffset: [190, -82],  // GameOver Position\n+\n+\t// Stores an array of \"sensors\" (Ray tracings)\n+\t// Positions are always relative to global \"offset\"\n+\tsensors: [\n     {\n-      lastValue: 1,\n-\n-      value: null,\n-      offset: [84, -15], // 64,-15\n-      step: [4, 0],\n-      length: 0.3,\n-\n-      // Speed\n-      speed: 0,\n-      lastComputeSpeed: 0,\n-\n-      // Computes size of the object\n-      size: 0,\n-      computeSize: true,\n-    },\n-  ]\n+\t\t\tlastValue: 1,\n+\t\t\tvalue: null,\n+\t\t\toffset: [84, -15], // 64,-15\n+\t\t\tstep: [4, 0],\n+\t\t\tlength: 0.3,\n+\t\t\tspeed: 0,            // Speed\n+\t\t\tlastComputeSpeed: 0, // Speed\n+\t\t\tsize: 0,             // Computes size of the object\n+\t\t\tcomputeSize: true,   // Computes size of the object\n+\t\t},\n+\t\t// {\n+\t\t// \tlastValue: 1,\n+\t\t// \tvalue: null,\n+\t\t// \toffset: [66, -30],\n+\t\t// \tstep: [5, 0],\n+\t\t// \tlength: 0.5,\n+\t\t// }\n+\t]\n };\n \n-\n // Find out dinosaur (fast)\n GameManipulator.findGamePosition = function () {\n-  var pos, dinoPos, skipXFast = 15;\n-\n-  for (var x = 20; x < screenSize.width; x+= skipXFast) {\n-    dinoPos = Scanner.scanUntil(\n-      // Start position\n-      [x, 80],\n-      // Skip pixels\n-      [0, skipXFast],\n-      // Searching Color\n-      COLOR_DINOSAUR,\n-      // Normal mode (not inverse)\n-      false,\n-      // Iteration limit\n-      500 / skipXFast);\n-\n-    if (dinoPos) {\n-      break;\n-    }\n-  }\n+\tvar pos,\n+    dinoPos,\n+    skipXFast = 15;\n \n-  if (!dinoPos) {\n-    return null;\n-  }\n+\tfor (var x = 20; x < screenSize.width; x += skipXFast) {\n+\t\tdinoPos = scanner.scanUntil([x, 80], [0, skipXFast], COLOR_DINOSAUR, false, 500 / skipXFast);\n \n-  for (var x = dinoPos[0] - 50; x <= dinoPos[0]; x += 1) {\n-    pos = Scanner.scanUntil(\n-      // Start position\n-      [x, dinoPos[1] - 2],\n-      // Skip pixels\n-      [0, 1],\n-      // Searching Color\n-      COLOR_DINOSAUR,\n-      // Normal mode (not inverse)\n-      false,\n-      // Iteration limit\n-      100);\n-\n-    if (pos) {\n-      break;\n-    }\n-  }\n+\t\tif (dinoPos) break;\n+\t}\n \n-  // Did actually found? If not, error!\n-  if (!pos) {\n-    return null;\n-  }\n+\tif (!dinoPos) return null;\n \n-  // Find the end of the game\n-  var endPos = pos;\n-\n-  while (robot.getPixelColor(endPos[0] + 3, endPos[1]) == COLOR_DINOSAUR) {\n-     endPos = Scanner.scanUntil(\n-        // Start position\n-        [endPos[0] + 2, endPos[1]],\n-        // Skip pixels\n-        [2, 0],\n-        // Searching Color\n-        COLOR_DINOSAUR,\n-        // Invert mode\n-        true,\n-        // Iteration limit\n-        600);\n-  }\n+\tfor (var x = dinoPos[0] - 50; x <= dinoPos[0]; x += 1) {\n+\t\tpos = scanner.scanUntil([x, dinoPos[1] - 2], [0, 1], COLOR_DINOSAUR, false, 100);\n \n-  // Did actually found? If not, error!\n-  if (!endPos) {\n-    return null;\n+\t\tif (pos) break;\n   }\n \n-  // Save to allow global access\n-  GameManipulator.offset = pos;\n-  GameManipulator.width = 600;//endPos[0] - pos[0];\n-\n-  return pos;\n-};\n-\n+\t// Did actually found? If not, error!\n+\tif (!pos) return null;\n \n-// Read Game state\n-// (If game is ended or is playing)\n-GameManipulator.readGameState = function () {\n-  // Read GameOver\n-  var found = Scanner.scanUntil(\n-    [\n-      GameManipulator.offset[0] + GameManipulator.gameOverOffset[0],\n-      GameManipulator.offset[1] + GameManipulator.gameOverOffset[1]\n-    ],\n-\n-    [2, 0], COLOR_DINOSAUR, false, 20);\n-\n-  if (found && GameManipulator.gamestate != 'OVER') {\n-    GameManipulator.gamestate = 'OVER';\n-\n-    // Clear keys\n-    GameManipulator.setGameOutput(0.5);\n-\n-    // Trigger callback and clear\n-    GameManipulator.onGameEnd && GameManipulator.onGameEnd(GameManipulator.points);\n-    GameManipulator.onGameEnd = null;\n-\n-    // console.log('GAME OVER: '+GameManipulator.points);\n-\n-  } else if (!found && GameManipulator.gamestate != 'PLAYING') {\n-    GameManipulator.gamestate = 'PLAYING';\n-\n-    // Clear points\n-    GameManipulator.points = 0;\n-    GameManipulator.lastScore = 0;\n-\n-    // Clear keys\n-    GameManipulator.setGameOutput(0.5);\n+\t// Find the end of the game\n+\tvar endPos = pos;\n \n-    // Clear sensors\n-    GameManipulator.sensors[0].lastComputeSpeed = 0;\n-    GameManipulator.sensors[0].lastSpeeds = [];\n-    GameManipulator.sensors[0].lastValue = 1;\n-    GameManipulator.sensors[0].value = 1;\n-    GameManipulator.sensors[0].speed = 0;\n-    GameManipulator.sensors[0].size = 0;\n+\twhile (robot.getPixelColor(endPos[0] + 3, endPos[1]) == COLOR_DINOSAUR) {\n+    endPos = scanner.scanUntil([endPos[0] + 2, endPos[1]], [2, 0], COLOR_DINOSAUR, true, 600);\n+\t}\n \n-    // Clar Output flags\n-    GameManipulator.lastOutputSet = 'NONE';\n+\t// Did actually found? If not, error!\n+\tif (!endPos) return null;\n \n-    // Trigger callback and clear\n-    GameManipulator.onGameStart && GameManipulator.onGameStart();\n-    GameManipulator.onGameStart = null;\n+\t// Save to allow global access\n+\tGameManipulator.offset = pos;\n+\tGameManipulator.width = 600; //endPos[0] - pos[0];\n \n-    // console.log('GAME RUNNING '+GameManipulator.points);\n-  }\n-}\n+\treturn pos;\n+};\n \n+// Read Game state (If game is ended or is playing)\n+GameManipulator.readGameState = function () {\n+\t// Read GameOver\n+\tvar found = scanner.scanUntil(\n+\t\t[\n+\t\t\tGameManipulator.offset[0] + GameManipulator.gameOverOffset[0],\n+\t\t\tGameManipulator.offset[1] + GameManipulator.gameOverOffset[1]\n+\t\t],\n+\t\t[2, 0], COLOR_DINOSAUR, false, 20\n+  );\n+\n+\tif (found && GameManipulator.gamestate != 'OVER') {\n+\t\tGameManipulator.gamestate = 'OVER';\n+\n+\t\t// Clear keys\n+\t\tGameManipulator.setGameOutput(0.5);\n+\n+\t\t// Trigger callback and clear\n+\t\tGameManipulator.onGameEnd && GameManipulator.onGameEnd(GameManipulator.points);\n+\t\tGameManipulator.onGameEnd = null;\n+\n+\t\t// console.log('GAME OVER: '+GameManipulator.points);\n+\t} else if (!found && GameManipulator.gamestate != 'PLAYING') {\n+\t\tGameManipulator.gamestate = 'PLAYING';\n+\n+\t\t// Clear points\n+\t\tGameManipulator.points = 0;\n+\t\tGameManipulator.lastScore = 0;\n+\n+\t\t// Clear keys\n+\t\tGameManipulator.setGameOutput(0.5);\n+\n+\t\t// Clear sensors\n+\t\tGameManipulator.sensors[0].lastComputeSpeed = 0;\n+\t\tGameManipulator.sensors[0].lastSpeeds = [];\n+\t\tGameManipulator.sensors[0].lastValue = 1;\n+\t\tGameManipulator.sensors[0].value = 1;\n+\t\tGameManipulator.sensors[0].speed = 0;\n+\t\tGameManipulator.sensors[0].size = 0;\n+\n+\t\t// Clar Output flags\n+\t\tGameManipulator.lastOutputSet = 'NONE';\n+\n+\t\t// Trigger callback and clear\n+\t\tGameManipulator.onGameStart && GameManipulator.onGameStart();\n+\t\tGameManipulator.onGameStart = null;\n+\n+\t\t// console.log('GAME RUNNING '+GameManipulator.points);\n+\t}\n+};\n \n-// Call this to start a fresh new game\n-// Will wait untill game has ended,\n-// and call the `next` callback\n+// Call this to start a fresh new game. Will wait until game has ended, and call the `next` callback\n var _startKeyInterval;\n GameManipulator.startNewGame = function (next) {\n \n-  // Refresh state\n-  GameManipulator.readGameState();\n+\t// Refresh state\n+\tGameManipulator.readGameState();\n \n-  // If game is already over, press space\n-  if (GameManipulator.gamestate == 'OVER') {\n-    clearInterval(_startKeyInterval);\n+\t// If game is already over, press space\n+\tif (GameManipulator.gamestate == 'OVER') {\n+\t\tclearInterval(_startKeyInterval);\n \n-    // Set start callback\n-    GameManipulator.onGameStart = function (argument) {\n-      clearInterval(_startKeyInterval);\n-      next && next();\n-    };\n+\t\t// Set start callback\n+\t\tGameManipulator.onGameStart = function (argument) {\n+\t\t\tclearInterval(_startKeyInterval);\n+\t\t\tnext && next();\n+\t\t};\n \n-    // Press space to begin game (repetidelly)\n-    _startKeyInterval = setInterval(function (){\n-      // Due to dino slowly gliding over the screen after multiple restarts, its better to just reload the page\n+\t\t// Press space to begin game (repetidelly)\n+\t\t_startKeyInterval = setInterval(function () {\n+      // Due to dino slowly gliding over the screen after multiple restarts, its better to just reload the page.\n       robot.keyTap('r','command');\n       setTimeout(function() {\n-        // Once reloaded we wait 0.5sec for it to let us start the game with a space.\n+          // Once reloaded we wait 0.5sec for it to let us start the game by tapping space.\n           robot.keyTap(' ');\n       }, 500);\n-    }, 300);\n-\n-    // Refresh state\n-    GameManipulator.readGameState();\n-\n-  } else {\n-    // Wait die, and call recursive action\n-    GameManipulator.onGameEnd = function () {\n-      GameManipulator.startNewGame(next);\n-    }\n-  }\n-\n-\n-}\n-\n+\t\t}, 300);\n+\n+\t\t// Refresh state\n+\t\tGameManipulator.readGameState();\n+\t} else {\n+\t\t// Wait die, and call recursive action\n+\t\tGameManipulator.onGameEnd = function () {\n+\t\t\tGameManipulator.startNewGame(next);\n+\t\t};\n+\t}\n+};\n \n // Compute points based on sensors\n-//\n-// Basicaly, checks if an object has\n-// passed trough the sensor and the\n-// value is now higher than before\n+// Basicaly, checks if an object has passed trough the sensor and the value is now higher than before\n GameManipulator.computePoints = function () {\n-  for (var k in GameManipulator.sensors) {\n-    var sensor = GameManipulator.sensors[k];\n-\n-    if (sensor.value > 0.5 && sensor.lastValue < 0.3) {\n-      GameManipulator.points++;\n-      // console.log('POINTS: '+GameManipulator.points);\n-    }\n-  }\n-}\n-\n+\tfor (var k in GameManipulator.sensors) {\n+\t\tvar sensor = GameManipulator.sensors[k];\n+\n+\t\tif (sensor.value > 0.5 && sensor.lastValue < 0.3) {\n+\t\t\tGameManipulator.points++;\n+\t\t\t// console.log('POINTS: '+GameManipulator.points);\n+\t\t}\n+\t}\n+};\n \n // Read sensors\n //\n // Sensors are like ray-traces:\n-//   They have a starting point,\n-//   and a limit to search for.\n-//\n-// Each sensor can gatter data about\n-// the DISTANCE of the object, it's\n-// SIZE and it's speed\n-//\n+//   They have a starting point, and a limit to search for.\n+// Each sensor can gatter data about the DISTANCE of the object, it's SIZE and it's speed\n // Note: We currently only have a sensor.\n GameManipulator.readSensors = function () {\n-  var offset = GameManipulator.offset;\n-\n-  var startTime = Date.now();\n-\n-  for (var k in GameManipulator.sensors) {\n-\n-    var sensor = GameManipulator.sensors[k];\n-\n-    // Calculate absolute position of ray tracing\n-    var start = [\n-      offset[0] + sensor.offset[0],\n-      offset[1] + sensor.offset[1],\n-    ];\n+\tvar offset = GameManipulator.offset,\n+    startTime = Date.now();\n \n-    // Compute cursor forwarding\n-    var forward = sensor.value * GameManipulator.width * 0.8 * sensor.length;\n+\tfor (var k in GameManipulator.sensors) {\n+\t\tvar sensor = GameManipulator.sensors[k];\n \n-    var end = Scanner.scanUntil(\n-      // console.log(\n-        // Start position\n-        [start[0], start[1]],\n-        // Skip pixels\n-        sensor.step,\n-        // Searching Color\n-        COLOR_DINOSAUR,\n-        // Invert mode?\n-        false,\n-        // Iteration limit\n-        (GameManipulator.width * sensor.length) / sensor.step[0]);\n+\t\t// Calculate absolute position of ray tracing\n+\t\tvar start = [\n+\t\t\toffset[0] + sensor.offset[0],\n+\t\t\toffset[1] + sensor.offset[1],\n+\t\t];\n \n-    // Save lastValue\n-    sensor.lastValue = sensor.value;\n+\t\t// Compute cursor forwarding\n+\t\tvar forward = sensor.value * GameManipulator.width * 0.8 * sensor.length;\n \n-    // Calculate the Sensor value\n-    if (end) {\n-      sensor.value = (end[0] - start[0]) / (GameManipulator.width * sensor.length);\n+\t\tvar end = scanner.scanUntil(\n+\t\t\t\t[start[0], start[1]],\n+\t\t\t\tsensor.step,\n+\t\t\t\tCOLOR_DINOSAUR,\n+\t\t\t\tfalse,\n+\t\t\t\t(GameManipulator.width * sensor.length) / sensor.step[0]);\n \n-      // Calculate size of obstacle\n-      var endPoint = Scanner.scanUntil(\n-        [end[0] + 75, end[1]],\n-        [-2, 0],\n-        COLOR_DINOSAUR,\n-        false,\n-        75 / 2\n-      );\n+\t\t// Save lastValue\n+\t\tsensor.lastValue = sensor.value;\n \n-      // If no end point, set the start point as end\n-      if (!endPoint) {\n-        endPoint = end;\n-      }\n+\t\t// Calculate the Sensor value\n+\t\tif (end) {\n+\t\t\tsensor.value = (end[0] - start[0]) / (GameManipulator.width * sensor.length);\n \n-      var sizeTmp = (endPoint[0] - end[0]) / 100.0;\n-      if (GameManipulator.points == sensor.lastScore) {\n-        // It's the same obstacle. Set size to \"max\" of both\n-        sensor.size = Math.max(sensor.size, sizeTmp);\n-      } else {\n-        sensor.size = sizeTmp;\n-      }\n+\t\t\t// Calculate size of obstacle\n+\t\t\tvar endPoint = scanner.scanUntil(\n+\t\t\t\t[end[0] + 75, end[1]],\n+\t\t\t\t[-2, 0],\n+\t\t\t\tCOLOR_DINOSAUR,\n+\t\t\t\tfalse,\n+\t\t\t\t75 / 2\n+\t\t\t);\n \n+\t\t\t// If no end point, set the start point as end\n+\t\t\tif (!endPoint) endPoint = end;\n \n-      // We use the current score to check for object equality\n-      sensor.lastScore = GameManipulator.points;\n+\t\t\tvar sizeTmp = (endPoint[0] - end[0]) / 100.0;\n \n-      // sensor.size = Math.max(sensor.size, endPoint[0] - end[0]);\n+\t\t\tif (GameManipulator.points == sensor.lastScore) {\n+\t\t\t\t// It's the same obstacle. Set size to \"max\" of both\n+\t\t\t\tsensor.size = Math.max(sensor.size, sizeTmp);\n+\t\t\t} else {\n+\t\t\t\tsensor.size = sizeTmp;\n+\t\t\t}\n \n-    } else {\n-      sensor.value = 1;\n-      sensor.size = 0;\n-    }\n+\t\t\t// We use the current score to check for object equality\n+\t\t\tsensor.lastScore = GameManipulator.points;\n \n-    // Compute speed\n-    var dt = (Date.now() - sensor.lastComputeSpeed) / 1000;\n-    sensor.lastComputeSpeed = Date.now();\n+\t\t\t// sensor.size = Math.max(sensor.size, endPoint[0] - end[0]);\n+\t\t} else {\n+\t\t\tsensor.value = 1;\n+\t\t\tsensor.size = 0;\n+\t\t}\n \n-    if (sensor.value < sensor.lastValue) {\n-      // Compute speed\n-      var newSpeed = (sensor.lastValue - sensor.value) / dt;\n+\t\t// Compute speed\n+\t\tvar dt = (Date.now() - sensor.lastComputeSpeed) / 1000;\n+\t\tsensor.lastComputeSpeed = Date.now();\n \n-      sensor.lastSpeeds.unshift(newSpeed);\n+\t\tif (sensor.value < sensor.lastValue) {\n+\t\t\t// Compute speed\n+\t\t\tvar newSpeed = (sensor.lastValue - sensor.value) / dt;\n+\t\t\tsensor.lastSpeeds.unshift(newSpeed);\n \n-      while (sensor.lastSpeeds.length > 10) {\n-        sensor.lastSpeeds.pop();\n-      }\n+\t\t\twhile (sensor.lastSpeeds.length > 10)\n+\t\t\t\tsensor.lastSpeeds.pop();\n \n-      // Take Average\n-      var avgSpeed = 0;\n-      for (var k in sensor.lastSpeeds) {\n-        avgSpeed += sensor.lastSpeeds[k] / sensor.lastSpeeds.length;\n-      }\n+\t\t\t// Take Average\n+\t\t\tvar avgSpeed = 0;\n+\t\t\tfor (var k in sensor.lastSpeeds)\n+\t\t\t\tavgSpeed += sensor.lastSpeeds[k] / sensor.lastSpeeds.length;\n \n-      sensor.speed = Math.max(avgSpeed - 1.5, sensor.speed);\n+\t\t\tsensor.speed = Math.max(avgSpeed - 1.5, sensor.speed);\n+\t\t}\n \n-    }\n+\t\tsensor.size = Math.min(sensor.size, 1.0);\n \n-    // Save length/size of sensor value\n-    sensor.size = Math.min(sensor.size, 1.0);\n+\t\t// if(GameManipulator.gamestate == 'PLAYING') console.log(\"S[\"+k+\"]: \", sensor.value, sensor.size, Date.now() - startTime);\n \n-    startTime = Date.now();\n-  }\n+\t\tstartTime = Date.now();\n+\t}\n \n-  // Compute points\n-  GameManipulator.computePoints();\n-\n-  // Call sensor callback (to act)\n-  GameManipulator.onSensorData && GameManipulator.onSensorData();\n-}\n+\t// Compute points\n+\tGameManipulator.computePoints();\n \n+\t// Call sensor callback (to act)\n+\tGameManipulator.onSensorData && GameManipulator.onSensorData();\n+};\n \n // Set action to game\n // Values:\n-//  0.00 to  0.45: DOWN\n-//  0.45 to  0.55: NOTHING\n-//  0.55 to  1.00: UP (JUMP)\n-var PRESS = 'down';\n-var RELEASE = 'up';\n-\n+//  0.0 to  0.4: DOWN\n+//  0.4 to  0.6: NOTHING\n+//  0.6 to  1.0: UP (JUMP)\n+//\n+var PRESS = 'down',\n+  RELEASE = 'up';\n GameManipulator.lastOutputSet = 'NONE';\n GameManipulator.lastOutputSetTime = 0;\n \n-GameManipulator.setGameOutput = function (output){\n-\n-  GameManipulator.gameOutput = output;\n-  GameManipulator.gameOutputString = GameManipulator.getDiscreteState(output);\n-\n-  if (GameManipulator.gameOutputString == 'DOWN') {\n-    // Skew\n-    robot.keyToggle('up', RELEASE);\n-    robot.keyToggle('down', PRESS);\n-  } else if (GameManipulator.gameOutputString == 'NORM') {\n-    // DO Nothing\n-    robot.keyToggle('up', RELEASE);\n-    robot.keyToggle('down', RELEASE);\n-  } else {\n-\n-    // Filter JUMP\n-    if (GameManipulator.lastOutputSet != 'JUMP') {\n-      GameManipulator.lastOutputSetTime = Date.now();\n-    }\n-\n-    // JUMP\n-    // Check if hasn't jump for more than 3 continuous secconds\n-    if (Date.now() - GameManipulator.lastOutputSetTime < 3000) {\n-      robot.keyToggle('up', PRESS);\n-      robot.keyToggle('down', RELEASE);\n-    } else {\n-      robot.keyToggle('up', RELEASE);\n-      robot.keyToggle('down', RELEASE);\n-    }\n-\n-  }\n-\n-  GameManipulator.lastOutputSet = GameManipulator.gameOutputString;\n-}\n-\n+GameManipulator.setGameOutput = function (output) {\n+\tGameManipulator.gameOutput = output;\n+\tGameManipulator.gameOutputString = GameManipulator.getDiscreteState(output);\n+\n+\tif (GameManipulator.gameOutputString == 'DOWN') {\n+\t\t// Skew\n+\t\trobot.keyToggle('up', RELEASE);\n+\t\trobot.keyToggle('down', PRESS);\n+\t} else if (GameManipulator.gameOutputString == 'NORM') {\n+\t\t// DO Nothing\n+\t\trobot.keyToggle('up', RELEASE);\n+\t\trobot.keyToggle('down', RELEASE);\n+\t} else {\n+\t\t// Filter JUMP\n+\t\tif (GameManipulator.lastOutputSet != 'JUMP') GameManipulator.lastOutputSetTime = Date.now();\n+\n+\t\t// JUMP\n+\t\t// Check if hasn't jump for more than 3 continuous secconds\n+\t\tif (Date.now() - GameManipulator.lastOutputSetTime < 3000) {\n+\t\t\trobot.keyToggle('up', PRESS);\n+\t\t\trobot.keyToggle('down', RELEASE);\n+\t\t} else {\n+\t\t\trobot.keyToggle('up', RELEASE);\n+\t\t\trobot.keyToggle('down', RELEASE);\n+\t\t}\n+\t}\n+\n+\tGameManipulator.lastOutputSet = GameManipulator.gameOutputString;\n+};\n \n-//\n // Simply maps an real number to string actions\n-//\n-GameManipulator.getDiscreteState = function (value){\n-  if (value < 0.45) {\n-    return 'DOWN'\n-  } else if(value > 0.55) {\n-    return 'JUMP';\n-  }\n-\n-  return 'NORM';\n-}\n-\n+GameManipulator.getDiscreteState = function (value) {\n+\tif (value < 0.45) {\n+\t\treturn 'DOWN';\n+\t}else if(value > 0.55){\n+\t\treturn 'JUMP';\n+\t}\n+\n+\treturn 'NORM';\n+};\n \n-// Click on the Starting point\n-// to make sure game is focused\n-GameManipulator.focusGame = function (){\n-  robot.moveMouse(GameManipulator.offset[0], GameManipulator.offset[1]);\n-  robot.mouseClick('left');\n-}\n+// Click on the Starting point to make sure game is focused\n+GameManipulator.focusGame = function () {\n+\trobot.moveMouse(GameManipulator.offset[0], GameManipulator.offset[1]);\n+\trobot.mouseClick(\"left\");\n+};\n \n module.exports = GameManipulator;"
        },
        {
          "sha": "ad40b24da126e3931ece5df7fd2c9afd066c5633",
          "filename": "Learner.js",
          "status": "modified",
          "additions": 198,
          "deletions": 250,
          "changes": 448,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/dd23c8233b1e6979830554bccc6baba6783a2bcc/Learner.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/dd23c8233b1e6979830554bccc6baba6783a2bcc/Learner.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/Learner.js?ref=dd23c8233b1e6979830554bccc6baba6783a2bcc",
          "patch": "@@ -1,305 +1,253 @@\n-var synaptic = require('synaptic');\n-var async = require('async');\n-var _ = require('lodash');\n-\n-var Architect = synaptic.Architect;\n-var Network = synaptic.Network;\n+'use strict';\n \n+var _ = require('lodash'),\n+  async = require('async'),\n+  synaptic = require('synaptic'),\n+  Network = synaptic.Network,\n+  Architect = synaptic.Architect;\n \n var Learn = {\n-\n-  // Array of networks for current Genomes\n-  // (Genomes will be added the key `fitness`)\n-  genomes: [],\n-\n-  // Current state of learning [STOP, LEARNING]\n-  state: 'STOP',\n-\n-  // Current genome/generation tryout\n-  genome: 0,\n-  generation: 0,\n-\n-  // Set this, to verify genome experience BEFORE running it\n-  shouldCheckExperience: false,\n-\n+\t// Current Genomes\n+\t// In form of: {\n+\t// \t\tfitness: null,\n+\t// \t\tgenome: [...],\n+\t// \t\tnetwork: {NeuralNetworkObject}\n+\t// }\n+\tgenomes: [],\n+\tstate: 'STOP',\n+\tgenome: 0,                     // Current genome tryout\n+\tgeneration: 0,\n+\tshouldCheckExperience: false,  // Set this, to verify genome action BEFORE running it\n };\n \n-\n // Initialize the Learner\n-Learn.init = function (gameManip, ui, genomeUnits, selection, mutationProb) {\n-  Learn.gm = gameManip;\n-  Learn.ui = ui;\n-\n-  Learn.genome = 0;\n-  Learn.generation = 0;\n+Learn.init = function (gameManipulator, ui, genomeUnits, selection, mutationProb) {\n+\tLearn.gm = gameManipulator;\n+\tLearn.ui = ui;\n \n-  Learn.genomeUnits = genomeUnits;\n-  Learn.selection = selection;\n-  Learn.mutationProb = mutationProb;\n-}\n+\tLearn.genome = 0;\n+\tLearn.generation = 0;\n \n+\tLearn.genomeUnits = genomeUnits;\n+\tLearn.selection = selection;\n+\tLearn.mutationProb = mutationProb;\n+};\n \n // Build genomes before calling executeGeneration.\n Learn.startLearning = function () {\n+\t// Build genomes if needed\n+\twhile (Learn.genomes.length < Learn.genomeUnits) {\n+\t\tLearn.genomes.push(Learn.buildGenome(3, 1));\n+\t}\n \n-  // Build genomes if needed\n-  while (Learn.genomes.length < Learn.genomeUnits) {\n-    Learn.genomes.push(Learn.buildGenome(3, 1));\n-  }\n-\n-  Learn.executeGeneration();\n-  \n-}\n-\n+\tLearn.executeGeneration();\n+};\n \n-// Given the entire generation of genomes (An array),\n-// applyes method `executeGenome` for each element.\n+// Given the entire generation of genomes (An array), applies method `executeGenome` for each element.\n // After all elements have completed executing:\n-// \n // 1) Select best genomes\n // 2) Does cross over (except for 2 genomes)\n // 3) Does Mutation-only on remaining genomes\n // 4) Execute generation (recursivelly)\n-Learn.executeGeneration = function (){\n-  if (Learn.state == 'STOP') {\n-    return;\n-  }\n-\n-  Learn.generation++;\n-  Learn.ui.logger.log('Executing generation '+Learn.generation);\n-\n-  Learn.genome = 0;\n-\n-  async.mapSeries(Learn.genomes, Learn.executeGenome, function (argument) {\n+Learn.executeGeneration = function () {\n+\tif (Learn.state == 'STOP') return;\n \n-    // Kill worst genomes\n-    Learn.genomes = Learn.selectBestGenomes(Learn.selection);\n+\tLearn.generation++;\n+\tLearn.ui.logger.log('Executing generation ' + Learn.generation);\n \n-    // Copy best genomes\n-    var bestGenomes = _.clone(Learn.genomes);\n+\tLearn.genome = 0;\n \n-    // Cross Over ()\n-    while (Learn.genomes.length < Learn.genomeUnits - 2) {\n-      // Get two random Genomes\n-      var genA = _.sample(bestGenomes).toJSON();\n-      var genB = _.sample(bestGenomes).toJSON();\n+\tasync.mapSeries(Learn.genomes, Learn.executeGenome, function (argument) {\n+\t\t// Kill worst genomes\n+\t\tLearn.genomes = Learn.selectBestGenomes(Learn.selection);\n \n-      // Cross over and Mutate\n-      var newGenome = Learn.mutate(Learn.crossOver(genA, genB));\n+\t\t// Copy best genomes\n+\t\tvar bestGenomes = _.clone(Learn.genomes);\n \n-      // Add to generation\n-      Learn.genomes.push(Network.fromJSON(newGenome));\n-    }\n+\t\t// Cross Over ()\n+\t\twhile (Learn.genomes.length < Learn.genomeUnits - 2) {\n+\t\t\t// Get two random Genomes\n+\t\t\tvar genA = _.sample(bestGenomes).toJSON(),\n+        genB = _.sample(bestGenomes).toJSON(),\n+        newGenome = Learn.mutate(Learn.crossOver(genA, genB));  // Cross over and Mutate\n \n-    // Mutation-only\n-    while (Learn.genomes.length < Learn.genomeUnits) {\n-      // Get two random Genomes\n-      var gen = _.sample(bestGenomes).toJSON();\n+\t\t\t// Add to generation\n+\t\t\tLearn.genomes.push(Network.fromJSON(newGenome));\n+\t\t}\n \n-      // Cross over and Mutate\n-      var newGenome = Learn.mutate(gen);\n+\t\t// Mutation-only\n+\t\twhile (Learn.genomes.length < Learn.genomeUnits) {\n+\t\t\tvar gen = _.sample(bestGenomes).toJSON(), // Get random Genome\n+        newGenome = Learn.mutate(gen);// Cross over and Mutate\n \n-      // Add to generation\n-      Learn.genomes.push(Network.fromJSON(newGenome));\n-    }\n+\t\t\t// Add to generation\n+\t\t\tLearn.genomes.push(Network.fromJSON(newGenome));\n+\t\t}\n \n-    Learn.ui.logger.log('Completed generation '+Learn.generation);\n+\t\tLearn.ui.logger.log('Completed generation ' + Learn.generation);\n \n-    // Execute next generation\n-    Learn.executeGeneration();\n-  })\n-}\n-\n-\n-// Sort all the genomes, and delete the worst one\n-// untill the genome list has selectN elements.\n-Learn.selectBestGenomes = function (selectN){\n-  var selected = _.sortBy(Learn.genomes, 'fitness').reverse();\n+\t\t// Execute next generation\n+\t\tLearn.executeGeneration();\n+\t});\n+};\n \n-  while (selected.length > selectN) {\n-    selected.pop();\n-  }\n+// Sort all the genomes, and delete the worst one until the genome list has selectN elements.\n+Learn.selectBestGenomes = function (selectN) {\n+\tvar selected = _.sortBy(Learn.genomes, 'fitness').reverse();\n \n-  Learn.ui.logger.log('Fitness: '+_.pluck(selected, 'fitness').join(','));\n+\twhile (selected.length > selectN) {\n+\t\tselected.pop();\n+\t}\n \n-  return selected;\n-}\n+\tLearn.ui.logger.log('Fitness: ' + _.pluck(selected, 'fitness').join(','));\n \n+\treturn selected;\n+};\n \n // Waits the game to end, and start a new one, then:\n // 1) Set's listener for sensorData\n-// 2) On data read, applyes the neural network, and\n-//    set it's output\n+// 2) On data read, applyes the neural network, and set it's output\n // 3) When the game has ended and compute the fitness\n-Learn.executeGenome = function (genome, next){\n-  if (Learn.state == 'STOP') {\n-    return;\n-  }\n-\n-  Learn.genome = Learn.genomes.indexOf(genome) + 1;\n-  // Learn.ui.logger.log('Executing genome '+Learn.genome);\n-\n-  // Check if genome has AT LEAST some experience\n-  if (Learn.shouldCheckExperience) {\n-    if (!Learn.checkExperience(genome)) {\n-      genome.fitness = 0;\n-      // Learn.ui.logger.log('Genome '+Learn.genome+' has no min. experience');\n-      return next();\n-    }\n-  }\n-\n-  Learn.gm.startNewGame(function (){\n-\n-    // Reads sensor data, and apply network\n-    Learn.gm.onSensorData = function (){\n-      var inputs = [\n-        Learn.gm.sensors[0].value,\n-        Learn.gm.sensors[0].size,\n-        Learn.gm.sensors[0].speed,\n-      ];\n-      // console.log(inputs);\n-      // Apply to network\n-      var outputs = genome.activate(inputs);\n-\n-      Learn.gm.setGameOutput(outputs[0]);\n-    }\n-\n-    // Wait game end, and compute fitness\n-    Learn.gm.onGameEnd = function (points){\n-      Learn.ui.logger.log('Genome '+Learn.genome+' ended. Fitness: '+points);\n-\n-      // Save Genome fitness\n-      genome.fitness = points;\n-\n-      // Go to next genome\n-      next();\n-    }\n-  });\n-\n-}\n-\n+Learn.executeGenome = function (genome, next) {\n+\tif (Learn.state == 'STOP') return;\n+\n+\tLearn.genome = Learn.genomes.indexOf(genome) + 1;\n+\t// Learn.ui.logger.log('Executing genome '+Learn.genome);\n+\n+\t// Check if genome has AT LEAST some experience\n+\tif (Learn.shouldCheckExperience) {\n+\t\tif (!Learn.checkExperience(genome)) {\n+\t\t\tgenome.fitness = 0;\n+\t\t\t// Learn.ui.logger.log('Genome '+Learn.genome+' has no minimum experience');\n+\t\t\treturn next();\n+\t\t}\n+\t}\n+\n+\tLearn.gm.startNewGame(function () {\n+\t\t// Reads sensor data, and apply network\n+\t\tLearn.gm.onSensorData = function () {\n+\t\t\tvar inputs = [\n+\t\t\t\tLearn.gm.sensors[0].value,\n+\t\t\t\tLearn.gm.sensors[0].size,\n+\t\t\t\tLearn.gm.sensors[0].speed,\n+\t\t\t];\n+\t\t\t// console.log(inputs);\n+\t\t\t// Apply to network\n+\t\t\tvar outputs = genome.activate(inputs);\n+\n+\t\t\tLearn.gm.setGameOutput(outputs[0]);\n+\t\t};\n+\n+\t\t// Wait game end, and compute fitness\n+\t\tLearn.gm.onGameEnd = function (points) {\n+\t\t\tLearn.ui.logger.log('Genome ' + Learn.genome + ' ended. Fitness: ' + points);\n+\n+\t\t\t// Save Genome fitness\n+\t\t\tgenome.fitness = points;\n+\n+\t\t\t// Go to next genome\n+\t\t\tnext();\n+\t\t};\n+\t});\n+};\n \n // Validate if any acction occur uppon a given input (in this case, distance).\n-// If genome only keeps a single activation value for any given input,\n-// it will return false\n+// If genome only keeps a single activation value for any given input, it will return false\n Learn.checkExperience = function (genome) {\n-  \n-  var step = 0.1, start = 0.0, stop = 1;\n+\tvar step = 0.1, start = 0.0, stop = 1;\n \n-  // Inputs are default. We only want to test the first index\n-  var inputs = [0.0, 0.3, 0.2];\n-  var activation, state, outputs = {};\n+\t// Inputs are default. We only want to test the first index\n+\tvar inputs = [0.0, 0.3, 0.2];\n+\tvar activation, state, outputs = {};\n \n-  for (var k = start; k < stop; k += step) {\n-    inputs[0] = k;\n+\tfor (var k = start; k < stop; k += step) {\n+\t\tinputs[0] = k;\n \n-    activation = genome.activate(inputs);\n-    state = Learn.gm.getDiscreteState(activation);\n-    \n-    outputs[state] = true;\n-  }\n+\t\tactivation = genome.activate(inputs);\n+\t\tstate = Learn.gm.getDiscreteState(activation);\n \n-  // Count states, and return true if greater than 1\n-  return _.keys(outputs).length > 1;\n-}\n+\t\toutputs[state] = true;\n+\t}\n \n+\t// Count states, and return true if greater than 1\n+\treturn _.keys(outputs).length > 1;\n+};\n \n // Load genomes saved from JSON file\n-Learn.loadGenomes = function (genomes, deleteOthers){\n-  if (deleteOthers) {\n-    Learn.genomes = [];\n-  }\n+Learn.loadGenomes = function (genomes, deleteOthers) {\n+\tif (deleteOthers) Learn.genomes = [];\n \n-  var loaded = 0;\n-  for (var k in genomes) {\n-    Learn.genomes.push(Network.fromJSON(genomes[k]));\n-    loaded++;\n-  }\n-\n-  Learn.ui.logger.log('Loaded '+loaded+' genomes!');\n-}\n+\tvar loaded = 0;\n+\tfor (var k in genomes) {\n+\t\tLearn.genomes.push(Network.fromJSON(genomes[k]));\n+\t\tloaded++;\n+\t}\n \n+\tLearn.ui.logger.log('Loaded ' + loaded + ' genomes!');\n+};\n \n-// Builds a new genome based on the \n-// expected number of inputs and outputs\n+// Builds a new genome based on the expected number of inputs and outputs\n Learn.buildGenome = function (inputs, outputs) {\n-  Learn.ui.logger.log('Build genome '+(Learn.genomes.length+1));\n-\n-  var network = new Architect.Perceptron(inputs, 4, 4, outputs);\n-\n-  return network;\n-}\n-\n+\tLearn.ui.logger.log('Build genome ' + (Learn.genomes.length + 1));\n+\tvar network = new Architect.Perceptron(inputs, 4, 4, outputs);\n+\treturn network;\n+\t// console.log(JSON.stringify(network.toJSON()));\n+\t// process.exit();\n+};\n \n // SPECIFIC to Neural Network.\n // Those two methods convert from JSON to Array, and from Array to JSON\n Learn.crossOver = function (netA, netB) {\n-  // Swap (50% prob.)\n-  if (Math.random() > 0.5) {\n-    var tmp = netA;\n-    netA = netB;\n-    netB = tmp;\n-  }\n-\n-  // Clone network\n-  netA = _.cloneDeep(netA);\n-  netB = _.cloneDeep(netB);\n-\n-  // Cross over data keys\n-  Learn.crossOverDataKey(netA.neurons, netB.neurons, 'bias');\n-\n-  return netA;\n-}\n-\n-\n-// Does random mutations across all\n-// the biases and weights of the Networks\n-// (This must be done in the JSON to\n-// prevent modifying the current one)\n-Learn.mutate = function (net){\n-  // Mutate\n-  Learn.mutateDataKeys(net.neurons, 'bias', Learn.mutationProb);\n-  \n-  Learn.mutateDataKeys(net.connections, 'weight', Learn.mutationProb);\n-\n-  return net;\n-}\n-\n-\n-// Given an Object A and an object B, both Arrays\n-// of Objects:\n-// \n-// 1) Select a cross over point (cutLocation)\n-//    randomly (going from 0 to A.length)\n-// 2) Swap values from `key` one to another,\n-//    starting by cutLocation\n+\t// Swap (50% prob.)\n+\tif (Math.random() > 0.5) {\n+\t\tvar tmp = netA;\n+\t\tnetA = netB;\n+\t\tnetB = tmp;\n+\t}\n+\n+\t// Clone network\n+\tnetA = _.cloneDeep(netA);\n+\tnetB = _.cloneDeep(netB);\n+\n+\t// Cross over data keys\n+\tLearn.crossOverDataKey(netA.neurons, netB.neurons, 'bias');\n+\t// Learn.crossOverDataKey(netA.connections, netB.connections, 'weight');\n+\n+\treturn netA;\n+};\n+\n+// Does random mutations across all the biases and weights of the Networks\n+// (This must be done in the JSON to prevent modifying the current one)\n+Learn.mutate = function (net) {\n+\t// Mutate\n+\tLearn.mutateDataKeys(net.neurons, 'bias', Learn.mutationProb);\n+\tLearn.mutateDataKeys(net.connections, 'weight', Learn.mutationProb);\n+\n+\treturn net;\n+};\n+\n+// Given an Object A and an object B, both Arrays of Objects:\n+// 1) Select a cross over point (cutLocation) randomly (going from 0 to A.length)\n+// 2) Swap values from `key` one to another, starting by cutLocation\n Learn.crossOverDataKey = function (a, b, key) {\n-  var cutLocation = Math.round(a.length * Math.random());\n-\n-  var tmp;\n-  for (var k = cutLocation; k < a.length; k++) {\n-    // Swap\n-    tmp = a[k][key];\n-    a[k][key] = b[k][key];\n-    b[k][key] = tmp;\n-  }\n-}\n-\n-\n-// Given an Array of objects with key `key`,\n-// and also a `mutationRate`, randomly Mutate\n-// the value of each key, if random value is\n-// lower than mutationRate for each element.\n-Learn.mutateDataKeys = function (a, key, mutationRate){\n-  for (var k = 0; k < a.length; k++) {\n-    // Should mutate?\n-    if (Math.random() > mutationRate) {\n-      continue;\n-    }\n-\n-    a[k][key] += a[k][key] * (Math.random() - 0.5) * 3 + (Math.random() - 0.5);\n-  }\n-}\n-\n-\n-module.exports = Learn;\n\\ No newline at end of file\n+\tvar cutLocation = Math.round(a.length * Math.random());\n+\tvar tmp;\n+\n+\tfor (var k = cutLocation; k < a.length; k++) {\n+\t\t// Swap\n+\t\ttmp = a[k][key];\n+\t\ta[k][key] = b[k][key];\n+\t\tb[k][key] = tmp;\n+\t}\n+};\n+\n+// Given an Array of objects with key `key`, and also a `mutationRate`, randomly Mutate the value of each key, if random value is lower than mutationRate for each element.\n+Learn.mutateDataKeys = function (a, key, mutationRate) {\n+\tfor (var k = 0; k < a.length; k++) {\n+\t\t// Should mutate?\n+\t\tif (Math.random() > mutationRate) continue;\n+\t\ta[k][key] += a[k][key] * (Math.random() - 0.5) * 3 + (Math.random() - 0.5);\n+\t}\n+};\n+\n+module.exports = Learn;"
        },
        {
          "sha": "038ed0665a6be8a78e5f737c82068d4fe87158cd",
          "filename": "UI.js",
          "status": "modified",
          "additions": 175,
          "deletions": 193,
          "changes": 368,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/dd23c8233b1e6979830554bccc6baba6783a2bcc/UI.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/dd23c8233b1e6979830554bccc6baba6783a2bcc/UI.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/UI.js?ref=dd23c8233b1e6979830554bccc6baba6783a2bcc",
          "patch": "@@ -1,208 +1,190 @@\n-var contrib = require('blessed-contrib')\n-var blessed = require('blessed')\n-var fs = require('fs');\n-\n-var screen = blessed.screen()\n-\n-var UI = {};\n+'use strict';\n+\n+var fs = require('fs'),\n+blessed = require('blessed'),\n+  contrib = require('blessed-contrib'),\n+  screen = blessed.screen(),\n+  UI = {},\n+\n+  // Function used to save game data, we call it twice (on click or by pressing O).\n+  savegame = function () {\n+\t\tvar jsonGenomes = [];\n+\t\tfor (var k in UI.learner.genomes) {\n+\t\t\tjsonGenomes.push(UI.learner.genomes[k].toJSON());\n+\t\t}\n+\n+\t\tUI.logger.log('Saving ' + jsonGenomes.length + ' genomes...');\n+\n+\t\tvar fileName = './genomes/gen_' + UI.learner.generation + '_' + Date.now() + '.json';\n+\t\tfs.writeFile(fileName, JSON.stringify(jsonGenomes), function (err) {\n+\t\t\tif (err) {\n+        UI.logger.log('Failed to save! ' + err);\n+\t\t\t} else {\n+\t\t\t\tUI.logger.log('Saved to ' + fileName);\n+      }\n \n+\t\t\tUI.refreshFiles();\n+\t\t});\n+\t};\n \n // Initialize UI objects\n UI.init = function (gameManipulator, learner) {\n-  UI.gm = gameManipulator;\n-  UI.learner = learner;\n-\n-  UI.grid = new contrib.grid({\n-    rows: 12,\n-    cols: 6,\n-    screen: screen\n-  });\n-\n-\n-  // Build Sensor inputs\n-  UI.uiSensors = UI.grid.set(0, 0, 3, 6, contrib.bar, {\n-    label: 'Network Inputs',\n-    // bg: 'white',\n-    barWidth: 12,\n-    barSpacing: 1,\n-    xOffset: 0,\n-    maxHeight: 100,\n-  });\n-\n-\n-  // Build Log box\n-  UI.logger = UI.grid.set(3, 0, 3, 6, contrib.log, {\n-    fg: 'green',\n-    selectedFg: 'green',\n-    label: 'Logs'\n-  });\n-\n-\n-  // Current score/time view\n-  UI.uiScore = UI.grid.set(6, 0, 3, 3, blessed.Text, {\n-    label: 'Game Stats',\n-    // bg: 'green',\n-    fg: 'white',\n-    content: 'Loading...',\n-    align: 'center',\n-  });\n-\n-\n-  // Current Genomes stats\n-  UI.uiGenomes = UI.grid.set(6, 3, 3, 3, blessed.Text, {\n-    label: 'Genome Stats',\n-    // bg: 'green',\n-    fg: 'white',\n-    content: 'Hey!',\n-    align: 'center',\n-  });\n-\n-\n-  // Load Tree\n-  UI.savesTree = UI.grid.set(9, 0, 3, 3, contrib.tree, {\n-    label: 'Saved Genomes',\n-  });\n-\n-\n-  // Callback for Loading genomes and focusing tree\n+\tUI.gm = gameManipulator;\n+\tUI.learner = learner;\n+\n+\tUI.grid = new contrib.grid({\n+\t\trows: 12,\n+\t\tcols: 6,\n+\t\tscreen: screen\n+\t});\n+\n+\t// Build Sensor inputs\n+\tUI.uiSensors = UI.grid.set(0, 0, 3, 6, contrib.bar, {\n+\t\tlabel: 'Network Inputs',\n+\t\t// bg: 'white',\n+\t\tbarWidth: 12,\n+\t\tbarSpacing: 1,\n+\t\txOffset: 0,\n+\t\tmaxHeight: 100,\n+\t});\n+\n+\t// Build Log box\n+\tUI.logger = UI.grid.set(3, 0, 3, 6, contrib.log, {\n+\t\tfg: 'green',\n+\t\tselectedFg: 'green',\n+\t\tlabel: 'Logs'\n+\t});\n+\n+\t// Current score/time view\n+\tUI.uiScore = UI.grid.set(6, 0, 3, 3, blessed.Text, {\n+\t\tlabel: 'Game Stats',\n+\t\t// bg: 'green',\n+\t\tfg: 'white',\n+\t\tcontent: 'Loading...',\n+\t\talign: 'center',\n+\t});\n+\n+\t// Current Genomes stats\n+\tUI.uiGenomes = UI.grid.set(6, 3, 3, 3, blessed.Text, {\n+\t\tlabel: 'Genome Stats',\n+\t\t// bg: 'green',\n+\t\tfg: 'white',\n+\t\tcontent: 'Hey!',\n+\t\talign: 'center',\n+\t});\n+\n+\t// Load Tree\n+\tUI.savesTree = UI.grid.set(9, 0, 3, 3, contrib.tree, {\n+\t\tlabel: 'Saved Genomes  Press [L]',\n+\t});\n+\n+  //Pressing L now selects load panel (compatibility with older Terminal).\n   screen.key(['l','L'], UI.savesTree.focus.bind(UI.savesTree));\n-  UI.savesTree.on('click', UI.savesTree.focus.bind(UI.savesTree));\n-  UI.savesTree.on('select', function (item){\n-\n-    if (item.isFile) {\n-      var fileName = item.name;\n-\n-      UI.logger.log('Loading genomes from file:');\n-      UI.logger.log(fileName);\n-\n-      var genomes = require('./genomes/'+fileName);\n-\n-      UI.learner.loadGenomes(genomes);\n-    } else {\n-      UI.refreshFiles();\n-    }\n-  });\n-\n-  UI.refreshFiles();\n-\n-\n-  // Save Btn\n-  UI.btnSave = UI.grid.set(9, 3, 3, 3, blessed.box, {\n-    label: 'Save to File',\n-    bg: 'green',\n-    fg: 'red',\n-    content: '\\n\\n\\n\\nSave Genomes',\n-    align: 'center',\n-  });\n-\n-  //UI.btnSave.on('click', function (){\n-  screen.key(['o','O'], function(){\n-    var jsonGenomes = [];\n-    for (var k in UI.learner.genomes) {\n-      jsonGenomes.push(UI.learner.genomes[k].toJSON());\n-    }\n-\n-    UI.logger.log('Saving '+jsonGenomes.length+' genomes...');\n-\n-    var dir = './genomes';\n-    var fileName = dir + '/gen_'+UI.learner.generation+'_'+Date.now()+'.json';\n-    fs.writeFile(fileName, JSON.stringify(jsonGenomes), function (err){\n-      if (err) {\n-        UI.logger.log('Failed to save! '+err);\n-      } else {\n-        UI.logger.log('Saved to '+fileName);\n-      }\n-\n-      UI.refreshFiles();\n-    });\n-\n-  });\n-\n-  screen.key(['escape', 'q', 'C-c'], function(ch, key) {\n-    return process.exit(0);\n-  });\n-\n-  screen.key(['s'], function (ch, key){\n-    if (learner.state == 'STOP') {\n-      learner.state = 'LEARNING';\n-      gameManipulator.focusGame();\n-      learner.startLearning();\n-    } else {\n-      learner.state = 'STOP';\n-    }\n-  });\n-\n-  screen.render()\n+\tUI.savesTree.on('click', UI.savesTree.focus.bind(UI.savesTree));\n+\tUI.savesTree.on('select', function (item) {\n+\t\tif (item.isFile) {\n+\t\t\tvar fileName = item.name;\n+\n+\t\t\tUI.logger.log('Loading genomes from file:');\n+\t\t\tUI.logger.log(fileName);\n+\n+\t\t\tvar genomes = require('./genomes/' + fileName);\n+\n+\t\t\tUI.learner.loadGenomes(genomes);\n+\t\t} else {\n+\t\t\tUI.refreshFiles();\n+\t\t}\n+\t});\n+\n+\tUI.refreshFiles();\n+\n+\t// Save Btn\n+\tUI.btnSave = UI.grid.set(9, 3, 3, 3, blessed.box, {\n+\t\tlabel: 'Save to File',\n+\t\tbg: 'green',\n+\t\tfg: 'red',\n+\t\tcontent: '\\n\\n\\n\\nSave Genomes\\nPress [o]',\n+\t\talign: 'center',\n+\t});\n+\n+  //Pressing O now outputs game data to a save file\n+  screen.key(['o','O'], savegame());\n+\tUI.btnSave.on('click', savegame());\n+\n+\tscreen.key(['escape', 'q', 'C-c'], function (ch, key) {\n+\t return process.exit(0);\n+\t});\n+\n+\tscreen.key(['s'], function (ch, key) {\n+\t\tif (learner.state == 'STOP') {\n+\t\t\tlearner.state = 'LEARNING';\n+\t\t\tgameManipulator.focusGame();\n+\t\t\tlearner.startLearning();\n+\t\t} else {\n+\t\t\tlearner.state = 'STOP';\n+\t\t}\n+\t});\n+\n+\tscreen.render();\n };\n \n-\n // Read entire folder and select files that match a .json file\n-UI.refreshFiles = function (){\n-  var files = [];\n-  var fileData = {\n-    name: 'Saved Files',\n-    extended: true,\n-    children: [{\n-      name: 'Refresh Folders'\n-    }]\n-  };\n-\n-  // Populate tree\n-  UI.logger.log('Reading genomes dir...')\n-  var files = fs.readdirSync('./genomes');\n-  for (var k in files) {\n-    if (files[k].indexOf('.json') >= 0) {\n-\n-      fileData.children.push({\n-        name: files[k],\n-        isFile: true,\n-      });\n-\n-    }\n-  }\n-\n-  UI.savesTree.setData(fileData);\n-}\n-\n+UI.refreshFiles = function () {\n+\tvar files = [];\n+\tvar fileData = {\n+\t\tname: 'Saved Files',\n+\t\textended: true,\n+\t\tchildren: [{\n+\t\t\tname: 'Refresh Folders'\n+\t\t}]\n+\t};\n+\n+\t// Populate tree\n+\tUI.logger.log('Reading genomes dir...');\n+\tvar files = fs.readdirSync('./genomes');\n+\tfor (var k in files) {\n+\t\tif (files[k].indexOf('.json') >= 0) {\n+\t\t\tfileData.children.push({\n+\t\t\t\tname: files[k],\n+\t\t\t\tisFile: true,\n+\t\t\t});\n+\t\t}\n+\t}\n+\n+\tUI.savesTree.setData(fileData);\n+};\n \n // Updates data on the screen and render it\n UI.render = function () {\n+\t// Update data\n+\tUI.uiSensors.setData({\n+\t\ttitles: ['Distance', 'Size', 'Speed', 'Activation'],\n+\t\tdata: [\n+\t\t\tMath.round(UI.gm.sensors[0].value * 100),\n+\t\t\tMath.round(UI.gm.sensors[0].size * 100),\n+\t\t\tMath.round(UI.gm.sensors[0].speed * 100),\n+\t\t\tMath.round(UI.gm.gameOutput * 100),\n+\t\t]\n+\t});\n+\n+\t// Set Genome stats and score\n+\tvar learn = UI.learner;\n+\tvar uiStats = 'Status: ' + learn.state + '\\n';\n+\tuiStats += 'Fitness: ' + UI.gm.points + '\\nGameStatus: ' + UI.gm.gamestate + '\\n';\n+\tuiStats += 'Generation: ' + learn.generation + ' : ' + learn.genome + '/' + learn.genomes.length;\n+\tUI.uiScore.setText(uiStats);\n+\n+\tif (UI.gm.gameOutput) {\n+\t\tvar str = 'Action: ' + UI.gm.gameOutputString + '\\nActivation: ' + UI.gm.gameOutput;\n+\t\tUI.uiGenomes.setText(str);\n+\t} else {\n+\t\tUI.uiGenomes.setText('Loading...');\n+\t}\n+\n+\t// Render screen\n+\tscreen.render();\n+};\n \n-  // Update data\n-  UI.uiSensors.setData({\n-    titles: ['Distance', 'Size', 'Speed', 'Activation'],\n-    data: [\n-      Math.round(UI.gm.sensors[0].value * 100),\n-      Math.round(UI.gm.sensors[0].size * 100),\n-      Math.round(UI.gm.sensors[0].speed * 100),\n-      Math.round(UI.gm.gameOutput * 100),\n-    ]\n-  })\n-\n-  // Set Genome stats and score\n-  var learn = UI.learner;\n-  var uiStats = '';\n-  uiStats += 'Status: ' + learn.state + '\\n';\n-  uiStats += 'Fitness: ' + UI.gm.points + '\\n';\n-  uiStats += 'GameStatus: ' + UI.gm.gamestate + '\\n';\n-  uiStats += 'Generation: ' + learn.generation;\n-  uiStats += ' : ' + learn.genome + '/' + learn.genomes.length;\n-  UI.uiScore.setText(uiStats);\n-\n-  if (UI.gm.gameOutput) {\n-    var str = '';\n-    str += 'Action: ' + UI.gm.gameOutputString + '\\n'\n-    str += 'Activation: ' + UI.gm.gameOutput;\n-    UI.uiGenomes.setText(str);\n-  } else {\n-    UI.uiGenomes.setText('Loading...');\n-  }\n-\n-  // Render screen\n-  screen.render();\n-}\n-\n-// Continuously render screen\n setInterval(UI.render, 25);\n \n module.exports = UI;"
        },
        {
          "sha": "934961b0e266050b4c20a2d8cf375cceefd613c0",
          "filename": "index.js",
          "status": "modified",
          "additions": 20,
          "deletions": 30,
          "changes": 50,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/dd23c8233b1e6979830554bccc6baba6783a2bcc/index.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/dd23c8233b1e6979830554bccc6baba6783a2bcc/index.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/index.js?ref=dd23c8233b1e6979830554bccc6baba6783a2bcc",
          "patch": "@@ -1,61 +1,51 @@\n-var robot = require('robotjs');\n-\n-var GameManipulator = require('./GameManipulator');\n-var Learner = require('./Learner');\n-var Scanner = require('./Scanner');\n-var UI = require('./UI');\n+'use strict';\n \n+var UI = require('./UI'),\n+  robot = require('robotjs'),\n+  Learner = require('./Learner'),\n+  scanner = require('./Scanner'),\n+  GameManipulator = require('./GameManipulator');\n \n // Configure Robotjs\n robot.setMouseDelay(1);\n \n-\n // Initialize Game\n GameManipulator.findGamePosition();\n \n-\n // Check for found game\n if (GameManipulator.offset) {\n-  // Uncomment this line to debug the\n-  // starting point of sensor (Check if it's detecting it correcly)\n-\n-  // robot.moveMouse(GameManipulator.offset[0]+GameManipulator.sensors[0].offset[0],\n-  //    GameManipulator.offset[1] + GameManipulator.sensors[0].offset[1]);\n-\n-  robot.moveMouse(GameManipulator.offset[0], GameManipulator.offset[1]);\n+\t// Uncomment this line to debug the starting point (Check if it's detecting it correcly)\n+\t// robot.moveMouse(GameManipulator.offset[0]+GameManipulator.sensors[0].offset[0], GameManipulator.offset[1] + GameManipulator.sensors[0].offset[1]);\n+\trobot.moveMouse(GameManipulator.offset[0], GameManipulator.offset[1]);\n } else {\n-  console.error('FAILED TO FIND GAME!');\n-  process.exit();\n+\tconsole.error('FAILED TO FIND GAME!');\n+\tprocess.exit();\n }\n \n-\n // Initialize UI\n UI.init(GameManipulator, Learner);\n \n-\n // Init Learner\n Learner.init(GameManipulator, UI, 12, 4, 0.2);\n \n-\n // Start reading game state and sensors\n setInterval(GameManipulator.readSensors, 40);\n setInterval(GameManipulator.readGameState, 200);\n \n-\n // Start game (Example of API usage)\n /*\n function startGame () {\n   var game = Math.round(Math.random() * 100);\n \n-  UI.logger.log('Queuing start... ', game);\n+\tUI.logger.log('Queuing start... ', game);\n \n-  GameManipulator.startNewGame(function() {\n-    UI.logger.log('Game HAS started!', game);\n-    GameManipulator.onGameEnd = function () {\n-      UI.logger.log('Game HAS ended!', game);\n+\tGameManipulator.startNewGame(function () {\n+\t\tUI.logger.log('Game HAS started!', game);\n+\t\tGameManipulator.onGameEnd = function () {\n+\t\t\tUI.logger.log('Game HAS ended!', game);\n \n-      startGame();\n-    }\n-  });\n+\t\t\tstartGame();\n+\t\t}\n+\t});\n }\n-*/\n\\ No newline at end of file\n+*/"
        }
      ]
    },
    "6a43619554b5638636fa3f3b39de0780b3435fd4": {
      "sha": "6a43619554b5638636fa3f3b39de0780b3435fd4",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6NmE0MzYxOTU1NGI1NjM4NjM2ZmEzZjNiMzlkZTA3ODBiMzQzNWZkNA==",
      "commit": {
        "author": {
          "name": "John Mora",
          "email": "johmora12@engineer.com",
          "date": "2016-07-11T17:47:45Z"
        },
        "committer": {
          "name": "John Mora",
          "email": "johmora12@engineer.com",
          "date": "2016-07-11T17:47:45Z"
        },
        "message": "Pressing L activates load panel, pressing O saves. Game restart now presses Command+R",
        "tree": {
          "sha": "c306f307da8ca501a90aee40ddea027b9b452b0a",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/c306f307da8ca501a90aee40ddea027b9b452b0a"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/6a43619554b5638636fa3f3b39de0780b3435fd4",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/6a43619554b5638636fa3f3b39de0780b3435fd4",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/6a43619554b5638636fa3f3b39de0780b3435fd4",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/6a43619554b5638636fa3f3b39de0780b3435fd4/comments",
      "author": null,
      "committer": null,
      "parents": [
        {
          "sha": "ae3bef1d4d4ecc594a0a48d1983fa89b1609c3f5",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/ae3bef1d4d4ecc594a0a48d1983fa89b1609c3f5",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/ae3bef1d4d4ecc594a0a48d1983fa89b1609c3f5"
        }
      ],
      "stats": { "total": 20, "additions": 13, "deletions": 7 },
      "files": [
        {
          "sha": "80f5dfdf22db3bcbe3a7d79082c3a0a3feb359df",
          "filename": "GameManipulator.js",
          "status": "modified",
          "additions": 8,
          "deletions": 3,
          "changes": 11,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/6a43619554b5638636fa3f3b39de0780b3435fd4/GameManipulator.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/6a43619554b5638636fa3f3b39de0780b3435fd4/GameManipulator.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/GameManipulator.js?ref=6a43619554b5638636fa3f3b39de0780b3435fd4",
          "patch": "@@ -8,7 +8,7 @@ var Scanner = require ('./Scanner');\n // COLOR DEFINITIONS\n // This is the Dino's colour, also used by Obstacles.\n var COLOR_DINOSAUR = '535353';\n-\n+var DARK_COLOR_DINO = 'ACACAC';\n \n var GameManipulator = {\n \n@@ -207,7 +207,12 @@ GameManipulator.startNewGame = function (next) {\n \n     // Press space to begin game (repetidelly)\n     _startKeyInterval = setInterval(function (){\n-      robot.keyTap(' ');\n+      // Due to dino slowly gliding over the screen after multiple restarts, its better to just reload the page\n+      robot.keyTap('r','command');\n+      setTimeout(function() {\n+        // Once reloaded we wait 0.5sec for it to let us start the game with a space.\n+          robot.keyTap(' ');\n+      }, 500);\n     }, 300);\n \n     // Refresh state\n@@ -429,4 +434,4 @@ GameManipulator.focusGame = function (){\n   robot.mouseClick('left');\n }\n \n-module.exports = GameManipulator;\n\\ No newline at end of file\n+module.exports = GameManipulator;"
        },
        {
          "sha": "0dd058680293dfb38f18210a08536ffa79748f4a",
          "filename": "UI.js",
          "status": "modified",
          "additions": 5,
          "deletions": 4,
          "changes": 9,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/6a43619554b5638636fa3f3b39de0780b3435fd4/UI.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/6a43619554b5638636fa3f3b39de0780b3435fd4/UI.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/UI.js?ref=6a43619554b5638636fa3f3b39de0780b3435fd4",
          "patch": "@@ -65,6 +65,7 @@ UI.init = function (gameManipulator, learner) {\n \n \n   // Callback for Loading genomes and focusing tree\n+  screen.key(['l','L'], UI.savesTree.focus.bind(UI.savesTree));\n   UI.savesTree.on('click', UI.savesTree.focus.bind(UI.savesTree));\n   UI.savesTree.on('select', function (item){\n \n@@ -94,8 +95,8 @@ UI.init = function (gameManipulator, learner) {\n     align: 'center',\n   });\n \n-  UI.btnSave.on('click', function (){\n-\n+  //UI.btnSave.on('click', function (){\n+  screen.key(['o','O'], function(){\n     var jsonGenomes = [];\n     for (var k in UI.learner.genomes) {\n       jsonGenomes.push(UI.learner.genomes[k].toJSON());\n@@ -151,7 +152,7 @@ UI.refreshFiles = function (){\n   var files = fs.readdirSync('./genomes');\n   for (var k in files) {\n     if (files[k].indexOf('.json') >= 0) {\n-      \n+\n       fileData.children.push({\n         name: files[k],\n         isFile: true,\n@@ -204,4 +205,4 @@ UI.render = function () {\n // Continuously render screen\n setInterval(UI.render, 25);\n \n-module.exports = UI;\n\\ No newline at end of file\n+module.exports = UI;"
        }
      ]
    },
    "8e3ab2ac51bd171ef6c5b485abe140ab7522137a": {
      "sha": "8e3ab2ac51bd171ef6c5b485abe140ab7522137a",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6OGUzYWIyYWM1MWJkMTcxZWY2YzViNDg1YWJlMTQwYWI3NTIyMTM3YQ==",
      "commit": {
        "author": {
          "name": "Somda",
          "email": "tsomda@gmail.com",
          "date": "2016-11-17T01:52:13Z"
        },
        "committer": {
          "name": "Somda",
          "email": "tsomda@gmail.com",
          "date": "2016-11-17T01:52:13Z"
        },
        "message": "fixed page reload bug for windows OS",
        "tree": {
          "sha": "c0f1f0e3c26aca278774921b4ab5148bdabc5936",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/c0f1f0e3c26aca278774921b4ab5148bdabc5936"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/8e3ab2ac51bd171ef6c5b485abe140ab7522137a",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/8e3ab2ac51bd171ef6c5b485abe140ab7522137a",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/8e3ab2ac51bd171ef6c5b485abe140ab7522137a",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/8e3ab2ac51bd171ef6c5b485abe140ab7522137a/comments",
      "author": {
        "login": "tiagosomda",
        "id": 1281399,
        "node_id": "MDQ6VXNlcjEyODEzOTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1281399?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tiagosomda",
        "html_url": "https://github.com/tiagosomda",
        "followers_url": "https://api.github.com/users/tiagosomda/followers",
        "following_url": "https://api.github.com/users/tiagosomda/following{/other_user}",
        "gists_url": "https://api.github.com/users/tiagosomda/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tiagosomda/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tiagosomda/subscriptions",
        "organizations_url": "https://api.github.com/users/tiagosomda/orgs",
        "repos_url": "https://api.github.com/users/tiagosomda/repos",
        "events_url": "https://api.github.com/users/tiagosomda/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tiagosomda/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "tiagosomda",
        "id": 1281399,
        "node_id": "MDQ6VXNlcjEyODEzOTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1281399?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tiagosomda",
        "html_url": "https://github.com/tiagosomda",
        "followers_url": "https://api.github.com/users/tiagosomda/followers",
        "following_url": "https://api.github.com/users/tiagosomda/following{/other_user}",
        "gists_url": "https://api.github.com/users/tiagosomda/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tiagosomda/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tiagosomda/subscriptions",
        "organizations_url": "https://api.github.com/users/tiagosomda/orgs",
        "repos_url": "https://api.github.com/users/tiagosomda/repos",
        "events_url": "https://api.github.com/users/tiagosomda/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tiagosomda/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "b57942434601f1b80bb7e1e466efe66a0b90b7ca",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/b57942434601f1b80bb7e1e466efe66a0b90b7ca",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/b57942434601f1b80bb7e1e466efe66a0b90b7ca"
        }
      ],
      "stats": { "total": 15, "additions": 14, "deletions": 1 },
      "files": [
        {
          "sha": "55c2c2735942d3062c5904ce4d521b714780c07d",
          "filename": "GameManipulator.js",
          "status": "modified",
          "additions": 14,
          "deletions": 1,
          "changes": 15,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/8e3ab2ac51bd171ef6c5b485abe140ab7522137a/GameManipulator.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/8e3ab2ac51bd171ef6c5b485abe140ab7522137a/GameManipulator.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/GameManipulator.js?ref=8e3ab2ac51bd171ef6c5b485abe140ab7522137a",
          "patch": "@@ -208,7 +208,7 @@ GameManipulator.startNewGame = function (next) {\n     // Press space to begin game (repetidelly)\n     _startKeyInterval = setInterval(function (){\n       // Due to dino slowly gliding over the screen after multiple restarts, its better to just reload the page\n-      robot.keyTap('r','command');\n+      GameManipulator.reloadPage();\n       setTimeout(function() {\n         // Once reloaded we wait 0.5sec for it to let us start the game with a space.\n           robot.keyTap(' ');\n@@ -228,6 +228,19 @@ GameManipulator.startNewGame = function (next) {\n \n }\n \n+// reload the page\n+GameManipulator.reloadPage = function ()\n+{\n+  // retrieves platform\n+  var platform = process.platform;\n+\n+  if(/^win/.test(process.platform)) {\n+    robot.keyTap('r','control');\n+  } else if(/^darwin/.test(process.platform)) {\n+    robot.keyTap('r','command');\n+  }\n+}\n+\n \n // Compute points based on sensors\n //"
        }
      ]
    },
    "041722ff7c7d59eb49335e48d103180586493da3": {
      "sha": "041722ff7c7d59eb49335e48d103180586493da3",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6MDQxNzIyZmY3YzdkNTllYjQ5MzM1ZTQ4ZDEwMzE4MDU4NjQ5M2RhMw==",
      "commit": {
        "author": {
          "name": "AdriÃ¡n JesÃºs PeÃ±a RodrÃ­guez",
          "email": "adrian.j.p.r@gmail.com",
          "date": "2017-03-26T22:43:04Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2017-03-26T22:43:04Z"
        },
        "message": "Arreglo en la version",
        "tree": {
          "sha": "8bad95e0204b7ab173c716c281e2c223d8d7231c",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/8bad95e0204b7ab173c716c281e2c223d8d7231c"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/041722ff7c7d59eb49335e48d103180586493da3",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/041722ff7c7d59eb49335e48d103180586493da3",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/041722ff7c7d59eb49335e48d103180586493da3",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/041722ff7c7d59eb49335e48d103180586493da3/comments",
      "author": null,
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "50e46cacf7a3492261a2b9c6feb18f0fb7e0e6e2",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/50e46cacf7a3492261a2b9c6feb18f0fb7e0e6e2",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/50e46cacf7a3492261a2b9c6feb18f0fb7e0e6e2"
        }
      ],
      "stats": { "total": 2, "additions": 1, "deletions": 1 },
      "files": [
        {
          "sha": "9af20b699b0498891d3bc334a78917cf95d98fda",
          "filename": "package.json",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "changes": 2,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/041722ff7c7d59eb49335e48d103180586493da3/package.json",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/041722ff7c7d59eb49335e48d103180586493da3/package.json",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/package.json?ref=041722ff7c7d59eb49335e48d103180586493da3",
          "patch": "@@ -13,7 +13,7 @@\n     \"blessed\": \"^0.1.81\",\n     \"blessed-contrib\": \"^2.5.2\",\n     \"lodash\": \"^3.10.1\",\n-    \"robotjs\": \"^0.3.6\",\n+    \"robotjs\": \"^0.4.5\",\n     \"synaptic\": \"^1.0.5\"\n   },\n   \"repository\": {"
        }
      ]
    },
    "8644b0a8f3e148523afcb722c603fe819f19258d": {
      "sha": "8644b0a8f3e148523afcb722c603fe819f19258d",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6ODY0NGIwYThmM2UxNDg1MjNhZmNiNzIyYzYwM2ZlODE5ZjE5MjU4ZA==",
      "commit": {
        "author": {
          "name": "Huan LI",
          "email": "zixia@zixia.net",
          "date": "2017-06-09T17:30:31Z"
        },
        "committer": {
          "name": "Huan LI",
          "email": "zixia@zixia.net",
          "date": "2017-06-09T17:30:31Z"
        },
        "message": "compatible(chrome): v59 seems changed the `GAME OVER` position. (fix #50)",
        "tree": {
          "sha": "809d6d22ffa778d946620dde50af2ff2402e6abd",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/809d6d22ffa778d946620dde50af2ff2402e6abd"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/8644b0a8f3e148523afcb722c603fe819f19258d",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/8644b0a8f3e148523afcb722c603fe819f19258d",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/8644b0a8f3e148523afcb722c603fe819f19258d",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/8644b0a8f3e148523afcb722c603fe819f19258d/comments",
      "author": {
        "login": "huan",
        "id": 1361891,
        "node_id": "MDQ6VXNlcjEzNjE4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1361891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/huan",
        "html_url": "https://github.com/huan",
        "followers_url": "https://api.github.com/users/huan/followers",
        "following_url": "https://api.github.com/users/huan/following{/other_user}",
        "gists_url": "https://api.github.com/users/huan/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/huan/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/huan/subscriptions",
        "organizations_url": "https://api.github.com/users/huan/orgs",
        "repos_url": "https://api.github.com/users/huan/repos",
        "events_url": "https://api.github.com/users/huan/events{/privacy}",
        "received_events_url": "https://api.github.com/users/huan/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "huan",
        "id": 1361891,
        "node_id": "MDQ6VXNlcjEzNjE4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1361891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/huan",
        "html_url": "https://github.com/huan",
        "followers_url": "https://api.github.com/users/huan/followers",
        "following_url": "https://api.github.com/users/huan/following{/other_user}",
        "gists_url": "https://api.github.com/users/huan/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/huan/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/huan/subscriptions",
        "organizations_url": "https://api.github.com/users/huan/orgs",
        "repos_url": "https://api.github.com/users/huan/repos",
        "events_url": "https://api.github.com/users/huan/events{/privacy}",
        "received_events_url": "https://api.github.com/users/huan/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "aeb80e95cb3d9051bfd518da2bc6d73ae24a44d4",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/aeb80e95cb3d9051bfd518da2bc6d73ae24a44d4",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/aeb80e95cb3d9051bfd518da2bc6d73ae24a44d4"
        }
      ],
      "stats": { "total": 2, "additions": 1, "deletions": 1 },
      "files": [
        {
          "sha": "ec557ba1af19dd7eeb9da5b3d81d492ab7ce5619",
          "filename": "GameManipulator.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "changes": 2,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/8644b0a8f3e148523afcb722c603fe819f19258d/GameManipulator.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/8644b0a8f3e148523afcb722c603fe819f19258d/GameManipulator.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/GameManipulator.js?ref=8644b0a8f3e148523afcb722c603fe819f19258d",
          "patch": "@@ -28,7 +28,7 @@ var GameManipulator = {\n   gamestate: 'OVER',\n \n   // GameOver Position\n-  gameOverOffset: [190, -82],\n+  gameOverOffset: [190, -75],\n \n   // Stores an array of \"sensors\" (Ray tracings)\n   // Positions are always relative to global \"offset\""
        }
      ]
    },
    "c34450a09649f0591451a62301212318413db6ba": {
      "sha": "c34450a09649f0591451a62301212318413db6ba",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6YzM0NDUwYTA5NjQ5ZjA1OTE0NTFhNjIzMDEyMTIzMTg0MTNkYjZiYQ==",
      "commit": {
        "author": {
          "name": "Anand Dyavanapalli",
          "email": "adyavanapalli@gmail.com",
          "date": "2017-12-19T18:58:46Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2017-12-19T18:58:46Z"
        },
        "message": "Fix typo.",
        "tree": {
          "sha": "1c3e40ed4aa1afee013fb76a5dc1aaf750ad7a25",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/1c3e40ed4aa1afee013fb76a5dc1aaf750ad7a25"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/c34450a09649f0591451a62301212318413db6ba",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaOWFmCRBK7hj4Ov3rIwAAdHIIACk42j0lXKidZD4aCp39KmSE\n7WxouM3CBn3kQa0Hbwg0C57yRMnZi+7z7sB4GU1aS7QNIbSbB61AZrGewmkFiLPo\n7lt4P6HWe9dJmBi2VB1Z7GEp9eT/Yib8MXc2TowvndFeM56rOrzwZnWMo4BvD3Jc\nIg4TmliKziiv+MhfAcOwyrONWriBXACCxPpL4w389Ia3KBKJ4iTbP34YEkrNqPsD\niDPzayPjyggdjD/G6pq9F+y7bmSU/HogzetB5AMaQRl3zl29jvwg7ELZDS5k+6xK\n8TIgx8aJn4RdKyxtZD7O98pBdnx81AsKOrfG4WgsCR9aUwAx4v+Ay1v8uZRG2gQ=\n=BEyy\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 1c3e40ed4aa1afee013fb76a5dc1aaf750ad7a25\nparent 3a2e403c22b83693aeb88a55fab3d9753f57d3e5\nauthor Anand Dyavanapalli <adyavanapalli@gmail.com> 1513709926 -0500\ncommitter GitHub <noreply@github.com> 1513709926 -0500\n\nFix typo."
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/c34450a09649f0591451a62301212318413db6ba",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/c34450a09649f0591451a62301212318413db6ba",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/c34450a09649f0591451a62301212318413db6ba/comments",
      "author": {
        "login": "adyavanapalli",
        "id": 8067797,
        "node_id": "MDQ6VXNlcjgwNjc3OTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8067797?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/adyavanapalli",
        "html_url": "https://github.com/adyavanapalli",
        "followers_url": "https://api.github.com/users/adyavanapalli/followers",
        "following_url": "https://api.github.com/users/adyavanapalli/following{/other_user}",
        "gists_url": "https://api.github.com/users/adyavanapalli/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/adyavanapalli/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/adyavanapalli/subscriptions",
        "organizations_url": "https://api.github.com/users/adyavanapalli/orgs",
        "repos_url": "https://api.github.com/users/adyavanapalli/repos",
        "events_url": "https://api.github.com/users/adyavanapalli/events{/privacy}",
        "received_events_url": "https://api.github.com/users/adyavanapalli/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "3a2e403c22b83693aeb88a55fab3d9753f57d3e5",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/3a2e403c22b83693aeb88a55fab3d9753f57d3e5",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/3a2e403c22b83693aeb88a55fab3d9753f57d3e5"
        }
      ],
      "stats": { "total": 2, "additions": 1, "deletions": 1 },
      "files": [
        {
          "sha": "222a603940dcc50d2ea91a3792501eb73ee6e44a",
          "filename": "README.md",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "changes": 2,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/c34450a09649f0591451a62301212318413db6ba/README.md",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/c34450a09649f0591451a62301212318413db6ba/README.md",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/README.md?ref=c34450a09649f0591451a62301212318413db6ba",
          "patch": "@@ -5,7 +5,7 @@\n A simple artificial intelligence to teach Google Chrome's offline dinosaur to\n jump cactus, using Neural Networks and a simple Genetic Algorithm.\n \n-**Watch** this video to see it in action, and learn how it works: [Artificial Inteligence with Google's Dinosaur](https://youtu.be/P7XHzqZjXQs)\n+**Watch** this video to see it in action, and learn how it works: [Artificial Intelligence with Google's Dinosaur](https://youtu.be/P7XHzqZjXQs)\n \n ## Installation\n "
        }
      ]
    },
    "fcf9ab8264ef507c3d612d6d5e5d75353dcf395a": {
      "sha": "fcf9ab8264ef507c3d612d6d5e5d75353dcf395a",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6ZmNmOWFiODI2NGVmNTA3YzNkNjEyZDZkNWU1ZDc1MzUzZGNmMzk1YQ==",
      "commit": {
        "author": {
          "name": "Eduardomoberti",
          "email": "eduardomoberti@hotmail.com",
          "date": "2018-01-01T22:26:18Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2018-01-01T22:26:18Z"
        },
        "message": "Update UI.js\n\nChanged the method to save the genomes, the older didnÂ´t work.",
        "tree": {
          "sha": "c6ba11b31259eea0f2e1d49d0574ac401d12debe",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/c6ba11b31259eea0f2e1d49d0574ac401d12debe"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/fcf9ab8264ef507c3d612d6d5e5d75353dcf395a",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaSrWKCRBK7hj4Ov3rIwAAdHIIAG/xN9tUMpjpQ9nPkRbwwhN9\nzJD6h08KoAud3egPtT7tDqu2jeKLArkk/F2/uZBWsbDZ8fr/A4HpWToAjXiIh+mO\nG7derSuvSlbwglweWCpt4P0CWmGOsD7hi7GEgI9pGnbEgTKHzSLW1oKGLxnDPA++\nFSFeBCxYqBcJgLpy+D5vlsiGMquvrp/Gf+Uog5C33hI/b+TdEK0E3+3M0Z3nLZV/\njxHrwXXHR8LcgATLvfGRolJdlV0HdrBiE6abI9iLJ7RmBK/Th60vgwV9Dd3Q/otf\nbjIfGNJNMHSn/4wHFh79OwKsPqrjIwqLRpmT6Ho8X97NnWaj3Ahfwaa4Mj3weMU=\n=DzTd\n-----END PGP SIGNATURE-----\n",
          "payload": "tree c6ba11b31259eea0f2e1d49d0574ac401d12debe\nparent 8e4fdeac07a7b1c9b5b848a95faf6447454d6d69\nauthor Eduardomoberti <eduardomoberti@hotmail.com> 1514845578 +0100\ncommitter GitHub <noreply@github.com> 1514845578 +0100\n\nUpdate UI.js\n\nChanged the method to save the genomes, the older didnÂ´t work."
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/fcf9ab8264ef507c3d612d6d5e5d75353dcf395a",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/fcf9ab8264ef507c3d612d6d5e5d75353dcf395a",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/fcf9ab8264ef507c3d612d6d5e5d75353dcf395a/comments",
      "author": {
        "login": "Eduardo-Morales-Alberti",
        "id": 24698482,
        "node_id": "MDQ6VXNlcjI0Njk4NDgy",
        "avatar_url": "https://avatars.githubusercontent.com/u/24698482?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eduardo-Morales-Alberti",
        "html_url": "https://github.com/Eduardo-Morales-Alberti",
        "followers_url": "https://api.github.com/users/Eduardo-Morales-Alberti/followers",
        "following_url": "https://api.github.com/users/Eduardo-Morales-Alberti/following{/other_user}",
        "gists_url": "https://api.github.com/users/Eduardo-Morales-Alberti/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Eduardo-Morales-Alberti/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Eduardo-Morales-Alberti/subscriptions",
        "organizations_url": "https://api.github.com/users/Eduardo-Morales-Alberti/orgs",
        "repos_url": "https://api.github.com/users/Eduardo-Morales-Alberti/repos",
        "events_url": "https://api.github.com/users/Eduardo-Morales-Alberti/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Eduardo-Morales-Alberti/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "8e4fdeac07a7b1c9b5b848a95faf6447454d6d69",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/8e4fdeac07a7b1c9b5b848a95faf6447454d6d69",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/8e4fdeac07a7b1c9b5b848a95faf6447454d6d69"
        }
      ],
      "stats": { "total": 23, "additions": 14, "deletions": 9 },
      "files": [
        {
          "sha": "241736e113ffcee6c76e224329af9b7c49b40fcf",
          "filename": "UI.js",
          "status": "modified",
          "additions": 14,
          "deletions": 9,
          "changes": 23,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/fcf9ab8264ef507c3d612d6d5e5d75353dcf395a/UI.js",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/fcf9ab8264ef507c3d612d6d5e5d75353dcf395a/UI.js",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/UI.js?ref=fcf9ab8264ef507c3d612d6d5e5d75353dcf395a",
          "patch": "@@ -1,8 +1,8 @@\n-var contrib = require('blessed-contrib')\n-var blessed = require('blessed')\n+var contrib = require('blessed-contrib');\n+var blessed = require('blessed');\n var fs = require('fs');\n \n-var screen = blessed.screen()\n+var screen = blessed.screen();\n \n var UI = {};\n var savegame = function(){\n@@ -116,15 +116,20 @@ UI.init = function (gameManipulator, learner) {\n     align: 'center',\n   });\n \n-  UI.btnSave.on('click', savegame())\n-  screen.key(['o','O'], savegame());\n+  UI.btnSave.on('click', function(){\n+      savegame();\n+  });\n+\n+ screen.key(['o','O'], function(){\n+   savegame();\n+ });\n \n   screen.key(['escape', 'q', 'C-c'], function(ch, key) {\n     return process.exit(0);\n   });\n \n   screen.key(['s'], function (ch, key){\n-    if (learner.state == 'STOP') {\n+    if (learner.state === 'STOP') {\n       learner.state = 'LEARNING';\n       gameManipulator.focusGame();\n       learner.startLearning();\n@@ -133,7 +138,7 @@ UI.init = function (gameManipulator, learner) {\n     }\n   });\n \n-  screen.render()\n+  screen.render();\n };\n \n \n@@ -149,7 +154,7 @@ UI.refreshFiles = function (){\n   };\n \n   // Populate tree\n-  UI.logger.log('Reading genomes dir...')\n+  UI.logger.log('Reading genomes dir...');\n   var files = fs.readdirSync('./genomes');\n   for (var k in files) {\n     if (files[k].indexOf('.json') >= 0) {\n@@ -192,7 +197,7 @@ UI.render = function () {\n \n   if (UI.gm.gameOutput) {\n     var str = '';\n-    str += 'Action: ' + UI.gm.gameOutputString + '\\n'\n+    str += 'Action: ' + UI.gm.gameOutputString + '\\n';\n     str += 'Activation: ' + UI.gm.gameOutput;\n     UI.uiGenomes.setText(str);\n   } else {"
        }
      ]
    },
    "91ce4bcbcf136eab9f4567102a616889449a6200": {
      "sha": "91ce4bcbcf136eab9f4567102a616889449a6200",
      "node_id": "MDY6Q29tbWl0NDg2NjA4NjM6OTFjZTRiY2JjZjEzNmVhYjlmNDU2NzEwMmE2MTY4ODk0NDlhNjIwMA==",
      "commit": {
        "author": {
          "name": "Eduardomoberti",
          "email": "eduardomoberti@hotmail.com",
          "date": "2018-01-01T22:13:20Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2018-01-01T22:13:20Z"
        },
        "message": "Update README.md\n\nAdded some important shoutcuts.",
        "tree": {
          "sha": "9320bb2b8eee64c176cb4f353a60cca7941cd99e",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/trees/9320bb2b8eee64c176cb4f353a60cca7941cd99e"
        },
        "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/git/commits/91ce4bcbcf136eab9f4567102a616889449a6200",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaSrKACRBK7hj4Ov3rIwAAdHIIAIwfWkG2I6ugss6/y7QZ7JC/\nyJR/Hfhfovc63nOY3wTU7yBrmUw7sPgiQ5cc8L5Q/FheBS7KQdVAehP7eW801wuT\nGm1IaZ4amTPjAhkXV8debyndGGhqNcbI4/B1WPtob2tQ5P6FRjG1EE2VM1RDEF95\n1BeH6rGR1ZwFliIerFhSk8Qh+Lp616YhBSRLTV71Yk4SUaGQqQxPal2EWUlrrRXG\nPT7Tj1M+9Tx5lecGv7FyygTm1X9msuAEzowwNTy0xmv8LvzYwaqu8FC1/Vg4WoFe\nwBDWhPQqZvWVILqg38DZXMxpk8cKmI74S676pjld5Zc+xnQMokwS2Pnt57rfCEk=\n=GpGp\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 9320bb2b8eee64c176cb4f353a60cca7941cd99e\nparent 8e4fdeac07a7b1c9b5b848a95faf6447454d6d69\nauthor Eduardomoberti <eduardomoberti@hotmail.com> 1514844800 +0100\ncommitter GitHub <noreply@github.com> 1514844800 +0100\n\nUpdate README.md\n\nAdded some important shoutcuts."
        }
      },
      "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/91ce4bcbcf136eab9f4567102a616889449a6200",
      "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/91ce4bcbcf136eab9f4567102a616889449a6200",
      "comments_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/91ce4bcbcf136eab9f4567102a616889449a6200/comments",
      "author": {
        "login": "Eduardo-Morales-Alberti",
        "id": 24698482,
        "node_id": "MDQ6VXNlcjI0Njk4NDgy",
        "avatar_url": "https://avatars.githubusercontent.com/u/24698482?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eduardo-Morales-Alberti",
        "html_url": "https://github.com/Eduardo-Morales-Alberti",
        "followers_url": "https://api.github.com/users/Eduardo-Morales-Alberti/followers",
        "following_url": "https://api.github.com/users/Eduardo-Morales-Alberti/following{/other_user}",
        "gists_url": "https://api.github.com/users/Eduardo-Morales-Alberti/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Eduardo-Morales-Alberti/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Eduardo-Morales-Alberti/subscriptions",
        "organizations_url": "https://api.github.com/users/Eduardo-Morales-Alberti/orgs",
        "repos_url": "https://api.github.com/users/Eduardo-Morales-Alberti/repos",
        "events_url": "https://api.github.com/users/Eduardo-Morales-Alberti/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Eduardo-Morales-Alberti/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "8e4fdeac07a7b1c9b5b848a95faf6447454d6d69",
          "url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/commits/8e4fdeac07a7b1c9b5b848a95faf6447454d6d69",
          "html_url": "https://github.com/ivanseidel/IAMDinosaur/commit/8e4fdeac07a7b1c9b5b848a95faf6447454d6d69"
        }
      ],
      "stats": { "total": 6, "additions": 6, "deletions": 0 },
      "files": [
        {
          "sha": "3885c5d47d1dd9cc34dd047ab699534a39790db5",
          "filename": "README.md",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "changes": 6,
          "blob_url": "https://github.com/ivanseidel/IAMDinosaur/blob/91ce4bcbcf136eab9f4567102a616889449a6200/README.md",
          "raw_url": "https://github.com/ivanseidel/IAMDinosaur/raw/91ce4bcbcf136eab9f4567102a616889449a6200/README.md",
          "contents_url": "https://api.github.com/repos/ivanseidel/IAMDinosaur/contents/README.md?ref=91ce4bcbcf136eab9f4567102a616889449a6200",
          "patch": "@@ -88,6 +88,12 @@ There are a few files in the project:\n 4. Navigate up/down to the wanted file\n 5. Press `enter` (then, to start, press `s`)\n \n+### Some shortcuts\n+\n+1. Run the program\n+2. Press `o` to save the generation\n+3. Press Â´escapeÂ´, Â´qÂ´ or `C-c` to finish the process\n+\n \n ### Be aware of a game bug\n "
        }
      ]
    }
  }
}
